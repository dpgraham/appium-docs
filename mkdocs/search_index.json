{
    "docs": [
        {
            "location": "/", 
            "text": "Appium\n\n\nPlaceholder Appium Index", 
            "title": "Home"
        }, 
        {
            "location": "/#appium", 
            "text": "", 
            "title": "Appium"
        }, 
        {
            "location": "/#placeholder-appium-index", 
            "text": "", 
            "title": "Placeholder Appium Index"
        }, 
        {
            "location": "/about-appium/appium-clients/", 
            "text": "List of client libraries with Appium server support\n\n\nThese libraries wrap standard Selenium client libraries to provide all the regular selenium commands dictated by the \nJSON Wire protocol\n, and add extra commands related to controlling mobile devices, such as \nmulti-touch gestures\n and \nscreen orientation\n.\n\n\nAppium client libraries implement the \nMobile JSON Wire Protocol\n (an official draft extension to the standard protocol), and elements of the \nW3C Webdriver spec\n (a transport-agnostic automation spec; this is where the MultiAction API is defined).\n\n\nThe Appium server itself defines custom extensions to the official protocols, giving Appium users helpful access to various device behaviors (such as installing/uninstalling apps during the course of a test session). This is why we need Appium-specific clients, not just the 'vanilla' Selenium clients. Of course, Appium client libraries only \nadd\n functionality (in fact, they simply extend the standard Selenium clients), so they can still be used to run regular Selenium sessions.\n\n\n\n\n\n\n\n\nLanguage/Framework\n\n\nGithub Repo and Installation Instructions\n\n\n\n\n\n\n\n\n\n\n\n\nRuby\n\n\nhttps://github.com/appium/ruby_lib\n\n\n\n\n\n\n\n\nPython\n\n\nhttps://github.com/appium/python-client\n\n\n\n\n\n\n\n\nJava\n\n\nhttps://github.com/appium/java-client\n\n\n\n\n\n\n\n\nJavaScript (Node.js)\n\n\nhttps://github.com/admc/wd\n\n\n\n\n\n\n\n\nObjective C\n\n\nhttps://github.com/appium/selenium-objective-c\n\n\n\n\n\n\n\n\nPHP\n\n\nhttps://github.com/appium/php-client\n\n\n\n\n\n\n\n\nC# (.NET)\n\n\nhttps://github.com/appium/appium-dotnet-driver\n\n\n\n\n\n\n\n\nRobotFramework\n\n\nhttps://github.com/jollychang/robotframework-appiumlibrary", 
            "title": "Appium clients"
        }, 
        {
            "location": "/about-appium/appium-clients/#list-of-client-libraries-with-appium-server-support", 
            "text": "These libraries wrap standard Selenium client libraries to provide all the regular selenium commands dictated by the  JSON Wire protocol , and add extra commands related to controlling mobile devices, such as  multi-touch gestures  and  screen orientation .  Appium client libraries implement the  Mobile JSON Wire Protocol  (an official draft extension to the standard protocol), and elements of the  W3C Webdriver spec  (a transport-agnostic automation spec; this is where the MultiAction API is defined).  The Appium server itself defines custom extensions to the official protocols, giving Appium users helpful access to various device behaviors (such as installing/uninstalling apps during the course of a test session). This is why we need Appium-specific clients, not just the 'vanilla' Selenium clients. Of course, Appium client libraries only  add  functionality (in fact, they simply extend the standard Selenium clients), so they can still be used to run regular Selenium sessions.     Language/Framework  Github Repo and Installation Instructions       Ruby  https://github.com/appium/ruby_lib     Python  https://github.com/appium/python-client     Java  https://github.com/appium/java-client     JavaScript (Node.js)  https://github.com/admc/wd     Objective C  https://github.com/appium/selenium-objective-c     PHP  https://github.com/appium/php-client     C# (.NET)  https://github.com/appium/appium-dotnet-driver     RobotFramework  https://github.com/jollychang/robotframework-appiumlibrary", 
            "title": "List of client libraries with Appium server support"
        }, 
        {
            "location": "/about-appium/intro/", 
            "text": "Introduction to Appium\n\n\nAppium is an open-source tool for automating native, mobile web, and hybrid applications on iOS mobile, Android mobile, and Windows desktop platforms.  \nNative apps\n are those written using the iOS, Android, or Windows SDKs.  \nMobile web apps\n are web apps accessed using a mobile browser (Appium supports Safari on iOS and Chrome or the built-in 'Browser' app on Android).  \nHybrid apps\n have a wrapper around a \"webview\" -- a native control that enables interaction with web content. Projects like \nPhonegap\n, make it easy to build apps using web technologies that are then bundled into a native wrapper, creating a hybrid app.\n\n\nImportantly, Appium is \"cross-platform\": it allows you to write tests against\nmultiple platforms (iOS, Android, Windows), using the same API. This enables code reuse between iOS, Android, and Windows testsuites.\n\n\nFor specific information about what it means for Appium to \"support\" its\nplatforms, and automation modalities, please see the \nplatform support doc\n.\n\n\nAppium Philosophy\n\n\nAppium was designed to meet mobile automation needs according to a philosophy outlined by the following four tenets:\n\n\n\n\nYou shouldn't have to recompile your app or modify it in any way in order to automate it.\n\n\nYou shouldn't be locked into a specific language or framework to write and run your tests.\n\n\nA mobile automation framework shouldn't reinvent the wheel when it comes to automation APIs.\n\n\nA mobile automation framework should be open source, in spirit and practice as well as in name!\n\n\n\n\nAppium Design\n\n\nSo how does the structure of the Appium project live out this philosophy? We\nmeet requirement #1 by using vendor-provided automation frameworks under the\nhood. That way, we don't need to compile in any Appium-specific or\nthird-party code or frameworks to your app. This means \nyou're testing the same app you're shipping\n. The vendor-provided frameworks we use are:\n\n\n\n\niOS 9.3 and above: Apple's \nXCUITest\n\n\niOS 9.3 and lower: Apple's \nUIAutomation\n\n\nAndroid 4.2+: Google's \nUiAutomator\n\n\nAndroid 2.3+: Google's \nInstrumentation\n. (Instrumentation support is provided by bundling a separate project, \nSelendroid\n)\n\n\nWindows: Microsoft's \nWinAppDriver\n\n\n\n\nWe meet requirement #2 by wrapping the vendor-provided frameworks in one API,\nthe \nWebDriver\n API.\nWebDriver (aka \"Selenium WebDriver\") specifies a client-server protocol\n(known as the \nJSON Wire Protocol\n).\nGiven this client-server architecture, a client written in any language can\nbe used to send the appropriate HTTP requests to the server. There are\nalready \nclients written in every popular programming language\n. This also\nmeans that you're free to use whatever test runner and test framework you\nwant; the client libraries are simply HTTP clients and can be mixed into your\ncode any way you please. In other words, Appium \n WebDriver clients are not\ntechnically \"test frameworks\" -- they are \"automation libraries\". You can\nmanage your test environment any way you like!\n\n\nWe meet requirement #3 in the same way: WebDriver has become the de facto\nstandard for automating web browsers, and is a \nW3C Working Draft\n.\nWhy do something totally different for mobile? Instead we have \nextended the protocol\n\nwith extra API methods useful for mobile automation.\n\n\nIt should be obvious that requirement #4 is a given -- you're reading this\nbecause \nAppium is open source\n.\n\n\nAppium Concepts\n\n\nClient/Server Architecture\n\nAppium is at its heart a webserver that exposes a REST API. It receives\nconnections from a client, listens for commands, executes those commands on a\nmobile device, and responds with an HTTP response representing the result of\nthe command execution. The fact that we have a client/server architecture\nopens up a lot of possibilities: we can write our test code in any language\nthat has a http client API, but it is easier to use one of the \nAppium client\nlibraries\n. We can put the server on a different machine than our\ntests are running on. We can write test code and rely on a cloud service\nlike \nSauce Labs\n to receive and interpret the commands.\n\n\nSession\n\nAutomation is always performed in the context of a session. Clients initiate\na session with a server in ways specific to each library,\nbut they all end up sending a \nPOST /session\n request to the server,\nwith a JSON object called  the 'desired capabilities' object. At this point\nthe server will start up the automation session and respond with a session ID\nwhich is used for sending further commands.\n\n\nDesired Capabilities\n\nDesired capabilities are a set of keys and values (i.e.,\na map or hash) sent to the Appium server to tell the server what kind of\nautomation session we're interested in starting up. There are also various\ncapabilities which can modify the behavior of the server during automation.\nFor example, we might set the \nplatformName\n capability to \niOS\n to tell\nAppium that we want an iOS session, rather than an Android or Windows one. Or we might\nset the \nsafariAllowPopups\n capability to \ntrue\n in order to ensure that,\nduring a Safari automation session, we're allowed to use JavaScript to open\nup new windows. See the \ncapabilities doc\n for the complete list of capabilities available for Appium.\n\n\nAppium Server\n\nAppium is a server written in Node.js. It can be built and installed \nfrom source\n or installed directly from NPM:\n\n\n$ npm install -g appium\n$ appium\n\n\n\n\nAppium Clients\n\nThere are client libraries (in Java, Ruby, Python, PHP, JavaScript, and C#)\nwhich support Appium's extensions to the WebDriver protocol. When using Appium,\nyou want to use these client libraries instead of your regular WebDriver\nclient. You can view the full list of libraries \nhere\n.\n\n\nAppium.app\n, \nAppium.exe\n\nThere exist GUI wrappers around the Appium server that can be downloaded.\nThese come bundled with everything required to run the Appium server,\nso you don't need to worry about Node. They also come with an Inspector,\nwhich enables you to check out the hierarchy of your app. This can come in handy when writing tests.\n\n\nGetting Started\n\n\nCongratulations! You are now armed with enough knowledge to begin using Appium. Why not head to the \ngetting started doc\n for more detailed requirements and instructions?", 
            "title": "Intro"
        }, 
        {
            "location": "/about-appium/intro/#introduction-to-appium", 
            "text": "Appium is an open-source tool for automating native, mobile web, and hybrid applications on iOS mobile, Android mobile, and Windows desktop platforms.   Native apps  are those written using the iOS, Android, or Windows SDKs.   Mobile web apps  are web apps accessed using a mobile browser (Appium supports Safari on iOS and Chrome or the built-in 'Browser' app on Android).   Hybrid apps  have a wrapper around a \"webview\" -- a native control that enables interaction with web content. Projects like  Phonegap , make it easy to build apps using web technologies that are then bundled into a native wrapper, creating a hybrid app.  Importantly, Appium is \"cross-platform\": it allows you to write tests against\nmultiple platforms (iOS, Android, Windows), using the same API. This enables code reuse between iOS, Android, and Windows testsuites.  For specific information about what it means for Appium to \"support\" its\nplatforms, and automation modalities, please see the  platform support doc .", 
            "title": "Introduction to Appium"
        }, 
        {
            "location": "/about-appium/intro/#appium-philosophy", 
            "text": "Appium was designed to meet mobile automation needs according to a philosophy outlined by the following four tenets:   You shouldn't have to recompile your app or modify it in any way in order to automate it.  You shouldn't be locked into a specific language or framework to write and run your tests.  A mobile automation framework shouldn't reinvent the wheel when it comes to automation APIs.  A mobile automation framework should be open source, in spirit and practice as well as in name!", 
            "title": "Appium Philosophy"
        }, 
        {
            "location": "/about-appium/intro/#appium-design", 
            "text": "So how does the structure of the Appium project live out this philosophy? We\nmeet requirement #1 by using vendor-provided automation frameworks under the\nhood. That way, we don't need to compile in any Appium-specific or\nthird-party code or frameworks to your app. This means  you're testing the same app you're shipping . The vendor-provided frameworks we use are:   iOS 9.3 and above: Apple's  XCUITest  iOS 9.3 and lower: Apple's  UIAutomation  Android 4.2+: Google's  UiAutomator  Android 2.3+: Google's  Instrumentation . (Instrumentation support is provided by bundling a separate project,  Selendroid )  Windows: Microsoft's  WinAppDriver   We meet requirement #2 by wrapping the vendor-provided frameworks in one API,\nthe  WebDriver  API.\nWebDriver (aka \"Selenium WebDriver\") specifies a client-server protocol\n(known as the  JSON Wire Protocol ).\nGiven this client-server architecture, a client written in any language can\nbe used to send the appropriate HTTP requests to the server. There are\nalready  clients written in every popular programming language . This also\nmeans that you're free to use whatever test runner and test framework you\nwant; the client libraries are simply HTTP clients and can be mixed into your\ncode any way you please. In other words, Appium   WebDriver clients are not\ntechnically \"test frameworks\" -- they are \"automation libraries\". You can\nmanage your test environment any way you like!  We meet requirement #3 in the same way: WebDriver has become the de facto\nstandard for automating web browsers, and is a  W3C Working Draft .\nWhy do something totally different for mobile? Instead we have  extended the protocol \nwith extra API methods useful for mobile automation.  It should be obvious that requirement #4 is a given -- you're reading this\nbecause  Appium is open source .", 
            "title": "Appium Design"
        }, 
        {
            "location": "/about-appium/intro/#appium-concepts", 
            "text": "Client/Server Architecture \nAppium is at its heart a webserver that exposes a REST API. It receives\nconnections from a client, listens for commands, executes those commands on a\nmobile device, and responds with an HTTP response representing the result of\nthe command execution. The fact that we have a client/server architecture\nopens up a lot of possibilities: we can write our test code in any language\nthat has a http client API, but it is easier to use one of the  Appium client\nlibraries . We can put the server on a different machine than our\ntests are running on. We can write test code and rely on a cloud service\nlike  Sauce Labs  to receive and interpret the commands.  Session \nAutomation is always performed in the context of a session. Clients initiate\na session with a server in ways specific to each library,\nbut they all end up sending a  POST /session  request to the server,\nwith a JSON object called  the 'desired capabilities' object. At this point\nthe server will start up the automation session and respond with a session ID\nwhich is used for sending further commands.  Desired Capabilities \nDesired capabilities are a set of keys and values (i.e.,\na map or hash) sent to the Appium server to tell the server what kind of\nautomation session we're interested in starting up. There are also various\ncapabilities which can modify the behavior of the server during automation.\nFor example, we might set the  platformName  capability to  iOS  to tell\nAppium that we want an iOS session, rather than an Android or Windows one. Or we might\nset the  safariAllowPopups  capability to  true  in order to ensure that,\nduring a Safari automation session, we're allowed to use JavaScript to open\nup new windows. See the  capabilities doc  for the complete list of capabilities available for Appium.  Appium Server \nAppium is a server written in Node.js. It can be built and installed  from source  or installed directly from NPM:  $ npm install -g appium\n$ appium  Appium Clients \nThere are client libraries (in Java, Ruby, Python, PHP, JavaScript, and C#)\nwhich support Appium's extensions to the WebDriver protocol. When using Appium,\nyou want to use these client libraries instead of your regular WebDriver\nclient. You can view the full list of libraries  here .  Appium.app ,  Appium.exe \nThere exist GUI wrappers around the Appium server that can be downloaded.\nThese come bundled with everything required to run the Appium server,\nso you don't need to worry about Node. They also come with an Inspector,\nwhich enables you to check out the hierarchy of your app. This can come in handy when writing tests.", 
            "title": "Appium Concepts"
        }, 
        {
            "location": "/about-appium/intro/#getting-started", 
            "text": "Congratulations! You are now armed with enough knowledge to begin using Appium. Why not head to the  getting started doc  for more detailed requirements and instructions?", 
            "title": "Getting Started"
        }, 
        {
            "location": "/advanced/chromedriver/", 
            "text": "Chromedriver\n\n\nAppium supports automating Android web pages (in Chrome and the built-in Browser) and\nhybrid apps that are Chrome-backed, by managing a \nChromedriver\n\ninstance and proxying commands to it when necessary. It comes bundled with the\n\nlatest version of Chromedriver\n, installed through the\nnpm package \nappium-chromedriver\n\n(Github: \nappium-chromedriver\n).\n\n\nUnfortunately, with each update to Chromedriver there is an increase in the minimum\nsupported version of Chrome, such that older devices are often unable to be automated\nwith the bundled version. In the Appium server logs there will be an error like:\n\n\nAn unknown server-side error occurred while processing the command.\nOriginal error: unknown error: Chrome version must be \n= 55.0.2883.0\n\n\n\n\nTo get around this, Appium can be configured to use a particular Chromedriver version,\neither at install time, by either passing the \n--chromedriver_version\n config\nproperty (e.g., \nnpm install appium --chromedriver_version=\"2.16\"\n) or specifying\nthe version in the \nCHROMEDRIVER_VERSION\n environment variable (i.e., \nCHROMEDRIVER_VERSION=2.20 npm install appium\n;\nthis can also be set to \nLATEST\n to get the most recent version),\nor at runtime, by specifying the \n--chromedriver-executable\n server flag, along\nwith the full path to the Chromedriver executable which was manually downloaded\n(e.g., \nappium --chromedriver-executable /path/to/my/chromedriver\n).\n\n\nThe following is a list of Chromedriver versions and their corresponding minimum\nChrome version that is automatable:\n\n\n| Version | Minimum Chrome Version | Link to Chromedriver                                                      |\n|=========|========================|===========================================================================|\n| 2.29    | 57.0.2987.0            | \nlink\n |\n| 2.28    | 55.0.2883.0            | \nlink\n |\n| 2.27    | 54.0.2840.0            | \nlink\n |\n| 2.26    | 53.0.2785.0            | \nlink\n |\n| 2.25    | 53.0.2785.0            | \nlink\n |\n| 2.24    | 52.0.2743.0            | \nlink\n |\n| 2.23    | 51.0.2704.0            | \nlink\n |\n| 2.22    | 49.0.2623.0            | \nlink\n |\n| 2.21    | 46.0.2490.0            | \nlink\n |\n| 2.20    | 43.0.2357.0            | \nlink\n |\n| 2.19    | 43.0.2357.0            | \nlink\n |\n| 2.18    | 43.0.2357.0            | \nlink\n |\n| 2.17    | 42.0.2311.0            | \nlink\n |\n| 2.16    | 42.0.2311.0            | \nlink\n |\n| 2.15    | 40.0.2214.0            | \nlink\n |\n| 2.14    | 39.0.2171.0            | \nlink\n |\n| 2.13    | 38.0.2125.0            | \nlink\n |\n| 2.12    | 36.0.1985.0            | \nlink\n |\n| 2.11    | 36.0.1985.0            | \nlink\n |\n| 2.10    | 33.0.1751.0            | \nlink\n |\n| 2.9     | 31.0.1650.59           | \nlink\n  |\n| 2.8     | 30.0.1573.2            | \nlink\n  |\n| 2.7     | 30.0.1573.2            | \nlink\n  |\n| 2.6     |                        | \nlink\n  |\n| 2.5     |                        | \nlink\n  |\n| 2.4     | 29.0.1545.0            | \nlink\n  |\n| 2.3     | 28.0.1500.0            | \nlink\n  |\n| 2.2     | 27.0.1453.0            | \nlink\n  |\n| 2.1     | 27.0.1453.0            | \nlink\n  |\n| 2.0     | 27.0.1453.0            | \nlink\n  |\n\n\nThe complete list of available Chromedriver releases is \nhere\n. To find\nthe minimum supported version for any particular version, get the \nChromium\n\n\nsource code\n,\ncheck out the release commit, and check the variable \nkMinimumSupportedChromeVersion\n\nin the file \nsrc/chrome/test/chromedriver/chrome/version.cc\n.\n\n\nInstalling an network issues\n\n\nWhen Appium is installed it needs to download Chromedriver, so there is the possibility\nthat there could be network problems that make the install fail.\n\n\nBy default Chromedriver is retrieved from \nhttps://chromedriver.storage.googleapis.com/\n.\nTo use a mirror of the ChromeDriver binaries use npm config property \nchromedriver_cdnurl\n.\n\n\nnpm install appium-chromedriver --chromedriver_cdnurl=http://npm.taobao.org/mirrors/chromedriver\n\n\n\n\nOr add the property into your \n.npmrc\n file.\n\n\nchromedriver_cdnurl=http://npm.taobao.org/mirrors/chromedriver\n\n\n\n\nAnother option is to use PATH variable \nCHROMEDRIVER_CDNURL\n.\n\n\nCHROMEDRIVER_CDNURL=http://npm.taobao.org/mirrors/chromedriver npm install appium-chromedriver\n\n\n\n\nIt may also be necessary to adjust network proxy and firewall settings to allow\nthe download to occur.", 
            "title": "Chromedriver"
        }, 
        {
            "location": "/advanced/chromedriver/#chromedriver", 
            "text": "Appium supports automating Android web pages (in Chrome and the built-in Browser) and\nhybrid apps that are Chrome-backed, by managing a  Chromedriver \ninstance and proxying commands to it when necessary. It comes bundled with the latest version of Chromedriver , installed through the\nnpm package  appium-chromedriver \n(Github:  appium-chromedriver ).  Unfortunately, with each update to Chromedriver there is an increase in the minimum\nsupported version of Chrome, such that older devices are often unable to be automated\nwith the bundled version. In the Appium server logs there will be an error like:  An unknown server-side error occurred while processing the command.\nOriginal error: unknown error: Chrome version must be  = 55.0.2883.0  To get around this, Appium can be configured to use a particular Chromedriver version,\neither at install time, by either passing the  --chromedriver_version  config\nproperty (e.g.,  npm install appium --chromedriver_version=\"2.16\" ) or specifying\nthe version in the  CHROMEDRIVER_VERSION  environment variable (i.e.,  CHROMEDRIVER_VERSION=2.20 npm install appium ;\nthis can also be set to  LATEST  to get the most recent version),\nor at runtime, by specifying the  --chromedriver-executable  server flag, along\nwith the full path to the Chromedriver executable which was manually downloaded\n(e.g.,  appium --chromedriver-executable /path/to/my/chromedriver ).  The following is a list of Chromedriver versions and their corresponding minimum\nChrome version that is automatable:  | Version | Minimum Chrome Version | Link to Chromedriver                                                      |\n|=========|========================|===========================================================================|\n| 2.29    | 57.0.2987.0            |  link  |\n| 2.28    | 55.0.2883.0            |  link  |\n| 2.27    | 54.0.2840.0            |  link  |\n| 2.26    | 53.0.2785.0            |  link  |\n| 2.25    | 53.0.2785.0            |  link  |\n| 2.24    | 52.0.2743.0            |  link  |\n| 2.23    | 51.0.2704.0            |  link  |\n| 2.22    | 49.0.2623.0            |  link  |\n| 2.21    | 46.0.2490.0            |  link  |\n| 2.20    | 43.0.2357.0            |  link  |\n| 2.19    | 43.0.2357.0            |  link  |\n| 2.18    | 43.0.2357.0            |  link  |\n| 2.17    | 42.0.2311.0            |  link  |\n| 2.16    | 42.0.2311.0            |  link  |\n| 2.15    | 40.0.2214.0            |  link  |\n| 2.14    | 39.0.2171.0            |  link  |\n| 2.13    | 38.0.2125.0            |  link  |\n| 2.12    | 36.0.1985.0            |  link  |\n| 2.11    | 36.0.1985.0            |  link  |\n| 2.10    | 33.0.1751.0            |  link  |\n| 2.9     | 31.0.1650.59           |  link   |\n| 2.8     | 30.0.1573.2            |  link   |\n| 2.7     | 30.0.1573.2            |  link   |\n| 2.6     |                        |  link   |\n| 2.5     |                        |  link   |\n| 2.4     | 29.0.1545.0            |  link   |\n| 2.3     | 28.0.1500.0            |  link   |\n| 2.2     | 27.0.1453.0            |  link   |\n| 2.1     | 27.0.1453.0            |  link   |\n| 2.0     | 27.0.1453.0            |  link   |  The complete list of available Chromedriver releases is  here . To find\nthe minimum supported version for any particular version, get the  Chromium  source code ,\ncheck out the release commit, and check the variable  kMinimumSupportedChromeVersion \nin the file  src/chrome/test/chromedriver/chrome/version.cc .", 
            "title": "Chromedriver"
        }, 
        {
            "location": "/advanced/chromedriver/#installing-an-network-issues", 
            "text": "When Appium is installed it needs to download Chromedriver, so there is the possibility\nthat there could be network problems that make the install fail.  By default Chromedriver is retrieved from  https://chromedriver.storage.googleapis.com/ .\nTo use a mirror of the ChromeDriver binaries use npm config property  chromedriver_cdnurl .  npm install appium-chromedriver --chromedriver_cdnurl=http://npm.taobao.org/mirrors/chromedriver  Or add the property into your  .npmrc  file.  chromedriver_cdnurl=http://npm.taobao.org/mirrors/chromedriver  Another option is to use PATH variable  CHROMEDRIVER_CDNURL .  CHROMEDRIVER_CDNURL=http://npm.taobao.org/mirrors/chromedriver npm install appium-chromedriver  It may also be necessary to adjust network proxy and firewall settings to allow\nthe download to occur.", 
            "title": "Installing an network issues"
        }, 
        {
            "location": "/advanced/cross-domain-iframes/", 
            "text": "Cross-domain iFrame Automation\n\n\nSame-origin policy\n prevents Appium from automating iFrames that have a different domain to the parent.\n\n\nSubdomain workaround\n\n\nIf the parent and the iFrame share the same domain (e.g. \nsite.com\n and \nshop.site.com\n), you can\nset \ndocument.domain\n on both the parent and each iFrame to a common domain. This solves the same-origin policy issue and allows automation. For example:\n\n\nParent:\n\n\nhtml\n\n  \nhead\n\n    \nscript\n\n      document.domain = 'site.com';\n    \n/script\n\n  \n/head\n\n  \nbody\n\n    \niframe src=\nhttp://shop.site.com\n width=\n200\n height=\n200\n/iframe\n\n  \n/body\n\n\n/html\n\n\n\n\n\nChild iFrame:\n\n\nhtml\n\n  \nhead\n\n    \nscript\n\n      document.domain = 'site.com';\n    \n/script\n\n  \n/head\n\n  \nbody\n\n    \np\nThis is an iFrame!\n/p\n\n  \n/body\n\n\n/html", 
            "title": "Cross domain iframes"
        }, 
        {
            "location": "/advanced/cross-domain-iframes/#cross-domain-iframe-automation", 
            "text": "Same-origin policy  prevents Appium from automating iFrames that have a different domain to the parent.", 
            "title": "Cross-domain iFrame Automation"
        }, 
        {
            "location": "/advanced/cross-domain-iframes/#subdomain-workaround", 
            "text": "If the parent and the iFrame share the same domain (e.g.  site.com  and  shop.site.com ), you can\nset  document.domain  on both the parent and each iFrame to a common domain. This solves the same-origin policy issue and allows automation. For example:  Parent:  html \n   head \n     script \n      document.domain = 'site.com';\n     /script \n   /head \n   body \n     iframe src= http://shop.site.com  width= 200  height= 200 /iframe \n   /body  /html   Child iFrame:  html \n   head \n     script \n      document.domain = 'site.com';\n     /script \n   /head \n   body \n     p This is an iFrame! /p \n   /body  /html", 
            "title": "Subdomain workaround"
        }, 
        {
            "location": "/advanced/event-timings/", 
            "text": "Appium Event Timing\n\n\nAppium comes with the ability to retrieve timing information about startup\ninformation and command length. This is an advanced feature that is controlled\nby the use of the \neventTimings\n capability (set it to \ntrue\n to log event\ntimings).\n\n\nWith this capability turned on, the \nGET /session/:id\n response (i.e., the\nresponse to \ndriver.getSessionDetails()\n or similar, depending on client) will\nbe decorated with an \nevents\n property. This is the structure of that \nevents\n\nproperty:\n\n\n{\n    \nevent_type\n: [\noccurence_timestamp_1\n, ...],\n    \ncommands\n: [\n        {\n            \ncmd\n: \ncommand_name\n,\n            \nstartTime\n: \njs_timestamp\n,\n            \nendTime\n: \njs_timestamp\n\n        },\n        ...\n    ]\n}\n\n\n\n\nIn other words, the \nevents\n property has 2 kinds of properties of its own:\n\n\n\n\nProperties which are the names of event types\n\n\nThe \ncommands\n property\n\n\n\n\nProperties which are names of event types correspond to an array of timestamps\nwhen that event happened. It's an array because events might happen multiple\ntimes in the course of a session. Examples of event types include:\n\n\n\n\nnewSessionRequested\n\n\nnewSessionStarted\n\n\n\n\n(Individual drivers will define their own event types, so we do not have an\nexhaustive list to share here. It's best to actually get one of these responses\nfrom a real session to inspect the possible event types.)\n\n\nThe \ncommands\n property is an array of objects. Each object has the name of the\nAppium-internal command (for example \nclick\n), as well as the time the command\nstarted processing and the time it finished processing.\n\n\nWith this data, you can calculate the time between events, or a strict timeline\nof events, or statistical information about average length of a certain type of\ncommand, and so on.\n\n\nYou can only receive data about events that have happened when you make the\ncall to \n/session/:id\n, so the best time to get data about an entire session is\nright before quitting it.\n\n\nThe Appium team maintains an event timings parser tool that can be used to\ngenerate various kinds of reports from event timings output:\n\nappium/appium-event-parser\n.", 
            "title": "Event timings"
        }, 
        {
            "location": "/advanced/event-timings/#appium-event-timing", 
            "text": "Appium comes with the ability to retrieve timing information about startup\ninformation and command length. This is an advanced feature that is controlled\nby the use of the  eventTimings  capability (set it to  true  to log event\ntimings).  With this capability turned on, the  GET /session/:id  response (i.e., the\nresponse to  driver.getSessionDetails()  or similar, depending on client) will\nbe decorated with an  events  property. This is the structure of that  events \nproperty:  {\n     event_type : [ occurence_timestamp_1 , ...],\n     commands : [\n        {\n             cmd :  command_name ,\n             startTime :  js_timestamp ,\n             endTime :  js_timestamp \n        },\n        ...\n    ]\n}  In other words, the  events  property has 2 kinds of properties of its own:   Properties which are the names of event types  The  commands  property   Properties which are names of event types correspond to an array of timestamps\nwhen that event happened. It's an array because events might happen multiple\ntimes in the course of a session. Examples of event types include:   newSessionRequested  newSessionStarted   (Individual drivers will define their own event types, so we do not have an\nexhaustive list to share here. It's best to actually get one of these responses\nfrom a real session to inspect the possible event types.)  The  commands  property is an array of objects. Each object has the name of the\nAppium-internal command (for example  click ), as well as the time the command\nstarted processing and the time it finished processing.  With this data, you can calculate the time between events, or a strict timeline\nof events, or statistical information about average length of a certain type of\ncommand, and so on.  You can only receive data about events that have happened when you make the\ncall to  /session/:id , so the best time to get data about an entire session is\nright before quitting it.  The Appium team maintains an event timings parser tool that can be used to\ngenerate various kinds of reports from event timings output: appium/appium-event-parser .", 
            "title": "Appium Event Timing"
        }, 
        {
            "location": "/advanced/grid/", 
            "text": "Selenium Grid\n\n\nYou are able to register your appium server with a local \nSelenium grid\n (\nsetup docs\n) by using the\n\n--nodeconfig\n server parameter.\n\n\n appium --nodeconfig /path/to/nodeconfig.json\n# or, if running from source:\n\n node . --nodeconfig /path/to/nodeconfig.json\n\n\n\n\nIn the node config file you have to define the \nbrowserName\n,\n\nversion\n and \nplatform\n and based on these parameters the grid\nwill re-direct your test to the right device. You will also need to\nconfigure your \nhost\n details and the \nselenium grid\n details. For\na full list of all parameters and descriptions look\n\nhere\n\n\nOnce you start the appium server and it registers with the grid,\nyou will see your device on the grid console page:\n\n\n\"http://\n\\\ngrid-ip-adress>\n:\n\\\ngrid-port>\n/grid/console\"\n\n\nGrid Node Configuration Example json file\n\n\n{\n  \ncapabilities\n:\n      [\n        {\n          \nbrowserName\n: \ne.g._iPhone5_or_iPad4\n,\n          \nversion\n:\nversion_of_iOS_e.g._7.1\n,\n          \nmaxInstances\n: 1,\n          \nplatform\n:\nplatform_e.g._MAC_or_ANDROID\n\n        }\n      ],\n  \nconfiguration\n:\n  {\n    \ncleanUpCycle\n:2000,\n    \ntimeout\n:30000,\n    \nproxy\n: \norg.openqa.grid.selenium.proxy.DefaultRemoteProxy\n,\n    \nurl\n:\nhttp://\nhost_name_appium_server_or_ip-address_appium_server\n:\nappium_port\n/wd/hub\n,\n    \nhost\n: \nhost_name_appium_server_or_ip-address_appium_server\n,\n    \nport\n: \nappium_port\n,\n    \nmaxSession\n: 1,\n    \nregister\n: true,\n    \nregisterCycle\n: 5000,\n    \nhubPort\n: \ngrid_port\n,\n    \nhubHost\n: \nGrid_host_name_or_grid_ip-address\n\n  }\n}\n\n\n\n\nValid platforms are listed \nhere\n\n\nIf \nurl\n, \nhost\n, and \nport\n are not given, the config will be auto updated\nto point to localhost:whatever-port-Appium-started-on.\n\n\nIf your Appium server is running on a different machine to your Selenium Grid server, make sure you use an external name/IP address in your \nhost\n \n \nurl\n docs; \nlocalhost\n and \n127.0.0.1\n will prevent Selenium Grid from connecting correctly.", 
            "title": "Grid"
        }, 
        {
            "location": "/advanced/grid/#selenium-grid", 
            "text": "You are able to register your appium server with a local  Selenium grid  ( setup docs ) by using the --nodeconfig  server parameter.   appium --nodeconfig /path/to/nodeconfig.json\n# or, if running from source:  node . --nodeconfig /path/to/nodeconfig.json  In the node config file you have to define the  browserName , version  and  platform  and based on these parameters the grid\nwill re-direct your test to the right device. You will also need to\nconfigure your  host  details and the  selenium grid  details. For\na full list of all parameters and descriptions look here  Once you start the appium server and it registers with the grid,\nyou will see your device on the grid console page:  \"http:// \\ grid-ip-adress> : \\ grid-port> /grid/console\"", 
            "title": "Selenium Grid"
        }, 
        {
            "location": "/advanced/grid/#grid-node-configuration-example-json-file", 
            "text": "{\n   capabilities :\n      [\n        {\n           browserName :  e.g._iPhone5_or_iPad4 ,\n           version : version_of_iOS_e.g._7.1 ,\n           maxInstances : 1,\n           platform : platform_e.g._MAC_or_ANDROID \n        }\n      ],\n   configuration :\n  {\n     cleanUpCycle :2000,\n     timeout :30000,\n     proxy :  org.openqa.grid.selenium.proxy.DefaultRemoteProxy ,\n     url : http:// host_name_appium_server_or_ip-address_appium_server : appium_port /wd/hub ,\n     host :  host_name_appium_server_or_ip-address_appium_server ,\n     port :  appium_port ,\n     maxSession : 1,\n     register : true,\n     registerCycle : 5000,\n     hubPort :  grid_port ,\n     hubHost :  Grid_host_name_or_grid_ip-address \n  }\n}  Valid platforms are listed  here  If  url ,  host , and  port  are not given, the config will be auto updated\nto point to localhost:whatever-port-Appium-started-on.  If your Appium server is running on a different machine to your Selenium Grid server, make sure you use an external name/IP address in your  host     url  docs;  localhost  and  127.0.0.1  will prevent Selenium Grid from connecting correctly.", 
            "title": "Grid Node Configuration Example json file"
        }, 
        {
            "location": "/advanced/hybrid/", 
            "text": "Automating hybrid apps\n\n\nOne of the core principles of Appium is that you shouldn't have to change\nyour app to test it. In line with that methodology, it is possible to test\nhybrid web apps (e.g., the \nUIAWebView\n\nelements in an iOS app) the same way\nyou can with Selenium for web apps. There is a bit of technical complexity\nrequired so that Appium knows whether you want to automate the native aspects\nof the app or the web views, but thankfully, we can stay within the\nWebDriver protocol for everything.\n\n\nHere are the steps required to talk to a web view in your Appium test:\n\n\n\n\nNavigate to a portion of your app where a web view is active\n\n\nCall \nGET session/:sessionId/contexts\n\n\nThis returns a list of contexts we can access, like 'NATIVE_APP' or 'WEBVIEW_1'\n\n\nCall \nPOST session/:sessionId/context\n\n    with the id of the context you want to access\n\n\n(This puts your Appium session into a mode where all commands are\n    interpreted as being intended for automating the web view,\n    rather than the native portion of the app. For example,\n    if you run getElementByTagName, it will operate on the DOM of the web\n    view, rather than return UIAElements. Of course,\n    certain WebDriver methods only make sense in one context or another,\n    so in the wrong context you will receive an error message).\n\n\nTo stop automating in the web view context and go back to automating the\n    native portion of the app, simply call \ncontext\n again with the native\n    context id to leave the web frame.\n\n\n\n\n// javascript\n// assuming we have an initialized `driver` object for an app\ndriver\n    .contexts().then(function (contexts) { // get list of available views. Returns array: [\nNATIVE_APP\n,\nWEBVIEW_1\n]\n        return driver.context(contexts[1]); // choose the webview context\n    })\n\n    // do some web testing\n    .elementsByCss('.green_button').click()\n\n    .context('NATIVE_APP') // leave webview context\n\n    // do more native stuff here if we want\n\n    .quit() // stop webdrivage\n\n\n\n\n// java\n// assuming we have a set of capabilities\ndriver = new AppiumDriver(new URL(\nhttp://127.0.0.1:4723/wd/hub\n), capabilities);\n\nSet\nString\n contextNames = driver.getContextHandles();\nfor (String contextName : contextNames) {\n    System.out.println(contextNames); //prints out something like NATIVE_APP \\n WEBVIEW_1\n}\ndriver.context(contextNames.toArray()[1]); // set context to WEBVIEW_1\n\n//do some web testing\nString myText = driver.findElement(By.cssSelector(\n.green_button\n)).click();\n\ndriver.context(\nNATIVE_APP\n);\n\n// do more native testing if we want\n\ndriver.quit();\n\n\n\n\n# ruby\n# assuming we have a set of capabilities\n@driver = Selenium::WebDriver.for(:remote, :desired_capabilities =\n capabilities, :url =\n SERVER_URL)\n\n# I switch to the last context because its always the webview in our case, in other cases you may need to specify a context\n# View the appium logs while running @driver.contexts to figure out which context is the one you want and find the associated ID\n# Then switch to it using @driver.switch_to.context(\nWEBVIEW_6\n)\n\nGiven(/^I switch to webview$/) do\n    webview = @driver.contexts.last\n    @driver.switch_to.context(webview)\nend\n\nGiven(/^I switch out of webview$/) do\n    @driver.switch_to.context(@driver.contexts.first)\nend\n\n# Now you can use CSS to select an element inside your webview\n\nAnd(/^I click a webview button $/) do\n    @driver.find_element(:css, \n.green_button\n).click\nend\n\n\n\n\n# python\n# assuming we have an initialized `driver` object for an app\n\n# switch to webview\nwebview = driver.contexts.last\ndriver.switch_to.context(webview)\n\n# do some webby stuff\ndriver.find_element(:css, \n.green_button\n).click\n\n# switch back to native view\ndriver.switch_to.context(driver.contexts.first)\n\n# do more native testing if we want\n\ndriver.quit()\n\n\n\n\n// php\n// assuming we have an initialized `driver` object in an AppiumTestCase\n\npublic function testThings()\n{\n        $expected_contexts = array(\n                0 =\n 'NATIVE_APP',\n                1 =\n 'WEBVIEW_1'\n        );\n\n        $contexts = $this-\ncontexts();\n        $this-\nassertEquals($expected_contexts, $contexts);\n\n        $this-\ncontext($contexts[1]);\n        $context = $this-\ncontext();\n        $this-\nassertEquals('WEBVIEW_1', $context);\n\n        // do webby stuff\n\n        $this-\ncontext('NATIVE_APP');\n\n        // do mobile stuff\n}\n\n\n\n\nAutomating hybrid Android apps\n\n\nAppium comes with \nbuilt-in hybrid support via Chromedriver\n. Appium also uses\nSelendroid under the hood for webview support on devices older than 4.4. (In\nthat case, you'll want to specify \n\"automationName\": \"selendroid\"\n as a desired\ncapability).\n\n\nMake sure\n\nsetWebContentsDebuggingEnabled\n is set to true as described in the \nremote debugging docs\n.\n\n\nOnce you've set your desired capabilities and started an appium session, follow the generalized instructions above.\n\n\nAutomating hybrid iOS apps\n\n\nTo interact with a web view appium establishes a connection\nusing a remote debugger. When executing against a\nsimulator this connection is established directly as the simulator and\nthe appium server are on the same machine.\n\n\nOnce you've set your desired capabilities and started an appium session, follow the generalized instructions above.\n\n\nExecution against a real iOS device\n\n\nWhen executing against a real iOS device appium is unable to access the web view directly. Therefore the\nconnection has to be established through the USB lead. To establish this\nconnection we use the \nios-webkit-debugger-proxy\n.\n\n\nFor instruction on how to install and run ios-webkit-debugger-proxy see \niOS webkit debug proxy\n documentation.\n\n\nNow you can start an appium test session and follow the generalized instructions above.", 
            "title": "Hybrid"
        }, 
        {
            "location": "/advanced/hybrid/#automating-hybrid-apps", 
            "text": "One of the core principles of Appium is that you shouldn't have to change\nyour app to test it. In line with that methodology, it is possible to test\nhybrid web apps (e.g., the  UIAWebView \nelements in an iOS app) the same way\nyou can with Selenium for web apps. There is a bit of technical complexity\nrequired so that Appium knows whether you want to automate the native aspects\nof the app or the web views, but thankfully, we can stay within the\nWebDriver protocol for everything.  Here are the steps required to talk to a web view in your Appium test:   Navigate to a portion of your app where a web view is active  Call  GET session/:sessionId/contexts  This returns a list of contexts we can access, like 'NATIVE_APP' or 'WEBVIEW_1'  Call  POST session/:sessionId/context \n    with the id of the context you want to access  (This puts your Appium session into a mode where all commands are\n    interpreted as being intended for automating the web view,\n    rather than the native portion of the app. For example,\n    if you run getElementByTagName, it will operate on the DOM of the web\n    view, rather than return UIAElements. Of course,\n    certain WebDriver methods only make sense in one context or another,\n    so in the wrong context you will receive an error message).  To stop automating in the web view context and go back to automating the\n    native portion of the app, simply call  context  again with the native\n    context id to leave the web frame.   // javascript\n// assuming we have an initialized `driver` object for an app\ndriver\n    .contexts().then(function (contexts) { // get list of available views. Returns array: [ NATIVE_APP , WEBVIEW_1 ]\n        return driver.context(contexts[1]); // choose the webview context\n    })\n\n    // do some web testing\n    .elementsByCss('.green_button').click()\n\n    .context('NATIVE_APP') // leave webview context\n\n    // do more native stuff here if we want\n\n    .quit() // stop webdrivage  // java\n// assuming we have a set of capabilities\ndriver = new AppiumDriver(new URL( http://127.0.0.1:4723/wd/hub ), capabilities);\n\nSet String  contextNames = driver.getContextHandles();\nfor (String contextName : contextNames) {\n    System.out.println(contextNames); //prints out something like NATIVE_APP \\n WEBVIEW_1\n}\ndriver.context(contextNames.toArray()[1]); // set context to WEBVIEW_1\n\n//do some web testing\nString myText = driver.findElement(By.cssSelector( .green_button )).click();\n\ndriver.context( NATIVE_APP );\n\n// do more native testing if we want\n\ndriver.quit();  # ruby\n# assuming we have a set of capabilities\n@driver = Selenium::WebDriver.for(:remote, :desired_capabilities =  capabilities, :url =  SERVER_URL)\n\n# I switch to the last context because its always the webview in our case, in other cases you may need to specify a context\n# View the appium logs while running @driver.contexts to figure out which context is the one you want and find the associated ID\n# Then switch to it using @driver.switch_to.context( WEBVIEW_6 )\n\nGiven(/^I switch to webview$/) do\n    webview = @driver.contexts.last\n    @driver.switch_to.context(webview)\nend\n\nGiven(/^I switch out of webview$/) do\n    @driver.switch_to.context(@driver.contexts.first)\nend\n\n# Now you can use CSS to select an element inside your webview\n\nAnd(/^I click a webview button $/) do\n    @driver.find_element(:css,  .green_button ).click\nend  # python\n# assuming we have an initialized `driver` object for an app\n\n# switch to webview\nwebview = driver.contexts.last\ndriver.switch_to.context(webview)\n\n# do some webby stuff\ndriver.find_element(:css,  .green_button ).click\n\n# switch back to native view\ndriver.switch_to.context(driver.contexts.first)\n\n# do more native testing if we want\n\ndriver.quit()  // php\n// assuming we have an initialized `driver` object in an AppiumTestCase\n\npublic function testThings()\n{\n        $expected_contexts = array(\n                0 =  'NATIVE_APP',\n                1 =  'WEBVIEW_1'\n        );\n\n        $contexts = $this- contexts();\n        $this- assertEquals($expected_contexts, $contexts);\n\n        $this- context($contexts[1]);\n        $context = $this- context();\n        $this- assertEquals('WEBVIEW_1', $context);\n\n        // do webby stuff\n\n        $this- context('NATIVE_APP');\n\n        // do mobile stuff\n}", 
            "title": "Automating hybrid apps"
        }, 
        {
            "location": "/advanced/hybrid/#automating-hybrid-android-apps", 
            "text": "Appium comes with  built-in hybrid support via Chromedriver . Appium also uses\nSelendroid under the hood for webview support on devices older than 4.4. (In\nthat case, you'll want to specify  \"automationName\": \"selendroid\"  as a desired\ncapability).  Make sure setWebContentsDebuggingEnabled  is set to true as described in the  remote debugging docs .  Once you've set your desired capabilities and started an appium session, follow the generalized instructions above.", 
            "title": "Automating hybrid Android apps"
        }, 
        {
            "location": "/advanced/hybrid/#automating-hybrid-ios-apps", 
            "text": "To interact with a web view appium establishes a connection\nusing a remote debugger. When executing against a\nsimulator this connection is established directly as the simulator and\nthe appium server are on the same machine.  Once you've set your desired capabilities and started an appium session, follow the generalized instructions above.", 
            "title": "Automating hybrid iOS apps"
        }, 
        {
            "location": "/advanced/hybrid/#execution-against-a-real-ios-device", 
            "text": "When executing against a real iOS device appium is unable to access the web view directly. Therefore the\nconnection has to be established through the USB lead. To establish this\nconnection we use the  ios-webkit-debugger-proxy .  For instruction on how to install and run ios-webkit-debugger-proxy see  iOS webkit debug proxy  documentation.  Now you can start an appium test session and follow the generalized instructions above.", 
            "title": "Execution against a real iOS device"
        }, 
        {
            "location": "/advanced/ios-touch-id/", 
            "text": "Touch ID\n\n\n(see https://github.com/appium/appium-xcuitest-driver/blob/master/docs/touch-id.md)", 
            "title": "Ios touch id"
        }, 
        {
            "location": "/advanced/ios-touch-id/#touch-id", 
            "text": "(see https://github.com/appium/appium-xcuitest-driver/blob/master/docs/touch-id.md)", 
            "title": "Touch ID"
        }, 
        {
            "location": "/advanced/ios-webkit-debug-proxy/", 
            "text": "iOS WebKit Debug Proxy\n\n\nFor accessing web views on real iOS device appium uses \nios_webkit_debug_proxy\n.\n\n\nInstallation\n\n\nUsing Homebrew\n\n\nTo install the latest tagged version of the ios-webkit-debug-proxy using\nHomebrew, run the following commands in the terminal:\n\n\n``` center\n # The first command is only required if you don't have brew installed.\n\n\n\n\nruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\nbrew update\nbrew install ios-webkit-debug-proxy\n ```\n\n\n\n\nBuilding ios-webkit-debug-proxy from source\n\n\nOpen the command terminal on your mac. You can find instructions on how to open the\nterminal via your favorite search engine. Once that is open, verify you have\n\nHomebew\n installed:\n\n\n$ brew -v\n\n\n\n\nWhen you're certain you have Homebrew, do the following (the $ indicates the command\nline prompt, do not enter it):\n\n\n$ cd  ~\n$ sudo apt-get install autoconf automake libusb-dev libusb-1.0-0-dev libplist-dev libplist++-dev usbmuxd libtool libimobiledevice-dev\n$ git clone https://github.com/google/ios-webkit-debug-proxy.git\n$ cd ios-webkit-debug-proxy\n$ ./autogen.sh\n$ make\n$ sudo make install\n\n\n\n\nRunning ios-webkit-debug-proxy\n\n\nOnce installed you can start the proxy with the following command:\n\n\n# Change the udid to be the udid of the attached device and make sure to set the port to 27753\n# as that is the port the remote-debugger uses. You can learn how to retrieve the UDID from\n# Apple's developer resources.\n\n ios_webkit_debug_proxy -c 0e4b2f612b65e98c1d07d22ee08678130d345429:27753 -d\n\n\n\n\nYou can also set the desired capability called 'startIWDP' to true (https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/caps.md). This will run the above command as a subprocess from within Appium and will set the udid, so you don't have to run ios_webkit_debug_proxy yourself anymore. It monitors the proxy for crashes and relaunches when needed.\n\n\n// example desired capabilities\n{\n  \nbrowserName\n: \nSafari\n,\n  \nplatformName\n: \niOS\n,\n  \ndeviceName\n: \niPhone 7\n,\n  \nautomationName\n: \nXCUITest\n,\n  \nstartIWDP\n: true,\n  \nudid\n: \nauto\n\n}\n\n\n\n\nYou may also use \nios-webkit-debug-proxy-launcher\n, a small script included with the Appium codebase, to launch the\nproxy. It monitors the proxy log for errors, and relaunch the proxy\nwhere needed. This is also optional and may help with recent devices:\n\n\n# change the udid\n# note, this is run from an Appium repository\n\n ./bin/ios-webkit-debug-proxy-launcher.js -c 0e4b2f612b65e98c1d07d22ee08678130d345429:27753 -d\n\n\n\n\nNOTE:\n the proxy requires the \n\"web inspector\"\n to be turned on to\nallow a connection to be established. Turn it on by going to \nsettings \n\nsafari \n advanced\n. Please be aware that the web inspector was \nadded as\npart of iOS 6\n and was not available previously.", 
            "title": "Ios webkit debug proxy"
        }, 
        {
            "location": "/advanced/ios-webkit-debug-proxy/#ios-webkit-debug-proxy", 
            "text": "For accessing web views on real iOS device appium uses  ios_webkit_debug_proxy .", 
            "title": "iOS WebKit Debug Proxy"
        }, 
        {
            "location": "/advanced/ios-webkit-debug-proxy/#installation", 
            "text": "", 
            "title": "Installation"
        }, 
        {
            "location": "/advanced/ios-webkit-debug-proxy/#using-homebrew", 
            "text": "To install the latest tagged version of the ios-webkit-debug-proxy using\nHomebrew, run the following commands in the terminal:  ``` center\n # The first command is only required if you don't have brew installed.   ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\nbrew update\nbrew install ios-webkit-debug-proxy\n ```", 
            "title": "Using Homebrew"
        }, 
        {
            "location": "/advanced/ios-webkit-debug-proxy/#building-ios-webkit-debug-proxy-from-source", 
            "text": "Open the command terminal on your mac. You can find instructions on how to open the\nterminal via your favorite search engine. Once that is open, verify you have Homebew  installed:  $ brew -v  When you're certain you have Homebrew, do the following (the $ indicates the command\nline prompt, do not enter it):  $ cd  ~\n$ sudo apt-get install autoconf automake libusb-dev libusb-1.0-0-dev libplist-dev libplist++-dev usbmuxd libtool libimobiledevice-dev\n$ git clone https://github.com/google/ios-webkit-debug-proxy.git\n$ cd ios-webkit-debug-proxy\n$ ./autogen.sh\n$ make\n$ sudo make install", 
            "title": "Building ios-webkit-debug-proxy from source"
        }, 
        {
            "location": "/advanced/ios-webkit-debug-proxy/#running-ios-webkit-debug-proxy", 
            "text": "Once installed you can start the proxy with the following command:  # Change the udid to be the udid of the attached device and make sure to set the port to 27753\n# as that is the port the remote-debugger uses. You can learn how to retrieve the UDID from\n# Apple's developer resources.  ios_webkit_debug_proxy -c 0e4b2f612b65e98c1d07d22ee08678130d345429:27753 -d  You can also set the desired capability called 'startIWDP' to true (https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/caps.md). This will run the above command as a subprocess from within Appium and will set the udid, so you don't have to run ios_webkit_debug_proxy yourself anymore. It monitors the proxy for crashes and relaunches when needed.  // example desired capabilities\n{\n   browserName :  Safari ,\n   platformName :  iOS ,\n   deviceName :  iPhone 7 ,\n   automationName :  XCUITest ,\n   startIWDP : true,\n   udid :  auto \n}  You may also use  ios-webkit-debug-proxy-launcher , a small script included with the Appium codebase, to launch the\nproxy. It monitors the proxy log for errors, and relaunch the proxy\nwhere needed. This is also optional and may help with recent devices:  # change the udid\n# note, this is run from an Appium repository  ./bin/ios-webkit-debug-proxy-launcher.js -c 0e4b2f612b65e98c1d07d22ee08678130d345429:27753 -d  NOTE:  the proxy requires the  \"web inspector\"  to be turned on to\nallow a connection to be established. Turn it on by going to  settings  \nsafari   advanced . Please be aware that the web inspector was  added as\npart of iOS 6  and was not available previously.", 
            "title": "Running ios-webkit-debug-proxy"
        }, 
        {
            "location": "/advanced/iwd_xcode7/", 
            "text": "Setting up instruments without delay (iwd) for xcode 7 and iOS \n= 9.0\n\n\nFor iOS \n= 9.0 instruments without delay (iwd) does not work by passing binaries through the command line (appium does this under the hood for xcode \n 7). See \niwd\n\n\nFor enabling iwd for xcode \n= 7,\n- Check out \nappium-instruments\n\n- Run \nxcode-iwd.sh\n present in \nappium-instruments\n/bin/\n, with arguments as indicated below:\n\n\nsh \nappium-instruments\n/bin/xcode-iwd.sh \npath to xcode\n \npath to appium-instruments\n\n\n\n\n\neg. \nsh ./bin/xcode-iwd.sh /Applications/Xcode.app /Users/xyz/appium-instruments/\n\n\nNote: iwd with Xcode 7 will only work for iOS \n= 9.0, you can switch to an older version of Xcode for iOS \n 9.0", 
            "title": "Iwd xcode7"
        }, 
        {
            "location": "/advanced/iwd_xcode7/#setting-up-instruments-without-delay-iwd-for-xcode-7-and-ios-90", 
            "text": "For iOS  = 9.0 instruments without delay (iwd) does not work by passing binaries through the command line (appium does this under the hood for xcode   7). See  iwd  For enabling iwd for xcode  = 7,\n- Check out  appium-instruments \n- Run  xcode-iwd.sh  present in  appium-instruments /bin/ , with arguments as indicated below:  sh  appium-instruments /bin/xcode-iwd.sh  path to xcode   path to appium-instruments   eg.  sh ./bin/xcode-iwd.sh /Applications/Xcode.app /Users/xyz/appium-instruments/  Note: iwd with Xcode 7 will only work for iOS  = 9.0, you can switch to an older version of Xcode for iOS   9.0", 
            "title": "Setting up instruments without delay (iwd) for xcode 7 and iOS &gt;= 9.0"
        }, 
        {
            "location": "/advanced/migrating-to-1-0/", 
            "text": "This document is old, and only of interest for those migrating to Appium 1.x from an earlier version\n\n\nMigrating your tests from Appium 0.18.x to Appium 1.x\n\n\nAppium 1.0 has removed a number of deprecated features from the previous versions. This guide will help you know what needs to change in your test suite to take advantage of Appium 1.0.\n\n\nNew client libraries\n\n\nThe biggest thing you need to worry about is using the new Appium client libraries instead of the vanilla WebDriver clients you are currently using. Visit the \nAppium client list\n to find the client for your language. Downloads and instructions for integrating into your code are available on the individual client websites.\n\n\nUltimately, you'll be doing something like (to use Python as an example):\n\n\nfrom appium import webdriver\n\n\n\n\nInstead of:\n\n\nfrom selenium import webdriver\n\n\n\n\nNew desired capabilities\n\n\nThe following capabilities are no longer used:\n\n\n\n\ndevice\n\n\nversion\n\n\n\n\nInstead, use these capabilities:\n\n\n\n\nplatformName\n (either \"iOS\" or \"Android\")\n\n\nplatformVersion\n (the mobile OS version you want)\n\n\ndeviceName\n (the kind of device you want, like \"iPhone Simulator\")\n\n\nautomationName\n (\"Selendroid\" if you want to use Selendroid, otherwise, this can be omitted)\n\n\n\n\nThe \napp\n capability remains the same, but now refers exclusively to non-browser apps. To use browsers like Safari or Chrome, use the standard \nbrowserName\n cap. This means that \napp\n and \nbrowserName\n are exclusive.\n\n\nWe have also standardized on camelCase for Appium server caps. That means caps like \napp-package\n or \napp-wait-activity\n are now \nappPackage\n and \nappWaitActivity\n respectively. Of course, since Android app package and activity are now auto-detected, you should be able to omit them entirely in most cases.\n\n\nNew locator strategies\n\n\nWe've removed the following locator strategies:\n\n\n\n\nname\n\n\ntag name\n\n\n\n\nWe have now added the \naccessibility_id\n strategy to do what \nname\n used to do. The specifics will be relative to your Appium client.\n\n\ntag name\n has been replaced by \nclass name\n. So to find an element by its UI type, use the class name locator strategy for your client.\n\n\nNote about \nclass name\n and \nxpath\n strategies: these now require the fully-qualified class name for your element. This means that if you had an xpath selector that looked like this:\n\n\n//table/cell/button\n\n\n\n\nIt would now need to be:\n\n\n//UIATableView/UIATableCell/UIAButton\n\n\n\n\n(And likewise for Android: \nbutton\n now needs to be \nandroid.widget.Button\n)\n\n\nWe've also added the following locator strategies:\n\n\n\n\n-ios uiautomation\n\n\n-android uiautomator\n\n\n\n\nRefer to your client for ways to use these new locator strategies.\n\n\nXML, not JSON\n\n\nApp source methods, which previously returned JSON, now return XML, so if you have code that relies on parsing the app source, it will need to be updated.\n\n\nHybrid support through context, not window\n\n\nHybrid apps were previously supported by switching between \"windows\" using\n\n\n\n\nwindow_handles\n\n\nwindow\n\n\nswitch_to.window\n\n\n\n\nNow Appium supports the more conceptually consistent concept of \"context\". To get all of the available contexts, or the particular context the application is is, you use\n\n\n# python\ndriver.contexts\ncurrent = driver.context\n\n\n\n\n// javascript\ndriver.contexts().then(function (contexts) { /*...*/ })\n\n\n\n\n// c#\ndriver.GetContexts ()\ndriver.GetContext ()\n\n\n\n\n// java\nSet\nString\n contextNames = driver.getContextHandles();\nString context = driver.getContext();\n\n\n\n\n// php\n$contexts = $this-\ncontexts();\n$context = $this-\ncontext();\n\n\n\n\n# ruby\ncontexts = available_contexts\ncontext = current_context\n\n\n\n\nAnd to switch between them, you use\n\n\n# python\ndriver.switch_to.context(\nWEBVIEW\n)\n\n\n\n\n// javascript\ndriver.currentContext().then(function (context) { /*...*/ })\n\n\n\n\n// c#\ndriver.SetContext (\nWEBVIEW\n);\n\n\n\n\njava\ndriver.context(contextName);\n\n\n\n\n// php\n$this-\ncontext('WEBVIEW');\n\n\n\n\n# ruby\nset_context \nWEBVIEW\n\n\n\n\n\nNo more \nexecute_script(\"mobile: xxx\")\n\n\nAll the \nmobile:\n methods have been removed, and have been replaced by native methods in the Appium client libraries. This means that a method call like \ndriver.execute(\"mobile: lock\", [5])\n will now look something more like \ndriver.lock(5)\n (where \nlock\n has been turned into a native client method). Of course, the details on calling these methods will differ by client.\n\n\nOf particular note, the gesture methods have been replaced by the new TouchAction / MultiAction API which allows for a much more powerful and general way of putting gestural automation together. Refer to your Appium client for usage notes on TouchAction / MultiAction.\n\n\nAnd that's it! Happy migrating!", 
            "title": "Migrating to 1 0"
        }, 
        {
            "location": "/advanced/migrating-to-1-0/#migrating-your-tests-from-appium-018x-to-appium-1x", 
            "text": "Appium 1.0 has removed a number of deprecated features from the previous versions. This guide will help you know what needs to change in your test suite to take advantage of Appium 1.0.", 
            "title": "Migrating your tests from Appium 0.18.x to Appium 1.x"
        }, 
        {
            "location": "/advanced/migrating-to-1-0/#new-client-libraries", 
            "text": "The biggest thing you need to worry about is using the new Appium client libraries instead of the vanilla WebDriver clients you are currently using. Visit the  Appium client list  to find the client for your language. Downloads and instructions for integrating into your code are available on the individual client websites.  Ultimately, you'll be doing something like (to use Python as an example):  from appium import webdriver  Instead of:  from selenium import webdriver", 
            "title": "New client libraries"
        }, 
        {
            "location": "/advanced/migrating-to-1-0/#new-desired-capabilities", 
            "text": "The following capabilities are no longer used:   device  version   Instead, use these capabilities:   platformName  (either \"iOS\" or \"Android\")  platformVersion  (the mobile OS version you want)  deviceName  (the kind of device you want, like \"iPhone Simulator\")  automationName  (\"Selendroid\" if you want to use Selendroid, otherwise, this can be omitted)   The  app  capability remains the same, but now refers exclusively to non-browser apps. To use browsers like Safari or Chrome, use the standard  browserName  cap. This means that  app  and  browserName  are exclusive.  We have also standardized on camelCase for Appium server caps. That means caps like  app-package  or  app-wait-activity  are now  appPackage  and  appWaitActivity  respectively. Of course, since Android app package and activity are now auto-detected, you should be able to omit them entirely in most cases.", 
            "title": "New desired capabilities"
        }, 
        {
            "location": "/advanced/migrating-to-1-0/#new-locator-strategies", 
            "text": "We've removed the following locator strategies:   name  tag name   We have now added the  accessibility_id  strategy to do what  name  used to do. The specifics will be relative to your Appium client.  tag name  has been replaced by  class name . So to find an element by its UI type, use the class name locator strategy for your client.  Note about  class name  and  xpath  strategies: these now require the fully-qualified class name for your element. This means that if you had an xpath selector that looked like this:  //table/cell/button  It would now need to be:  //UIATableView/UIATableCell/UIAButton  (And likewise for Android:  button  now needs to be  android.widget.Button )  We've also added the following locator strategies:   -ios uiautomation  -android uiautomator   Refer to your client for ways to use these new locator strategies.", 
            "title": "New locator strategies"
        }, 
        {
            "location": "/advanced/migrating-to-1-0/#xml-not-json", 
            "text": "App source methods, which previously returned JSON, now return XML, so if you have code that relies on parsing the app source, it will need to be updated.", 
            "title": "XML, not JSON"
        }, 
        {
            "location": "/advanced/migrating-to-1-0/#hybrid-support-through-context-not-window", 
            "text": "Hybrid apps were previously supported by switching between \"windows\" using   window_handles  window  switch_to.window   Now Appium supports the more conceptually consistent concept of \"context\". To get all of the available contexts, or the particular context the application is is, you use  # python\ndriver.contexts\ncurrent = driver.context  // javascript\ndriver.contexts().then(function (contexts) { /*...*/ })  // c#\ndriver.GetContexts ()\ndriver.GetContext ()  // java\nSet String  contextNames = driver.getContextHandles();\nString context = driver.getContext();  // php\n$contexts = $this- contexts();\n$context = $this- context();  # ruby\ncontexts = available_contexts\ncontext = current_context  And to switch between them, you use  # python\ndriver.switch_to.context( WEBVIEW )  // javascript\ndriver.currentContext().then(function (context) { /*...*/ })  // c#\ndriver.SetContext ( WEBVIEW );  java\ndriver.context(contextName);  // php\n$this- context('WEBVIEW');  # ruby\nset_context  WEBVIEW", 
            "title": "Hybrid support through context, not window"
        }, 
        {
            "location": "/advanced/migrating-to-1-0/#no-more-execute_scriptmobile-xxx", 
            "text": "All the  mobile:  methods have been removed, and have been replaced by native methods in the Appium client libraries. This means that a method call like  driver.execute(\"mobile: lock\", [5])  will now look something more like  driver.lock(5)  (where  lock  has been turned into a native client method). Of course, the details on calling these methods will differ by client.  Of particular note, the gesture methods have been replaced by the new TouchAction / MultiAction API which allows for a much more powerful and general way of putting gestural automation together. Refer to your Appium client for usage notes on TouchAction / MultiAction.  And that's it! Happy migrating!", 
            "title": "No more execute_script(\"mobile: xxx\")"
        }, 
        {
            "location": "/advanced/migrating-to-xcuitest/", 
            "text": "Migrating your iOS tests from UIAutomation (iOS 9.3 and below) to XCUITest (iOS 9.3 and up)\n\n\nFor iOS automation, Appium relies on system frameworks provided by Apple. For iOS 9.2 and below, Apple's only automation technology was called UIAutomation, and it ran in the context of a process called \"Instruments\". As of iOS 10, Apple has completely removed the UIAutomation instrument, thus making it impossible for Appium to allow testing in the way it used to. Fortunately, Apple introduced a new automation technology, called XCUITest, beginning with iOS 9.3. For iOS 10 and up, this will be the only supported automation framework from Apple.\n\n\nAppium has built in support for XCUITest beginning with Appium 1.6. For the most part, the capabilities of XCUITest match those of UIAutomation, and so the Appium team was able to ensure that test behavior will stay the same. This is one of the great things about using Appium! Even with Apple completely changing the technology your tests are using, your scripts can stay mostly the same! That being said, there are some differences you'll need to be aware of which might require modification of your test scripts if you want to run them under our XCUITest automation backend. This document will help you with those differences.\n\n\nElement class name schema\n\n\nWith XCUITest, Apple has given different class names to the UI elements which make up the view hierarchy. For example, \nUIAButton\n is now \nXCUIElementTypeButton\n. In many cases, there is a direct mapping between these two classes. If you use the \nclass name\n locator strategy to find elements, Appium 1.6 will rewrite the selector for you. Likewise, if you use the \nxpath\n locator strategy, Appium 1.6 will find any \nUIA*\n elements in your XPath string and rewrite them appropriately.\n\n\nThis does not however guarantee that your tests will work exactly the same, for two reasons:\n\n\n\n\nThe application hierarchy reported to Appium will not necessarily be identical within XCUITest to what it was within UIAutomation. If you have a path-based XPath selector, it may need to be adjusted.\n\n\nThe list of class names is not entirely identical either. Many elements are returned by XCUITest as belonging to the \nXCUIElementTypeOther\n class, a sort of catch-all container.\n\n\n\n\nPage source\n\n\nAs mentioned just above, if you rely on the app source XML from the \npage source\n command, the XML output will now differ significantly from what it was under UIAutomation.\n\n\n-ios uiautomation\n locator strategy\n\n\nThis locator strategy was specifically built on UIAutomation, so it is not included in the XCUITest automation backend. We will be working on a similar \"native\"-type locator strategy in coming releases.\n\n\nxpath\n locator strategy\n\n\n\n\nTry not to use XPath locators unless there is absolutely no other alternatives. In general, xpath locators might be times slower, than other types of locators like accessibility id, class name and predicate (up to 100 times slower in some special cases). They are so slow, because xpath location is not natively supported by Apple's XCTest framework.\n\n\nUse\n\n\n\n\ndriver.findElement(x)\n\n\n\n\ncall instead of\n\n\ndriver.findElements(x)[0]\n\n\n\n\nto lookup single element by xpath. The more possible UI elements are matched by your locator the slower it is.\n3. Be very specific when locating elements by xpath. Such locators like\n\n\n//*\n\n\n\n\nmay take minutes to complete depending on how many UI elements your application has (e. g.\n\n\ndriver.findElement(By.xpath(\n//XCUIElementTypeButton[@value='blabla']\n))\n\n\n\n\nis faster than\n\n\ndriver.findElement(By.xpath(\n//*[@value='blabla']\n))\n\n\n\n\nor\n\n\ndriver.findElement(By.xpath(\n//XCUIElementTypeButton\n)))\n\n\n\n\n\n\nIn most cases it would be faster to perform multiple nested findElement calls than to perform a single call by xpath (e.g.\n\n\n\n\ndriver.findElement(x).findElement(y)\n\n\n\n\nis usually faster than\n\n\ndriver.findElement(z)\n\n\n\n\n\nwhere x and y are non-xpath locators and z is a xpath locator).\n\n\nSystem dependencies\n\n\nIn addition to the many gotchas that might come with upgrading any XCode installation (unrelated to Appium), Appium's XCUITest support requires a new system dependency: \nCarthage\n. Appium Doctor has now been updated to ensure that the \ncarthage\n binary is on your path.\n\n\nAPI differences\n\n\nUnfortunately, the XCUITest API and the UIAutomation API are not equivalent. In many cases (like with \ntap/click\n), the behavior is identical. But some features that were available in the UIAutomation backend are not yet available in the new XCUITest backend. These known lacking features include:\n\n Geolocation support (e.g., \ndriver.location\n)\n\n Shaking the device\n\n Locking the device\n\n Rotating the device (note that this is \nNOT\n device \norientation\n, which is supported)\n\n\nWe will endeavor to add these features back in future releases of Appium.\n\n\nScrolling and clicking\n\n\nIn the previous UIAutomation-based driver, if you tried to click on an element that wasn't in view, UIAutomation would scroll to the element automatically and then tap it. With XCUITest, this is no longer the case. You are now responsible for ensuring your element is in view before interacting with it (the same way a user would be responsible for the same).\n\n\nOther known issues\n\n\nFinally, a list of known issues with the initial 1.6 release (we'll strike through issues which have been resolved):\n\n\n\n\n~~Unable to interact with elements on devices in Landscape mode (https://github.com/appium/appium/issues/6994)~~\n\n\nshake\n is not implemented due to lack of support from Apple\n\n\nlock\n is not implemented due to lack of support from Apple\n\n\nSetting geo-location not supported due to lack of support from Apple\n\n\nThrough the TouchAction/MultiAction API, \nzoom\n gestures work but \npinch\n gestures do not, due to an Apple issue.\n\n\n~~Through the TouchAction/MultiAction API, \nswipe\n gestures are currently not supported, though they should be soon (https://github.com/appium/appium/issues/7573)~~\n\n\nThe capabilities \nautoAcceptAlerts\n and \nautoDismissAlerts\n do not currently work, and there is continued debate about whether we will be able to implement them in the future.\n\n\nThere is an issue with the iOS SDK such that PickerWheels built using certain API methods are not automatable by XCUITest. See https://github.com/appium/appium/issues/6962 for the workaround, to ensure your PickerWheels are built properly.\n\n\n\n\nAs far as possible, we will add the missing features and fix other known issues in future versions of Appium.", 
            "title": "Migrating to xcuitest"
        }, 
        {
            "location": "/advanced/migrating-to-xcuitest/#migrating-your-ios-tests-from-uiautomation-ios-93-and-below-to-xcuitest-ios-93-and-up", 
            "text": "For iOS automation, Appium relies on system frameworks provided by Apple. For iOS 9.2 and below, Apple's only automation technology was called UIAutomation, and it ran in the context of a process called \"Instruments\". As of iOS 10, Apple has completely removed the UIAutomation instrument, thus making it impossible for Appium to allow testing in the way it used to. Fortunately, Apple introduced a new automation technology, called XCUITest, beginning with iOS 9.3. For iOS 10 and up, this will be the only supported automation framework from Apple.  Appium has built in support for XCUITest beginning with Appium 1.6. For the most part, the capabilities of XCUITest match those of UIAutomation, and so the Appium team was able to ensure that test behavior will stay the same. This is one of the great things about using Appium! Even with Apple completely changing the technology your tests are using, your scripts can stay mostly the same! That being said, there are some differences you'll need to be aware of which might require modification of your test scripts if you want to run them under our XCUITest automation backend. This document will help you with those differences.", 
            "title": "Migrating your iOS tests from UIAutomation (iOS 9.3 and below) to XCUITest (iOS 9.3 and up)"
        }, 
        {
            "location": "/advanced/migrating-to-xcuitest/#element-class-name-schema", 
            "text": "With XCUITest, Apple has given different class names to the UI elements which make up the view hierarchy. For example,  UIAButton  is now  XCUIElementTypeButton . In many cases, there is a direct mapping between these two classes. If you use the  class name  locator strategy to find elements, Appium 1.6 will rewrite the selector for you. Likewise, if you use the  xpath  locator strategy, Appium 1.6 will find any  UIA*  elements in your XPath string and rewrite them appropriately.  This does not however guarantee that your tests will work exactly the same, for two reasons:   The application hierarchy reported to Appium will not necessarily be identical within XCUITest to what it was within UIAutomation. If you have a path-based XPath selector, it may need to be adjusted.  The list of class names is not entirely identical either. Many elements are returned by XCUITest as belonging to the  XCUIElementTypeOther  class, a sort of catch-all container.", 
            "title": "Element class name schema"
        }, 
        {
            "location": "/advanced/migrating-to-xcuitest/#page-source", 
            "text": "As mentioned just above, if you rely on the app source XML from the  page source  command, the XML output will now differ significantly from what it was under UIAutomation.", 
            "title": "Page source"
        }, 
        {
            "location": "/advanced/migrating-to-xcuitest/#-ios-uiautomation-locator-strategy", 
            "text": "This locator strategy was specifically built on UIAutomation, so it is not included in the XCUITest automation backend. We will be working on a similar \"native\"-type locator strategy in coming releases.", 
            "title": "-ios uiautomation locator strategy"
        }, 
        {
            "location": "/advanced/migrating-to-xcuitest/#xpath-locator-strategy", 
            "text": "Try not to use XPath locators unless there is absolutely no other alternatives. In general, xpath locators might be times slower, than other types of locators like accessibility id, class name and predicate (up to 100 times slower in some special cases). They are so slow, because xpath location is not natively supported by Apple's XCTest framework.  Use   driver.findElement(x)  call instead of  driver.findElements(x)[0]  to lookup single element by xpath. The more possible UI elements are matched by your locator the slower it is.\n3. Be very specific when locating elements by xpath. Such locators like  //*  may take minutes to complete depending on how many UI elements your application has (e. g.  driver.findElement(By.xpath( //XCUIElementTypeButton[@value='blabla'] ))  is faster than  driver.findElement(By.xpath( //*[@value='blabla'] ))  or  driver.findElement(By.xpath( //XCUIElementTypeButton )))   In most cases it would be faster to perform multiple nested findElement calls than to perform a single call by xpath (e.g.   driver.findElement(x).findElement(y)  is usually faster than  driver.findElement(z)  where x and y are non-xpath locators and z is a xpath locator).", 
            "title": "xpath locator strategy"
        }, 
        {
            "location": "/advanced/migrating-to-xcuitest/#system-dependencies", 
            "text": "In addition to the many gotchas that might come with upgrading any XCode installation (unrelated to Appium), Appium's XCUITest support requires a new system dependency:  Carthage . Appium Doctor has now been updated to ensure that the  carthage  binary is on your path.", 
            "title": "System dependencies"
        }, 
        {
            "location": "/advanced/migrating-to-xcuitest/#api-differences", 
            "text": "Unfortunately, the XCUITest API and the UIAutomation API are not equivalent. In many cases (like with  tap/click ), the behavior is identical. But some features that were available in the UIAutomation backend are not yet available in the new XCUITest backend. These known lacking features include:  Geolocation support (e.g.,  driver.location )  Shaking the device  Locking the device  Rotating the device (note that this is  NOT  device  orientation , which is supported)  We will endeavor to add these features back in future releases of Appium.", 
            "title": "API differences"
        }, 
        {
            "location": "/advanced/migrating-to-xcuitest/#scrolling-and-clicking", 
            "text": "In the previous UIAutomation-based driver, if you tried to click on an element that wasn't in view, UIAutomation would scroll to the element automatically and then tap it. With XCUITest, this is no longer the case. You are now responsible for ensuring your element is in view before interacting with it (the same way a user would be responsible for the same).", 
            "title": "Scrolling and clicking"
        }, 
        {
            "location": "/advanced/migrating-to-xcuitest/#other-known-issues", 
            "text": "Finally, a list of known issues with the initial 1.6 release (we'll strike through issues which have been resolved):   ~~Unable to interact with elements on devices in Landscape mode (https://github.com/appium/appium/issues/6994)~~  shake  is not implemented due to lack of support from Apple  lock  is not implemented due to lack of support from Apple  Setting geo-location not supported due to lack of support from Apple  Through the TouchAction/MultiAction API,  zoom  gestures work but  pinch  gestures do not, due to an Apple issue.  ~~Through the TouchAction/MultiAction API,  swipe  gestures are currently not supported, though they should be soon (https://github.com/appium/appium/issues/7573)~~  The capabilities  autoAcceptAlerts  and  autoDismissAlerts  do not currently work, and there is continued debate about whether we will be able to implement them in the future.  There is an issue with the iOS SDK such that PickerWheels built using certain API methods are not automatable by XCUITest. See https://github.com/appium/appium/issues/6962 for the workaround, to ensure your PickerWheels are built properly.   As far as possible, we will add the missing features and fix other known issues in future versions of Appium.", 
            "title": "Other known issues"
        }, 
        {
            "location": "/advanced/settings/", 
            "text": "Settings\n\n\nSettings are a new concept introduced by appium. They are currently not a part of the Mobile JSON Wire Protocol, or the Webdriver spec.\n\n\nSettings are a way to specify the behavior of the appium server.\n\n\nSettings are:\n - Mutable, they can be changed during a session\n - Only relevant during the session they are applied. They are reset for each new session.\n - Control the way the appium server behaves during test automation. They do not apply to controlling the app or device under test.\n\n\nAn example of a setting would be \nignoreUnimportantViews\n for Android. Android can be set to ignore elements in the View Hierarchy which it deems irrelevant. Setting this can cause tests to run faster. A user who \nwants\n to access the ignored elements however, would want to disable \nignoreUnimportantViews\n, and reenable it afterwards.\n\n\nAnother example of a use-case for settings would be telling appium to ignore elements which are not visible.\n\n\nSettings are implemented via the following API endpoints:\n\n\nPOST\n /session/:sessionId/appium/settings\n\n\n\n\nExpects a JSON hash of settings, where keys correspond to setting names, and values to the value of the setting.\n\n\n\n\n{\n  settings: {\n   ignoreUnimportantViews : true\n  }\n}\n\n\n\n\nGET\n /session/:sessionId/appium/settings\n\n\n\n\nReturns a JSON hash of all the currently specified settings.\n\n\n\n\n{\n  ignoreUnimportantViews : true\n}\n\n\n\n\nNote that the actual commands you would use in your test script differ based on the language; see the specific Appium client documention for more information.\n\n\nSupported Settings\n\n\n\"ignoreUnimportantViews\"\n - Boolean which sets whether Android devices should use \nsetCompressedLayoutHeirarchy()\n which ignores all views which are marked IMPORTANT_FOR_ACCESSIBILITY_NO or IMPORTANT_FOR_ACCESSIBILITY_AUTO (and have been deemed not important by the system), in an attempt to make things less confusing or faster.\n\n\nAndroid UiAutomator Configurator\n\n\nsets \nUiAutomator Configurator\n timeouts and delays in Android devices. only works in Android API 18 and above.\n\n\n\"actionAcknowledgmentTimeout\"\n - Int which is the same as \nsetActionAcknowledgmentTimeout\n. If a negative value is given, it would set to default(3 * 1000 milliseconds)\n\n\n\"keyInjectionDelay\"\n - Int which is the same as \nsetKeyInjectionDelay\n. If a negative value is given, it would set to default(0 milliseconds)\n\n\n\"scrollAcknowledgmentTimeout\"\n - Int which is the same as \nsetScrollAcknowledgmentTimeout\n. If a negative value is given, it would set to default(200 milliseconds)\n\n\n\"waitForIdleTimeout\"\n - Int which is the same as \nsetWaitForIdleTimeout\n. If a negative value is given, it would set to default(10 * 1000 milliseconds)\n\n\n\"waitForSelectorTimeout\"\n - Int which is the same as \nsetWaitForSelectorTimeout\n. If a negative value is given, it would set to default(10 * 1000 milliseconds)", 
            "title": "Settings"
        }, 
        {
            "location": "/advanced/settings/#settings", 
            "text": "Settings are a new concept introduced by appium. They are currently not a part of the Mobile JSON Wire Protocol, or the Webdriver spec.  Settings are a way to specify the behavior of the appium server.  Settings are:\n - Mutable, they can be changed during a session\n - Only relevant during the session they are applied. They are reset for each new session.\n - Control the way the appium server behaves during test automation. They do not apply to controlling the app or device under test.  An example of a setting would be  ignoreUnimportantViews  for Android. Android can be set to ignore elements in the View Hierarchy which it deems irrelevant. Setting this can cause tests to run faster. A user who  wants  to access the ignored elements however, would want to disable  ignoreUnimportantViews , and reenable it afterwards.  Another example of a use-case for settings would be telling appium to ignore elements which are not visible.  Settings are implemented via the following API endpoints:  POST  /session/:sessionId/appium/settings   Expects a JSON hash of settings, where keys correspond to setting names, and values to the value of the setting.   {\n  settings: {\n   ignoreUnimportantViews : true\n  }\n}  GET  /session/:sessionId/appium/settings   Returns a JSON hash of all the currently specified settings.   {\n  ignoreUnimportantViews : true\n}  Note that the actual commands you would use in your test script differ based on the language; see the specific Appium client documention for more information.", 
            "title": "Settings"
        }, 
        {
            "location": "/advanced/settings/#supported-settings", 
            "text": "\"ignoreUnimportantViews\"  - Boolean which sets whether Android devices should use  setCompressedLayoutHeirarchy()  which ignores all views which are marked IMPORTANT_FOR_ACCESSIBILITY_NO or IMPORTANT_FOR_ACCESSIBILITY_AUTO (and have been deemed not important by the system), in an attempt to make things less confusing or faster.", 
            "title": "Supported Settings"
        }, 
        {
            "location": "/advanced/settings/#android-uiautomator-configurator", 
            "text": "sets  UiAutomator Configurator  timeouts and delays in Android devices. only works in Android API 18 and above.  \"actionAcknowledgmentTimeout\"  - Int which is the same as  setActionAcknowledgmentTimeout . If a negative value is given, it would set to default(3 * 1000 milliseconds)  \"keyInjectionDelay\"  - Int which is the same as  setKeyInjectionDelay . If a negative value is given, it would set to default(0 milliseconds)  \"scrollAcknowledgmentTimeout\"  - Int which is the same as  setScrollAcknowledgmentTimeout . If a negative value is given, it would set to default(200 milliseconds)  \"waitForIdleTimeout\"  - Int which is the same as  setWaitForIdleTimeout . If a negative value is given, it would set to default(10 * 1000 milliseconds)  \"waitForSelectorTimeout\"  - Int which is the same as  setWaitForSelectorTimeout . If a negative value is given, it would set to default(10 * 1000 milliseconds)", 
            "title": "Android UiAutomator Configurator"
        }, 
        {
            "location": "/advanced/wda-custom-server/", 
            "text": "How To Set Up And Customize WebDriverAgent Server\n\n\nAppium for iOS uses \nFacebook's WebDriverAgent\n\nas the automation backend. This backend is based on Apple's XCTest framework and shares all the\nknown problem that are present in XCTest. For some of them we have workarounds, but there\nare some that are hardly possible to workaround, for example https://github.com/facebook/WebDriverAgent/issues/507.\nThe approach described in this article enables you to have full control over how WDA is built, managed,\nand run on the device. This way you may fine-tune your automated tests in CI environment and make them more stable in\nlong-running perspective.\n\n\nImportant points:\n * The steps below are not necessary if default Appium capabilites are used.\n The server will do everything for you, however you won't have so much control over WDA.\n * It is mandatory to have SSH or physical access to the machine to which the device under test\n is connected.\n\n\nWDA Setup\n\n\nWebDriverAgent source is automically downloaded with Appium. The usual folder location\nin case Appium is installed via npm tool (\nnpm install -g appium\n) is\n/usr/local/lib/node_modules/appium/node_modules/appium-xcuitest-driver/WebDriverAgent\nIf this was a fresh install then it is also necessary to download third-party dependencies\n(\ncarthage\n tool is mandatory for this purpose: \nbrew install carthage\n):\n\n\ncd /usr/local/lib/node_modules/appium/node_modules/appium-xcuitest-driver/WebDriverAgent\n./Scripts/bootstrap.sh -d\n\n\n\n\nAlso, it might be necessary to create an empty folder for WDA resources:\n\n\nmkdir -p /usr/local/lib/node_modules/appium/node_modules/appium-xcuitest-driver/WebDriverAgent/Resources/WebDriverAgent.bundle\n\n\n\n\nNo futher confuguration steps are needed if you're going to execute your automated tests on\niOS Simulator.\n\n\nReal device, however, requires some more work to be done. Follow\n\nreal device configuration documentation\n\nto setup code signing. Also, you'll need to have iproxy tool installed:\n\n\nnpm install -g iproxy\n\n\n\n\nIn order to make sure that WDA source is configured properly:\n\n\n\n\nOpen /usr/local/lib/node_modules/appium/node_modules/appium-xcuitest-driver/WebDriverAgent/WebDriverAgent.xcodeproj\nin Xcode\n\n\nSelect \nWebDriverAgentRunner\n project\n\n\nSelect your real phone/Simulator you'd like to run automated tests on as build target\n\n\nSelect Product-\nTest from the main menu\n\n\n\n\nXcode should successfully build the project and install it on the real device/Simulator,\nso you'll see the icon of WebDriverAgentRunner application on the springboard.\n\n\nWDA Startup\n\n\nWebDriverAgent application acts as a REST server, which proxies external API requests to native XCTest calls\nfor your application under test. The server address will be \nlocalhost\n if you run your tests on Simulator\nor the actual phone IP address in case of real device. We use \niproxy\n to route network\nrequests to a real device from \nlocalhost\n via USB, which means one can use this tool to unify\nWDA network address for Simulator and for real device.\n\n\nThis helper class written in Java illustrates the main implementation details:\n\n\npublic class WDAServer {\n    private static final Logger log = ZLogger.getLog(WDAServer.class.getSimpleName());\n\n    private static final int MAX_REAL_DEVICE_RESTART_RETRIES = 1;\n    private static final Timedelta REAL_DEVICE_RUNNING_TIMEOUT = Timedelta.ofMinutes(4);\n    private static final Timedelta RESTART_TIMEOUT = Timedelta.ofMinutes(1);\n\n    // These settings are needed to properly sign WDA for real device tests\n    // See https://github.com/appium/appium-xcuitest-driver for more details\n    private static final File KEYCHAIN = new File(String.format(\n%s/%s\n,\n            System.getProperty(\nuser.home\n), \n/Library/Keychains/MyKeychain.keychain\n));\n    private static final String KEYCHAIN_PASSWORD = \n******\n;\n\n    private static final File IPROXY_EXECUTABLE = new File(\n/usr/local/bin/iproxy\n);\n    private static final File XCODEBUILD_EXECUTABLE = new File(\n/usr/bin/xcodebuild\n);\n    private static final File WDA_PROJECT =\n            new File(\n/usr/local/lib/node_modules/appium/node_modules/appium-xcuitest-driver/\n +\n                    \nWebDriverAgent/WebDriverAgent.xcodeproj\n);\n    private static final String WDA_SCHEME = \nWebDriverAgentRunner\n;\n    private static final String WDA_CONFIGURATION = \nDebug\n;\n    private static final File XCODEBUILD_LOG = new File(\n/usr/local/var/log/appium/build.log\n);\n    private static final File IPROXY_LOG = new File(\n/usr/local/var/log/appium/iproxy.log\n);\n\n    private static final int PORT = 8100;\n    public static final String SERVER_URL = String.format(\nhttp://127.0.0.1:%d\n, PORT);\n\n    private static final String[] IPROXY_CMDLINE = new String[]{\n            IPROXY_EXECUTABLE.getAbsolutePath(),\n            Integer.toString(PORT),\n            Integer.toString(PORT),\n            String.format(\n %s 2\n1 \n, IPROXY_LOG.getAbsolutePath())\n    };\n\n    private static WDAServer instance = null;\n    private final boolean isRealDevice;\n    private final String deviceId;\n    private final String platformVersion;\n    private int failedRestartRetriesCount = 0;\n\n    private WDAServer() {\n        try {\n            this.isRealDevice = !getIsSimulatorFromConfig(getClass());\n            final String udid;\n            if (isRealDevice) {\n                udid = IOSRealDeviceHelpers.getUDID();\n            } else {\n                udid = IOSSimulatorHelpers.getId();\n            }\n            this.deviceId = udid;\n            this.platformVersion = getPlatformVersionFromConfig(getClass());\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n        ensureToolsExistence();\n        ensureParentDirExistence();\n    }\n\n    public synchronized static WDAServer getInstance() {\n        if (instance == null) {\n            instance = new WDAServer();\n        }\n        return instance;\n    }\n\n    private boolean waitUntilIsRunning(Timedelta timeout) throws Exception {\n        final URL status = new URL(SERVER_URL + \n/status\n);\n        try {\n            if (timeout.asSeconds() \n 5) {\n                log.debug(String.format(\nWaiting max %s until WDA server starts responding...\n, timeout));\n            }\n            new UrlChecker().waitUntilAvailable(timeout.asMillis(), TimeUnit.MILLISECONDS, status);\n            return true;\n        } catch (UrlChecker.TimeoutException e) {\n            return false;\n        }\n    }\n\n    private static void ensureParentDirExistence() {\n        if (!XCODEBUILD_LOG.getParentFile().exists()) {\n            if (!XCODEBUILD_LOG.getParentFile().mkdirs()) {\n                throw new IllegalStateException(String.format(\n                        \nThe script has failed to create '%s' folder for Appium logs. \n +\n                                \nPlease make sure your account has correct access permissions on the parent folder(s)\n,\n                        XCODEBUILD_LOG.getParentFile().getAbsolutePath()));\n            }\n        }\n    }\n\n    private void ensureToolsExistence() {\n        if (isRealDevice \n !IPROXY_EXECUTABLE.exists()) {\n            throw new IllegalStateException(String.format(\n%s tool is expected to be installed (`npm install -g iproxy`)\n,\n                    IPROXY_EXECUTABLE.getAbsolutePath()));\n        }\n        if (!XCODEBUILD_EXECUTABLE.exists()) {\n            throw new IllegalStateException(String.format(\nxcodebuild tool is not detected on the current system at %s\n,\n                    XCODEBUILD_EXECUTABLE.getAbsolutePath()));\n        }\n        if (!WDA_PROJECT.exists()) {\n            throw new IllegalStateException(String.format(\nWDA project is expected to exist at %s\n,\n                    WDA_PROJECT.getAbsolutePath()));\n        }\n    }\n\n    private List\nString\n generateXcodebuildCmdline() {\n        final List\nString\n result = new ArrayList\n();\n        result.add(XCODEBUILD_EXECUTABLE.getAbsolutePath());\n        result.add(\nclean build test\n);\n        result.add(String.format(\n-project %s\n, WDA_PROJECT.getAbsolutePath()));\n        result.add(String.format(\n-scheme %s\n, WDA_SCHEME));\n        result.add(String.format(\n-destination id=%s\n, deviceId));\n        result.add(String.format(\n-configuration %s\n, WDA_CONFIGURATION));\n        result.add(String.format(\nIPHONEOS_DEPLOYMENT_TARGET=%s\n, platformVersion));\n        result.add(String.format(\n %s 2\n1 \n, XCODEBUILD_LOG.getAbsolutePath()));\n        return result;\n    }\n\n    private static List\nString\n generateKeychainUnlockCmdlines() throws Exception {\n        final List\nString\n result = new ArrayList\n();\n        result.add(String.format(\n/usr/bin/security -v list-keychains -s %s\n, KEYCHAIN.getAbsolutePath()));\n        result.add(String.format(\n/usr/bin/security -v unlock-keychain -p %s %s\n,\n                KEYCHAIN_PASSWORD, KEYCHAIN.getAbsolutePath()));\n        result.add(String.format(\n/usr/bin/security set-keychain-settings -t 3600 %s\n, KEYCHAIN.getAbsolutePath()));\n        return result;\n    }\n\n    public synchronized void restart() throws Exception {\n        if (isRealDevice \n failedRestartRetriesCount \n= MAX_REAL_DEVICE_RESTART_RETRIES) {\n            throw new IllegalStateException(String.format(\n                    \nWDA server cannot start on the connected device with udid %s after %s retries. \n +\n                            \nReboot the device manually and try again\n, deviceId, MAX_REAL_DEVICE_RESTART_RETRIES));\n        }\n\n        final String hostname = InetAddress.getLocalHost().getHostName();\n        log.info(String.format(\nTrying to (re)start WDA server on %s:%s...\n, hostname, PORT));\n        UnixProcessHelpers.killProcessesGracefully(IPROXY_EXECUTABLE.getName(), XCODEBUILD_EXECUTABLE.getName());\n\n        final File scriptFile = File.createTempFile(\nscript\n, \n.sh\n);\n        try {\n            final List\nString\n scriptContent = new ArrayList\n();\n            scriptContent.add(\n#!/bin/bash\n);\n            if (isRealDevice \n isRunningInJenkinsNetwork()) {\n                scriptContent.add(String.join(\n\\n\n, generateKeychainUnlockCmdlines()));\n            }\n            if (isRealDevice) {\n                scriptContent.add(String.join(\n \n, IPROXY_CMDLINE));\n            }\n            final String wdaBuildCmdline = String.join(\n \n, generateXcodebuildCmdline());\n            log.debug(String.format(\nBuilding WDA with command line:\\n%s\\n\n, wdaBuildCmdline));\n            scriptContent.add(wdaBuildCmdline);\n            try (Writer output = new BufferedWriter(new FileWriter(scriptFile))) {\n                output.write(String.join(\n\\n\n, scriptContent));\n            }\n            new ProcessBuilder(\n/bin/chmod\n, \nu+x\n, scriptFile.getCanonicalPath())\n                    .redirectErrorStream(true).start().waitFor(5, TimeUnit.SECONDS);\n            final ProcessBuilder pb = new ProcessBuilder(\n/bin/bash\n, scriptFile.getCanonicalPath());\n            final Map\nString, String\n env = pb.environment();\n            // This is needed for Jenkins\n            env.put(\nBUILD_ID\n, \ndontKillMe\n);\n            // This line is important. If USE_PORT environment variable is not set then WDA\n            // takes port number zero by default and won't accept any incoming requests\n            env.put(\nUSE_PORT\n, Integer.toString(PORT));\n            log.info(String.format(\nWaiting max %s for WDA to be (re)started on %s:%s...\n, RESTART_TIMEOUT.toString(),\n                    hostname, PORT));\n            final Timedelta started = Timedelta.now();\n            pb.redirectErrorStream(true).start().waitFor(RESTART_TIMEOUT.asMillis(), TimeUnit.MILLISECONDS);\n            if (!waitUntilIsRunning(RESTART_TIMEOUT)) {\n                ++failedRestartRetriesCount;\n                throw new IllegalStateException(\n                        String.format(\nWDA server has failed to start after %s timeout on server '%s'.\\n\n\n                                        + \nPlease make sure that iDevice is properly connected and you can build \n\n                                        + \nWDA manually from XCode.\\n\n\n                                        + \nXcodebuild logs:\\n\\n%s\\n\\n\\niproxy logs:\\n\\n%s\\n\\n\\n\n,\n                                RESTART_TIMEOUT, hostname,\n                                getLog(XCODEBUILD_LOG).orElse(\nEMPTY\n), getLog(IPROXY_LOG).orElse(\nEMPTY\n))\n                );\n            }\n\n            log.info(String.format(\nWDA server has been successfully (re)started after %s \n +\n                    \nand now is listening on %s:%s\n, Timedelta.now().diff(started).toString(), hostname, PORT));\n        } finally {\n            scriptFile.delete();\n        }\n    }\n\n    public boolean isRunning() throws Exception {\n        if (!isProcessRunning(XCODEBUILD_EXECUTABLE.getName())\n                || (isRealDevice \n !isProcessRunning(IPROXY_EXECUTABLE.getName()))) {\n            return false;\n        }\n        return waitUntilIsRunning(isRealDevice ? REAL_DEVICE_RUNNING_TIMEOUT : Timedelta.ofSeconds(3));\n    }\n\n    public Optional\nString\n getLog(File logFile) {\n        if (logFile.exists()) {\n            try {\n                return Optional.of(new String(Files.readAllBytes(logFile.toPath()), Charset.forName(\nUTF-8\n)));\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        return Optional.empty();\n    }\n}\n\n\n\n\nOne should call this piece of code before to start Appium iOS driver, for example, in setUp method:\n\n\n   if (!WDAServer.getInstance().isRunning()) {\n       WDAServer.getInstance().restart();\n   }\n\n\n\n\nIt is important to set \nwebDriverAgentUrl\n capability for Appium driver to let it know\nthat our WDA driver is ready for use:\n\n\n    capabilities.setCapability(\nwebDriverAgentUrl\n, WDAServer.SERVER_URL);\n\n\n\n\nImportant Notes\n\n\n\n\nThe process does not have direct access to keychain if it is executed by Jenkins agent,\n so we need to prepare keychain before compiling WDA for real device, otherwise codesigning will fail\n\n\nWe kill xcodebuild and iproxy processes before restart to make sure compilation succeeds even\n if these are frozen\n\n\nWe prepare a separate bash script and detach iproxy/xcodebuild processes, so they can continue\n running in background even after the actual code execution is finished. This is extremely important\n if multiple tests/suites are executed on the same machine/node in automation lab, which requires minimum\n human interaction\n\n\nThe value of \nBUILD_ID\n environment variable is changed to avoid killing of the background process\n by Jenkins agent after the job is finished\n\n\nisRunning\n check is done by verifying the actual network endpoint\n\n\nThe output of daemonized processes is logged, so it is possible to track errors and unexpected failures.\n The content of the log files is automatically added to the actual error message if the server fails to (re)start.\n\n\nReal device id can be parsed from \nsystem_profiler SPUSBDataType\n output\n\n\nSimulator id can be parsed from \nxcrun simctl list\n output\n\n\nUrlChecker\n class is imported from org.openqa.selenium.net package", 
            "title": "Wda custom server"
        }, 
        {
            "location": "/advanced/wda-custom-server/#how-to-set-up-and-customize-webdriveragent-server", 
            "text": "Appium for iOS uses  Facebook's WebDriverAgent \nas the automation backend. This backend is based on Apple's XCTest framework and shares all the\nknown problem that are present in XCTest. For some of them we have workarounds, but there\nare some that are hardly possible to workaround, for example https://github.com/facebook/WebDriverAgent/issues/507.\nThe approach described in this article enables you to have full control over how WDA is built, managed,\nand run on the device. This way you may fine-tune your automated tests in CI environment and make them more stable in\nlong-running perspective.  Important points:\n * The steps below are not necessary if default Appium capabilites are used.\n The server will do everything for you, however you won't have so much control over WDA.\n * It is mandatory to have SSH or physical access to the machine to which the device under test\n is connected.", 
            "title": "How To Set Up And Customize WebDriverAgent Server"
        }, 
        {
            "location": "/advanced/wda-custom-server/#wda-setup", 
            "text": "WebDriverAgent source is automically downloaded with Appium. The usual folder location\nin case Appium is installed via npm tool ( npm install -g appium ) is\n/usr/local/lib/node_modules/appium/node_modules/appium-xcuitest-driver/WebDriverAgent\nIf this was a fresh install then it is also necessary to download third-party dependencies\n( carthage  tool is mandatory for this purpose:  brew install carthage ):  cd /usr/local/lib/node_modules/appium/node_modules/appium-xcuitest-driver/WebDriverAgent\n./Scripts/bootstrap.sh -d  Also, it might be necessary to create an empty folder for WDA resources:  mkdir -p /usr/local/lib/node_modules/appium/node_modules/appium-xcuitest-driver/WebDriverAgent/Resources/WebDriverAgent.bundle  No futher confuguration steps are needed if you're going to execute your automated tests on\niOS Simulator.  Real device, however, requires some more work to be done. Follow real device configuration documentation \nto setup code signing. Also, you'll need to have iproxy tool installed:  npm install -g iproxy  In order to make sure that WDA source is configured properly:   Open /usr/local/lib/node_modules/appium/node_modules/appium-xcuitest-driver/WebDriverAgent/WebDriverAgent.xcodeproj\nin Xcode  Select  WebDriverAgentRunner  project  Select your real phone/Simulator you'd like to run automated tests on as build target  Select Product- Test from the main menu   Xcode should successfully build the project and install it on the real device/Simulator,\nso you'll see the icon of WebDriverAgentRunner application on the springboard.", 
            "title": "WDA Setup"
        }, 
        {
            "location": "/advanced/wda-custom-server/#wda-startup", 
            "text": "WebDriverAgent application acts as a REST server, which proxies external API requests to native XCTest calls\nfor your application under test. The server address will be  localhost  if you run your tests on Simulator\nor the actual phone IP address in case of real device. We use  iproxy  to route network\nrequests to a real device from  localhost  via USB, which means one can use this tool to unify\nWDA network address for Simulator and for real device.  This helper class written in Java illustrates the main implementation details:  public class WDAServer {\n    private static final Logger log = ZLogger.getLog(WDAServer.class.getSimpleName());\n\n    private static final int MAX_REAL_DEVICE_RESTART_RETRIES = 1;\n    private static final Timedelta REAL_DEVICE_RUNNING_TIMEOUT = Timedelta.ofMinutes(4);\n    private static final Timedelta RESTART_TIMEOUT = Timedelta.ofMinutes(1);\n\n    // These settings are needed to properly sign WDA for real device tests\n    // See https://github.com/appium/appium-xcuitest-driver for more details\n    private static final File KEYCHAIN = new File(String.format( %s/%s ,\n            System.getProperty( user.home ),  /Library/Keychains/MyKeychain.keychain ));\n    private static final String KEYCHAIN_PASSWORD =  ****** ;\n\n    private static final File IPROXY_EXECUTABLE = new File( /usr/local/bin/iproxy );\n    private static final File XCODEBUILD_EXECUTABLE = new File( /usr/bin/xcodebuild );\n    private static final File WDA_PROJECT =\n            new File( /usr/local/lib/node_modules/appium/node_modules/appium-xcuitest-driver/  +\n                     WebDriverAgent/WebDriverAgent.xcodeproj );\n    private static final String WDA_SCHEME =  WebDriverAgentRunner ;\n    private static final String WDA_CONFIGURATION =  Debug ;\n    private static final File XCODEBUILD_LOG = new File( /usr/local/var/log/appium/build.log );\n    private static final File IPROXY_LOG = new File( /usr/local/var/log/appium/iproxy.log );\n\n    private static final int PORT = 8100;\n    public static final String SERVER_URL = String.format( http://127.0.0.1:%d , PORT);\n\n    private static final String[] IPROXY_CMDLINE = new String[]{\n            IPROXY_EXECUTABLE.getAbsolutePath(),\n            Integer.toString(PORT),\n            Integer.toString(PORT),\n            String.format(  %s 2 1  , IPROXY_LOG.getAbsolutePath())\n    };\n\n    private static WDAServer instance = null;\n    private final boolean isRealDevice;\n    private final String deviceId;\n    private final String platformVersion;\n    private int failedRestartRetriesCount = 0;\n\n    private WDAServer() {\n        try {\n            this.isRealDevice = !getIsSimulatorFromConfig(getClass());\n            final String udid;\n            if (isRealDevice) {\n                udid = IOSRealDeviceHelpers.getUDID();\n            } else {\n                udid = IOSSimulatorHelpers.getId();\n            }\n            this.deviceId = udid;\n            this.platformVersion = getPlatformVersionFromConfig(getClass());\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n        ensureToolsExistence();\n        ensureParentDirExistence();\n    }\n\n    public synchronized static WDAServer getInstance() {\n        if (instance == null) {\n            instance = new WDAServer();\n        }\n        return instance;\n    }\n\n    private boolean waitUntilIsRunning(Timedelta timeout) throws Exception {\n        final URL status = new URL(SERVER_URL +  /status );\n        try {\n            if (timeout.asSeconds()   5) {\n                log.debug(String.format( Waiting max %s until WDA server starts responding... , timeout));\n            }\n            new UrlChecker().waitUntilAvailable(timeout.asMillis(), TimeUnit.MILLISECONDS, status);\n            return true;\n        } catch (UrlChecker.TimeoutException e) {\n            return false;\n        }\n    }\n\n    private static void ensureParentDirExistence() {\n        if (!XCODEBUILD_LOG.getParentFile().exists()) {\n            if (!XCODEBUILD_LOG.getParentFile().mkdirs()) {\n                throw new IllegalStateException(String.format(\n                         The script has failed to create '%s' folder for Appium logs.   +\n                                 Please make sure your account has correct access permissions on the parent folder(s) ,\n                        XCODEBUILD_LOG.getParentFile().getAbsolutePath()));\n            }\n        }\n    }\n\n    private void ensureToolsExistence() {\n        if (isRealDevice   !IPROXY_EXECUTABLE.exists()) {\n            throw new IllegalStateException(String.format( %s tool is expected to be installed (`npm install -g iproxy`) ,\n                    IPROXY_EXECUTABLE.getAbsolutePath()));\n        }\n        if (!XCODEBUILD_EXECUTABLE.exists()) {\n            throw new IllegalStateException(String.format( xcodebuild tool is not detected on the current system at %s ,\n                    XCODEBUILD_EXECUTABLE.getAbsolutePath()));\n        }\n        if (!WDA_PROJECT.exists()) {\n            throw new IllegalStateException(String.format( WDA project is expected to exist at %s ,\n                    WDA_PROJECT.getAbsolutePath()));\n        }\n    }\n\n    private List String  generateXcodebuildCmdline() {\n        final List String  result = new ArrayList ();\n        result.add(XCODEBUILD_EXECUTABLE.getAbsolutePath());\n        result.add( clean build test );\n        result.add(String.format( -project %s , WDA_PROJECT.getAbsolutePath()));\n        result.add(String.format( -scheme %s , WDA_SCHEME));\n        result.add(String.format( -destination id=%s , deviceId));\n        result.add(String.format( -configuration %s , WDA_CONFIGURATION));\n        result.add(String.format( IPHONEOS_DEPLOYMENT_TARGET=%s , platformVersion));\n        result.add(String.format(  %s 2 1  , XCODEBUILD_LOG.getAbsolutePath()));\n        return result;\n    }\n\n    private static List String  generateKeychainUnlockCmdlines() throws Exception {\n        final List String  result = new ArrayList ();\n        result.add(String.format( /usr/bin/security -v list-keychains -s %s , KEYCHAIN.getAbsolutePath()));\n        result.add(String.format( /usr/bin/security -v unlock-keychain -p %s %s ,\n                KEYCHAIN_PASSWORD, KEYCHAIN.getAbsolutePath()));\n        result.add(String.format( /usr/bin/security set-keychain-settings -t 3600 %s , KEYCHAIN.getAbsolutePath()));\n        return result;\n    }\n\n    public synchronized void restart() throws Exception {\n        if (isRealDevice   failedRestartRetriesCount  = MAX_REAL_DEVICE_RESTART_RETRIES) {\n            throw new IllegalStateException(String.format(\n                     WDA server cannot start on the connected device with udid %s after %s retries.   +\n                             Reboot the device manually and try again , deviceId, MAX_REAL_DEVICE_RESTART_RETRIES));\n        }\n\n        final String hostname = InetAddress.getLocalHost().getHostName();\n        log.info(String.format( Trying to (re)start WDA server on %s:%s... , hostname, PORT));\n        UnixProcessHelpers.killProcessesGracefully(IPROXY_EXECUTABLE.getName(), XCODEBUILD_EXECUTABLE.getName());\n\n        final File scriptFile = File.createTempFile( script ,  .sh );\n        try {\n            final List String  scriptContent = new ArrayList ();\n            scriptContent.add( #!/bin/bash );\n            if (isRealDevice   isRunningInJenkinsNetwork()) {\n                scriptContent.add(String.join( \\n , generateKeychainUnlockCmdlines()));\n            }\n            if (isRealDevice) {\n                scriptContent.add(String.join(   , IPROXY_CMDLINE));\n            }\n            final String wdaBuildCmdline = String.join(   , generateXcodebuildCmdline());\n            log.debug(String.format( Building WDA with command line:\\n%s\\n , wdaBuildCmdline));\n            scriptContent.add(wdaBuildCmdline);\n            try (Writer output = new BufferedWriter(new FileWriter(scriptFile))) {\n                output.write(String.join( \\n , scriptContent));\n            }\n            new ProcessBuilder( /bin/chmod ,  u+x , scriptFile.getCanonicalPath())\n                    .redirectErrorStream(true).start().waitFor(5, TimeUnit.SECONDS);\n            final ProcessBuilder pb = new ProcessBuilder( /bin/bash , scriptFile.getCanonicalPath());\n            final Map String, String  env = pb.environment();\n            // This is needed for Jenkins\n            env.put( BUILD_ID ,  dontKillMe );\n            // This line is important. If USE_PORT environment variable is not set then WDA\n            // takes port number zero by default and won't accept any incoming requests\n            env.put( USE_PORT , Integer.toString(PORT));\n            log.info(String.format( Waiting max %s for WDA to be (re)started on %s:%s... , RESTART_TIMEOUT.toString(),\n                    hostname, PORT));\n            final Timedelta started = Timedelta.now();\n            pb.redirectErrorStream(true).start().waitFor(RESTART_TIMEOUT.asMillis(), TimeUnit.MILLISECONDS);\n            if (!waitUntilIsRunning(RESTART_TIMEOUT)) {\n                ++failedRestartRetriesCount;\n                throw new IllegalStateException(\n                        String.format( WDA server has failed to start after %s timeout on server '%s'.\\n \n                                        +  Please make sure that iDevice is properly connected and you can build  \n                                        +  WDA manually from XCode.\\n \n                                        +  Xcodebuild logs:\\n\\n%s\\n\\n\\niproxy logs:\\n\\n%s\\n\\n\\n ,\n                                RESTART_TIMEOUT, hostname,\n                                getLog(XCODEBUILD_LOG).orElse( EMPTY ), getLog(IPROXY_LOG).orElse( EMPTY ))\n                );\n            }\n\n            log.info(String.format( WDA server has been successfully (re)started after %s   +\n                     and now is listening on %s:%s , Timedelta.now().diff(started).toString(), hostname, PORT));\n        } finally {\n            scriptFile.delete();\n        }\n    }\n\n    public boolean isRunning() throws Exception {\n        if (!isProcessRunning(XCODEBUILD_EXECUTABLE.getName())\n                || (isRealDevice   !isProcessRunning(IPROXY_EXECUTABLE.getName()))) {\n            return false;\n        }\n        return waitUntilIsRunning(isRealDevice ? REAL_DEVICE_RUNNING_TIMEOUT : Timedelta.ofSeconds(3));\n    }\n\n    public Optional String  getLog(File logFile) {\n        if (logFile.exists()) {\n            try {\n                return Optional.of(new String(Files.readAllBytes(logFile.toPath()), Charset.forName( UTF-8 )));\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        return Optional.empty();\n    }\n}  One should call this piece of code before to start Appium iOS driver, for example, in setUp method:     if (!WDAServer.getInstance().isRunning()) {\n       WDAServer.getInstance().restart();\n   }  It is important to set  webDriverAgentUrl  capability for Appium driver to let it know\nthat our WDA driver is ready for use:      capabilities.setCapability( webDriverAgentUrl , WDAServer.SERVER_URL);", 
            "title": "WDA Startup"
        }, 
        {
            "location": "/advanced/wda-custom-server/#important-notes", 
            "text": "The process does not have direct access to keychain if it is executed by Jenkins agent,\n so we need to prepare keychain before compiling WDA for real device, otherwise codesigning will fail  We kill xcodebuild and iproxy processes before restart to make sure compilation succeeds even\n if these are frozen  We prepare a separate bash script and detach iproxy/xcodebuild processes, so they can continue\n running in background even after the actual code execution is finished. This is extremely important\n if multiple tests/suites are executed on the same machine/node in automation lab, which requires minimum\n human interaction  The value of  BUILD_ID  environment variable is changed to avoid killing of the background process\n by Jenkins agent after the job is finished  isRunning  check is done by verifying the actual network endpoint  The output of daemonized processes is logged, so it is possible to track errors and unexpected failures.\n The content of the log files is automatically added to the actual error message if the server fails to (re)start.  Real device id can be parsed from  system_profiler SPUSBDataType  output  Simulator id can be parsed from  xcrun simctl list  output  UrlChecker  class is imported from org.openqa.selenium.net package", 
            "title": "Important Notes"
        }, 
        {
            "location": "/contributing/appium-from-source/", 
            "text": "Running Appium from Source\n\n\nSo you want to run Appium from source and help fix bugs and add features?\nGreat! Just fork the project, make a change, and send a pull request! Please\nhave a look at our \nStyle Guide\n before getting to work.\nPlease make sure the unit and functional tests pass before sending a pull\nrequest; for more information on how to run tests, keep reading!\n\n\nMake sure you read and follow the setup instructions in the README first.\n\n\nSetting up Appium from Source\n\n\nAn Appium setup involves the Appium server, which sends messages back and forth\nbetween your test code and devices/emulators, and a test script, written in\nwhatever language binding exists that is compatible with Appium. Run an\ninstance of an Appium server, and then run your test.\n\n\nThe quick way to get started:\n\n\ngit clone https://github.com/appium/appium.git\ncd appium\nnpm install\ngulp transpile # requires gulp, see below\nnpm install -g authorize-ios # for ios only\nauthorize-ios                # for ios only\nnode .\n\n\n\n\nHacking on Appium\n\n\nMake sure you have \nant\n, \nmaven\n, \nadb\n installed and added to system \nPATH\n, also you\nwould need the android-16 sdk (for Selendroid) and android-19 sdk installed.\nFrom your local repo's command prompt, install the following packages using the\nfollowing commands (if you didn't install \nnode\n using Homebrew, you might have\nto run \nnpm\n with sudo privileges):\n\n\nnpm install -g mocha\nnpm install -g gulp\nnpm install -g gulp-cli\nnpm install -g appium-doctor \n appium-doctor --dev\nnpm install\ngulp transpile\n\n\n\n\nThe first two commands install test and build tools (\nsudo\n may not be\nnecessary if you installed node.js via Homebrew). The third command verifies\nthat all of the dependencies are set up correctly (since dependencies for\nbuilding Appium are different from those for simply running Appium) and fourth\ncommand installs all app dependencies and builds supporting binaries and test\napps. The final command transpiles all the code so that \nnode\n can run it.\n\n\nWhen pulling new code from GitHub, if there are changes to \npackage.json\n it\nis necessary to remove the old dependencies and re-run \nnpm install\n:\n\n\nrm -rf node_modules\nnpm install\ngulp transpile\n\n\n\n\nAt this point, you will be able to start the Appium server:\n\n\nnode .\n\n\n\n\nSee \nthe server documentation\n\nfor a full list of arguments.\n\n\nHacking with Appium for iOS\n\n\nTo avoid a security dialog that may appear when launching your iOS apps you'll\nhave to modify your \n/etc/authorization\n file in one of two ways:\n\n\n\n\n\n\nManually modify the element following \nallow-root\n under \nkey\nsystem.privilege.taskport\n/key\n\n   in your \n/etc/authorization\n file to \ntrue/\n.\n\n\n\n\n\n\nRun the following command which automatically modifies your\n   \n/etc/authorization\n file for you:\n\n\ncenter\nnpm install -g authorize-ios\nsudo authorize-ios\n\n\n\n\n\n\nAt this point, run:\n\n\nrm -rf node-modules\nnpm install\ngulp transpile\n\n\n\n\nNow your Appium instance is ready to go. Run \nnode .\n to kick up the Appium server.\n\n\nHacking with Appium for Android\n\n\nSet up Appium by running:\n\n\nrm -rf node-modules\nnpm install\ngulp transpile\n\n\n\n\nMake sure you have one and only one Android emulator or device running, e.g.,\nby running this command in another process (assuming the \nemulator\n command is\non your path):\n\n\nemulator -avd \nMyAvdName\n\n\n\n\n\nNow you are ready to run the Appium server via \nnode .\n.\n\n\nMaking sure you're up to date\n\n\nSince Appium uses dev versions of some packages, it often becomes necessary to\ninstall new \nnpm\n packages or update various things. Running \nnpm install\n will\nupdate everything necessary. You will also need to do this when Appium bumps\nits version up. Prior to running \nnpm install\n it is recommended to remove\nall the old dependencies in the \nnode_modules\n directory:\n\n\nrm -rf node-modules\nnpm install\ngulp transpile\n\n\n\n\nRunning Tests\n\n\nFirst, check out our documentation on \nrunning tests in\ngeneral\n Make sure your\nsystem is set up properly for the platforms you desire to test on.\n\n\nOnce your system is set up and your code is up to date, you can run unit tests\nwith:\n\n\ngulp once\n\n\n\n\nYou can run functional tests for all supported platforms (after ensuring that\nAppium is running in another window with \nnode .\n) with:\n\n\ngulp e2e-test\n\n\n\n\nBefore committing code, please run \ngulp once\n to execute some basic tests and\ncheck your changes against code quality standards.", 
            "title": "Appium from source"
        }, 
        {
            "location": "/contributing/appium-from-source/#running-appium-from-source", 
            "text": "So you want to run Appium from source and help fix bugs and add features?\nGreat! Just fork the project, make a change, and send a pull request! Please\nhave a look at our  Style Guide  before getting to work.\nPlease make sure the unit and functional tests pass before sending a pull\nrequest; for more information on how to run tests, keep reading!  Make sure you read and follow the setup instructions in the README first.", 
            "title": "Running Appium from Source"
        }, 
        {
            "location": "/contributing/appium-from-source/#setting-up-appium-from-source", 
            "text": "An Appium setup involves the Appium server, which sends messages back and forth\nbetween your test code and devices/emulators, and a test script, written in\nwhatever language binding exists that is compatible with Appium. Run an\ninstance of an Appium server, and then run your test.  The quick way to get started:  git clone https://github.com/appium/appium.git\ncd appium\nnpm install\ngulp transpile # requires gulp, see below\nnpm install -g authorize-ios # for ios only\nauthorize-ios                # for ios only\nnode .", 
            "title": "Setting up Appium from Source"
        }, 
        {
            "location": "/contributing/appium-from-source/#hacking-on-appium", 
            "text": "Make sure you have  ant ,  maven ,  adb  installed and added to system  PATH , also you\nwould need the android-16 sdk (for Selendroid) and android-19 sdk installed.\nFrom your local repo's command prompt, install the following packages using the\nfollowing commands (if you didn't install  node  using Homebrew, you might have\nto run  npm  with sudo privileges):  npm install -g mocha\nnpm install -g gulp\nnpm install -g gulp-cli\nnpm install -g appium-doctor   appium-doctor --dev\nnpm install\ngulp transpile  The first two commands install test and build tools ( sudo  may not be\nnecessary if you installed node.js via Homebrew). The third command verifies\nthat all of the dependencies are set up correctly (since dependencies for\nbuilding Appium are different from those for simply running Appium) and fourth\ncommand installs all app dependencies and builds supporting binaries and test\napps. The final command transpiles all the code so that  node  can run it.  When pulling new code from GitHub, if there are changes to  package.json  it\nis necessary to remove the old dependencies and re-run  npm install :  rm -rf node_modules\nnpm install\ngulp transpile  At this point, you will be able to start the Appium server:  node .  See  the server documentation \nfor a full list of arguments.", 
            "title": "Hacking on Appium"
        }, 
        {
            "location": "/contributing/appium-from-source/#hacking-with-appium-for-ios", 
            "text": "To avoid a security dialog that may appear when launching your iOS apps you'll\nhave to modify your  /etc/authorization  file in one of two ways:    Manually modify the element following  allow-root  under  key system.privilege.taskport /key \n   in your  /etc/authorization  file to  true/ .    Run the following command which automatically modifies your\n    /etc/authorization  file for you:  center\nnpm install -g authorize-ios\nsudo authorize-ios    At this point, run:  rm -rf node-modules\nnpm install\ngulp transpile  Now your Appium instance is ready to go. Run  node .  to kick up the Appium server.", 
            "title": "Hacking with Appium for iOS"
        }, 
        {
            "location": "/contributing/appium-from-source/#hacking-with-appium-for-android", 
            "text": "Set up Appium by running:  rm -rf node-modules\nnpm install\ngulp transpile  Make sure you have one and only one Android emulator or device running, e.g.,\nby running this command in another process (assuming the  emulator  command is\non your path):  emulator -avd  MyAvdName   Now you are ready to run the Appium server via  node . .", 
            "title": "Hacking with Appium for Android"
        }, 
        {
            "location": "/contributing/appium-from-source/#making-sure-youre-up-to-date", 
            "text": "Since Appium uses dev versions of some packages, it often becomes necessary to\ninstall new  npm  packages or update various things. Running  npm install  will\nupdate everything necessary. You will also need to do this when Appium bumps\nits version up. Prior to running  npm install  it is recommended to remove\nall the old dependencies in the  node_modules  directory:  rm -rf node-modules\nnpm install\ngulp transpile", 
            "title": "Making sure you're up to date"
        }, 
        {
            "location": "/contributing/appium-from-source/#running-tests", 
            "text": "First, check out our documentation on  running tests in\ngeneral  Make sure your\nsystem is set up properly for the platforms you desire to test on.  Once your system is set up and your code is up to date, you can run unit tests\nwith:  gulp once  You can run functional tests for all supported platforms (after ensuring that\nAppium is running in another window with  node . ) with:  gulp e2e-test  Before committing code, please run  gulp once  to execute some basic tests and\ncheck your changes against code quality standards.", 
            "title": "Running Tests"
        }, 
        {
            "location": "/contributing/appium-packages/", 
            "text": "Appium in a Nutshell\n\n\n\n\nappium\n\n\n\n\nruns basic checks\n\n\nnode version (\n= 4)\n\n\nCLI arguments checks\n\n\ncontains all available and supported CLI arguments\n\n\ncheck for deprecation and mutual exclusion\n\n\n\n\n\n\nput logging together\n\n\nmixture out of npmlog, winston and a custom logger\n\n\ninitiates AppiumDriver (extends Basedriver)\n\n\nassigns iOS/Android/Selendroid/Fake driver to session\n\n\ncreates/deletes Appium session\n\n\nstarts baseServer (appium-express)\n\n\npasses routes given by driver\n\n\n\n\nappium-express (part of appium-base-driver)\n\n\n\n\nstarts express server (allows x-domain-origin)\n\n\ninitialises routes from AppiumDriver\n\n\ntimeout handling\n\n\nserves a static page for test purposes\n\n\nconnects req/res events to logger\n\n\n\n\nmobile-json-wire-protocol (part of appium-base-driver)\n\n\n\n\nprovides list of Appium commands\n\n\nsubclassed by drivers that will use the protocol\n\n\nkind of middleware between client and driver\n\n\nhandles jwp proxy for driver\n\n\ncontains error classes for all types of errors\n\n\nsanitises error responses\n\n\n(un)wraps params to commands\n\n\nchecks required params, validates params\n\n\n\n\nappium-base-driver\n\n\n\n\ndesigned to have a single testing session per instantiation\n\n\ncontains constraints on caps (platformName has to be present, etc)\n\n\nvalidates capabilities\n\n\nruns chain of promised commands with single concurrency\n\n\nhandles session restart\n\n\nhandles swipe options\n\n\nexports class (DeviceSettings) to manage device settings (get/update)\n\n\ncontains basic commands\n\n\nto find elements\n\n\ncreate/delete sessions\n\n\nhandle timeouts\n\n\nset/update device settings\n\n\nprovides helper methods for commands\n\n\n\n\nappium-ios-driver\n\n\n\n\ncan also run as standalone server (has a small server part that extends from appium-express)\n\n\nsupported strategies: \"name\", \"xpath\", \"id\", \"-ios uiautomation\", \"class name\", \"accessibility id\u201d\n\n\ncan start a simulator or a real device (if udid is given)\n\n\nruns for each type a huge set of instructions\n\n\nremoveInstrumentsSocket\n\n\nsetBundleIdFromApp\n\n\ncreateInstruments\n\n\nrunSimReset, isolateSimDevice, setLocale || runRealDeviceReset\n\n\nsetPreferences || runRealDeviceReset\n\n\nstartLogCapture\n\n\nprelaunchSimulator || (noop)\n\n\nstartInstruments\n\n\nonInstrumentsLaunch\n\n\nconfigureBootstrap\n\n\nsetBundleId\n\n\nsetInitialOrientation\n\n\ninitAutoWebview\n\n\nwaitForAppLaunched\n\n\n\n\n\n\nall instructions are helper methods within driver.js\n\n\ncontains a more specific set of capability constraints\n\n\nhas logic to build and run Safari (safari-launcher) using appium-xcode\n\n\nimplements commands for iOS driver\n\n\nSelenium commands are compiled to ui-automator commands\n\n\ncommands will be send out to uiAutoClient (appium-uiauto)\n\n\nconnects to appium remote debugger\n\n\n\n\nappium-xcode\n\n\n\n\nruns shell commands to return useful data from Xcode like\n\n\ngetPath\n\n\ngetVersion\n\n\ngetAutomationTraceTemplatePath\n\n\ngetMaxIOSSDK\n\n\n\u2026\n\n\nhas an auto-retry built in\n\n\n\n\nappium-uiauto\n\n\n\n\nwrapper for the iOS UI Automation framework\n\n\ntalks to it via socket connection\n\n\nruns a command queue that get filled up by the sendCommand function\n\n\nhandles responses (as a buffer) from the ui-automation framework\n\n\nuses osascript to rotate screenshots\n\n\nprovides method to bootstrap simulator/realdevice (dynamic-bootstrap)\n\n\njavascript files which are run in the iOS UI Automation context (not node)\n\n\nresponsible to execute actual iOS UI Automation commands\n\n\nsee \nUIAutomation docs\n\n\ncommand flow is like\n\n\nWebdriver command -\n iOS driver command -\n uiauto-command\n\n\n\n\n\n\n\n\nappium-instruments\n\n\n\n\nwrapper to run instruments commands\n\n\na lot of exec calls to talk to instruments binary\n\n\nall of them take callbacks to propagate the result\n\n\nuses \"iwd\" (instruments without delay) packages which have to be compiled first\n\n\nspecial Instruments package that gets rid of a delay between commands\n\n\ncontains also older versions of iwd instrument (v4 - v7)\n\n\n\n\nappium-ios-log\n\n\n\n\ncaptures console, performance and crash logs from the iOS simulator or real device\n\n\nby either calling tail to grab logs from a system path (simulator devices)\n\n\nor by calling deviceconsole (real devices)\n\n\nperformance logs are getting grabbed using the remote-debugger\n\n\ncrash logs remain in \u201c.crash\u201d files on the system\n\n\n\n\nappium-ios-simulator\n\n\n\n\nwrapper around iOS simulator app\n\n\nstart and shutdown (kill all) simulators\n\n\nupdating settings and locals\n\n\nupdate/clean safari\n\n\ngrabs meta data about the simulator device\n\n\nuses simctl to talk to the simulator\n\n\nworks for Xcode 6 and 7\n\n\n\n\nauthorize-ios\n\n\n\n\nutility that pre-authorizes Instruments to run UIAutomation scripts against iOS devices\n\n\nenables developer tools by calling \u201cDevToolsSecurity \u2014enable\u201d\n\n\nauthorises user as developer calling \u201cauthorizationdb\"\n\n\nchanges ownerships of simulator directories\n\n\n\n\nnode-simctl\n\n\n\n\nwrapper around simctl binary (cli utility to control an iOS simulator)\n\n\nexecuted as a subcommand of xcrun (locate or invoke developer tools from the command-line)\n\n\ncontains functions to\n\n\ninstall/remove apps\n\n\nlaunch and shutdown simulators\n\n\ncreate/erase/delete devices\n\n\nget list of devices\n\n\n\n\nappium-cookies\n\n\n\n\nsimple package to create and receive cookies\n\n\nused in the appium-ios-driver to implement jswonwire cookie commands within the web context\n\n\n\n\nappium-chromedriver\n\n\n\n\nwrapper around the chrome driver\n\n\ndownloads and installs chromedriver binaries\n\n\nlaunches, restarts and stops (or kills all) chrome instances\n\n\nuses appium-jsonwp-proxy to send json wire protocol commands to the driver\n\n\n\n\njsonwp-proxy (part of appium-base-driver)\n\n\n\n\nallows to send json wire protocol commands to a server that understands it (browser drivers)\n\n\nparses response into json\n\n\nallows to proxy requests to a proxied server\n\n\nused for communication in appium-chromedriver and appium-selendroid-driver\n\n\n\n\nappium-android-driver\n\n\n\n\nsimilar to appium-ios-driver it can run as standalone server\n\n\nautomates native, hybrid and mobile web apps on emulators/simulators and real devices\n\n\ntakes care of installing android packages to the device\n\n\nruns chromedriver sessions if desired\n\n\ncontains a more specific set of capability constraints\n\n\nuses appium-adb to talk to the emulator/simulator/realdevice\n\n\nand appium-android-bootstrap to execute the actual commands\n\n\ncontains helpers to figure out which web view belongs to which app package vice versa\n\n\n\n\nappium-adb\n\n\n\n\nwrapper around the Android Debug Bridge (adb)\n\n\ncontains a bunch of commands that are basically just rpc to the adb binary\n\n\nhouses jar files to run for special use cases like signing, verifying apps or moving manifests\n\n\nallows special (mobile specific) emulator commands that are not related to the webdriver protocol like\n\n\nlocking the screen\n\n\npress back button\n\n\npress home button\n\n\nset/get airplane mode\n\n\nset/get wifi state\n\n\ncaptures logcat\n\n\nhandles emulator/simulator actions (e.g. reboot)\n\n\n\n\nappium-android-bootstrap\n\n\n\n\nJavaScript interface, and Java code, for interacting with Android UI Automator\n\n\nbuilds AppiumBootstrap.jar that contains logic to execute the commands\n\n\ncounterpart to appium-uiauto\n\n\nonce started it creates a web socket connection to the device\n\n\napplication provides start/shutdown/sendCommand interface\n\n\ncommand flow is like:\n\n\nSelenium command -\n appium-adb -\n appium-android-bootstrap -\n Java code using the Android UI Automator framework\n\n\n\n\nappium-uiautomator\n\n\n\n\nstarts and shutdowns uiautomator server given by appium-android-bootstrap jar build\n\n\ncommand flow is like\n\n\nappium-android-bootstrap:start -\n appium-uiautomator:start -\n appium-adb:install bootstrap\n\n\n\n\nappium-selendroid-driver\n\n\n\n\nsimilar to appium-android-driver it can run as standalone server\n\n\ndownloads and installs Selendroid using appium-selendroid-installer\n\n\ncontains several Selendroid specific logic to ensure a seamless integration\n\n\ncontains a more specific set of capability constraints\n\n\nuses jsonwp-proxy to talk to the server\n\n\nused appium-adb to enable commands not implemented in Selendroid\n\n\n\n\nappium-selendroid-installer\n\n\n\n\ncontains and exports a setup logic to\n\n\ndownload Selendroid\n\n\ndetermine AndroidManifest location\n\n\ndetermine Server APK location\n\n\nextracting both files\n\n\ncopying and cleaning files\n\n\n\n\nappium-android-ime\n\n\n\n\nallows to send and receive unicode characters from/to the Android device\n\n\nencodes text into UTF-7 sends it to the device and recodes it as Unicode\n\n\nused by appium-android-driver and appium-selendroid-driver\n\n\n\n\nappium-doctor\n\n\n\n\ndiagnoses, reports and fixes common Node, iOS and Android configuration issues before starting Appium\n\n\nexposes cli command \u201cappium-doctor\"\n\n\nit checks for\n\n\nAndroid:\n\n\nandroid sdk exists and configured properly\n\n\nenv variables and path check\n\n\n\n\n\n\niOS:\n\n\nxcode is installed (with command line tools)\n\n\ndev tools security check\n\n\nauth check\n\n\nnode binary check\n\n\n\n\n\n\n\n\nappium-gulp-plugins\n\n\n\n\ndev package with custom plugins used accross appium modules (for Appium development only)\n\n\ncontains task for\n\n\ne2e and unit tests (with coverage reporting)\n\n\ntranspiling ES2016 into ES5\n\n\nstatic code analysis (jshint)\n\n\nwatch task for dev\n\n\n\n\nappium-remote-debugger\n\n\n\n\nRPC client to connect Appium to iOS webviews\n\n\ncan connect to WebKit devtools\n\n\nfor iOS only\n\n\nhas two rpc client classes\n\n\nremote-debugger-rpc-client: uses tcp6 that connects to localhost:27753\n\n\nwebkit-rpc-client: uses WebSockets to connect to ws://localhost:27753/devtools/page/${pageId}\n\n\n\n\nnode-teen_process\n\n\n\n\nhelper module that exposes:\n\n\nexec: ES7 (async/await) implementation of exec that uses spawn under the hood\n\n\nSubProcess: cuts down boilerplate when using spawn (especially when using in an async/await context)\n\n\n\n\nappium-logger\n\n\n\n\nbasic logger defaulting to npmlog with special consideration for running tests\n\n\nexposes getLogger function that gets used by almost all Appium packages\n\n\ndefers to already-running logger if there is one, so everything bubbles up\n\n\n\n\nappium-support\n\n\n\n\nutility functions used to support libs used across appium packages.\n\n\nprovides promise wrappers for some common operations like\n\n\nsystem methods (isWindows, isLinux \u2026)\n\n\nutility methods like hasValue, escapeSpace\n\n\na bunch of fs methods\n\n\nplist helpers for parsing and updating plist files", 
            "title": "Appium packages"
        }, 
        {
            "location": "/contributing/appium-packages/#appium-in-a-nutshell", 
            "text": "", 
            "title": "Appium in a Nutshell"
        }, 
        {
            "location": "/contributing/appium-packages/#appium", 
            "text": "runs basic checks  node version ( = 4)  CLI arguments checks  contains all available and supported CLI arguments  check for deprecation and mutual exclusion    put logging together  mixture out of npmlog, winston and a custom logger  initiates AppiumDriver (extends Basedriver)  assigns iOS/Android/Selendroid/Fake driver to session  creates/deletes Appium session  starts baseServer (appium-express)  passes routes given by driver", 
            "title": "appium"
        }, 
        {
            "location": "/contributing/appium-packages/#appium-express-part-of-appium-base-driver", 
            "text": "starts express server (allows x-domain-origin)  initialises routes from AppiumDriver  timeout handling  serves a static page for test purposes  connects req/res events to logger", 
            "title": "appium-express (part of appium-base-driver)"
        }, 
        {
            "location": "/contributing/appium-packages/#mobile-json-wire-protocol-part-of-appium-base-driver", 
            "text": "provides list of Appium commands  subclassed by drivers that will use the protocol  kind of middleware between client and driver  handles jwp proxy for driver  contains error classes for all types of errors  sanitises error responses  (un)wraps params to commands  checks required params, validates params", 
            "title": "mobile-json-wire-protocol (part of appium-base-driver)"
        }, 
        {
            "location": "/contributing/appium-packages/#appium-base-driver", 
            "text": "designed to have a single testing session per instantiation  contains constraints on caps (platformName has to be present, etc)  validates capabilities  runs chain of promised commands with single concurrency  handles session restart  handles swipe options  exports class (DeviceSettings) to manage device settings (get/update)  contains basic commands  to find elements  create/delete sessions  handle timeouts  set/update device settings  provides helper methods for commands", 
            "title": "appium-base-driver"
        }, 
        {
            "location": "/contributing/appium-packages/#appium-ios-driver", 
            "text": "can also run as standalone server (has a small server part that extends from appium-express)  supported strategies: \"name\", \"xpath\", \"id\", \"-ios uiautomation\", \"class name\", \"accessibility id\u201d  can start a simulator or a real device (if udid is given)  runs for each type a huge set of instructions  removeInstrumentsSocket  setBundleIdFromApp  createInstruments  runSimReset, isolateSimDevice, setLocale || runRealDeviceReset  setPreferences || runRealDeviceReset  startLogCapture  prelaunchSimulator || (noop)  startInstruments  onInstrumentsLaunch  configureBootstrap  setBundleId  setInitialOrientation  initAutoWebview  waitForAppLaunched    all instructions are helper methods within driver.js  contains a more specific set of capability constraints  has logic to build and run Safari (safari-launcher) using appium-xcode  implements commands for iOS driver  Selenium commands are compiled to ui-automator commands  commands will be send out to uiAutoClient (appium-uiauto)  connects to appium remote debugger", 
            "title": "appium-ios-driver"
        }, 
        {
            "location": "/contributing/appium-packages/#appium-xcode", 
            "text": "runs shell commands to return useful data from Xcode like  getPath  getVersion  getAutomationTraceTemplatePath  getMaxIOSSDK  \u2026  has an auto-retry built in", 
            "title": "appium-xcode"
        }, 
        {
            "location": "/contributing/appium-packages/#appium-uiauto", 
            "text": "wrapper for the iOS UI Automation framework  talks to it via socket connection  runs a command queue that get filled up by the sendCommand function  handles responses (as a buffer) from the ui-automation framework  uses osascript to rotate screenshots  provides method to bootstrap simulator/realdevice (dynamic-bootstrap)  javascript files which are run in the iOS UI Automation context (not node)  responsible to execute actual iOS UI Automation commands  see  UIAutomation docs  command flow is like  Webdriver command -  iOS driver command -  uiauto-command", 
            "title": "appium-uiauto"
        }, 
        {
            "location": "/contributing/appium-packages/#appium-instruments", 
            "text": "wrapper to run instruments commands  a lot of exec calls to talk to instruments binary  all of them take callbacks to propagate the result  uses \"iwd\" (instruments without delay) packages which have to be compiled first  special Instruments package that gets rid of a delay between commands  contains also older versions of iwd instrument (v4 - v7)", 
            "title": "appium-instruments"
        }, 
        {
            "location": "/contributing/appium-packages/#appium-ios-log", 
            "text": "captures console, performance and crash logs from the iOS simulator or real device  by either calling tail to grab logs from a system path (simulator devices)  or by calling deviceconsole (real devices)  performance logs are getting grabbed using the remote-debugger  crash logs remain in \u201c.crash\u201d files on the system", 
            "title": "appium-ios-log"
        }, 
        {
            "location": "/contributing/appium-packages/#appium-ios-simulator", 
            "text": "wrapper around iOS simulator app  start and shutdown (kill all) simulators  updating settings and locals  update/clean safari  grabs meta data about the simulator device  uses simctl to talk to the simulator  works for Xcode 6 and 7", 
            "title": "appium-ios-simulator"
        }, 
        {
            "location": "/contributing/appium-packages/#authorize-ios", 
            "text": "utility that pre-authorizes Instruments to run UIAutomation scripts against iOS devices  enables developer tools by calling \u201cDevToolsSecurity \u2014enable\u201d  authorises user as developer calling \u201cauthorizationdb\"  changes ownerships of simulator directories", 
            "title": "authorize-ios"
        }, 
        {
            "location": "/contributing/appium-packages/#node-simctl", 
            "text": "wrapper around simctl binary (cli utility to control an iOS simulator)  executed as a subcommand of xcrun (locate or invoke developer tools from the command-line)  contains functions to  install/remove apps  launch and shutdown simulators  create/erase/delete devices  get list of devices", 
            "title": "node-simctl"
        }, 
        {
            "location": "/contributing/appium-packages/#appium-cookies", 
            "text": "simple package to create and receive cookies  used in the appium-ios-driver to implement jswonwire cookie commands within the web context", 
            "title": "appium-cookies"
        }, 
        {
            "location": "/contributing/appium-packages/#appium-chromedriver", 
            "text": "wrapper around the chrome driver  downloads and installs chromedriver binaries  launches, restarts and stops (or kills all) chrome instances  uses appium-jsonwp-proxy to send json wire protocol commands to the driver", 
            "title": "appium-chromedriver"
        }, 
        {
            "location": "/contributing/appium-packages/#jsonwp-proxy-part-of-appium-base-driver", 
            "text": "allows to send json wire protocol commands to a server that understands it (browser drivers)  parses response into json  allows to proxy requests to a proxied server  used for communication in appium-chromedriver and appium-selendroid-driver", 
            "title": "jsonwp-proxy (part of appium-base-driver)"
        }, 
        {
            "location": "/contributing/appium-packages/#appium-android-driver", 
            "text": "similar to appium-ios-driver it can run as standalone server  automates native, hybrid and mobile web apps on emulators/simulators and real devices  takes care of installing android packages to the device  runs chromedriver sessions if desired  contains a more specific set of capability constraints  uses appium-adb to talk to the emulator/simulator/realdevice  and appium-android-bootstrap to execute the actual commands  contains helpers to figure out which web view belongs to which app package vice versa", 
            "title": "appium-android-driver"
        }, 
        {
            "location": "/contributing/appium-packages/#appium-adb", 
            "text": "wrapper around the Android Debug Bridge (adb)  contains a bunch of commands that are basically just rpc to the adb binary  houses jar files to run for special use cases like signing, verifying apps or moving manifests  allows special (mobile specific) emulator commands that are not related to the webdriver protocol like  locking the screen  press back button  press home button  set/get airplane mode  set/get wifi state  captures logcat  handles emulator/simulator actions (e.g. reboot)", 
            "title": "appium-adb"
        }, 
        {
            "location": "/contributing/appium-packages/#appium-android-bootstrap", 
            "text": "JavaScript interface, and Java code, for interacting with Android UI Automator  builds AppiumBootstrap.jar that contains logic to execute the commands  counterpart to appium-uiauto  once started it creates a web socket connection to the device  application provides start/shutdown/sendCommand interface  command flow is like:  Selenium command -  appium-adb -  appium-android-bootstrap -  Java code using the Android UI Automator framework", 
            "title": "appium-android-bootstrap"
        }, 
        {
            "location": "/contributing/appium-packages/#appium-uiautomator", 
            "text": "starts and shutdowns uiautomator server given by appium-android-bootstrap jar build  command flow is like  appium-android-bootstrap:start -  appium-uiautomator:start -  appium-adb:install bootstrap", 
            "title": "appium-uiautomator"
        }, 
        {
            "location": "/contributing/appium-packages/#appium-selendroid-driver", 
            "text": "similar to appium-android-driver it can run as standalone server  downloads and installs Selendroid using appium-selendroid-installer  contains several Selendroid specific logic to ensure a seamless integration  contains a more specific set of capability constraints  uses jsonwp-proxy to talk to the server  used appium-adb to enable commands not implemented in Selendroid", 
            "title": "appium-selendroid-driver"
        }, 
        {
            "location": "/contributing/appium-packages/#appium-selendroid-installer", 
            "text": "contains and exports a setup logic to  download Selendroid  determine AndroidManifest location  determine Server APK location  extracting both files  copying and cleaning files", 
            "title": "appium-selendroid-installer"
        }, 
        {
            "location": "/contributing/appium-packages/#appium-android-ime", 
            "text": "allows to send and receive unicode characters from/to the Android device  encodes text into UTF-7 sends it to the device and recodes it as Unicode  used by appium-android-driver and appium-selendroid-driver", 
            "title": "appium-android-ime"
        }, 
        {
            "location": "/contributing/appium-packages/#appium-doctor", 
            "text": "diagnoses, reports and fixes common Node, iOS and Android configuration issues before starting Appium  exposes cli command \u201cappium-doctor\"  it checks for  Android:  android sdk exists and configured properly  env variables and path check    iOS:  xcode is installed (with command line tools)  dev tools security check  auth check  node binary check", 
            "title": "appium-doctor"
        }, 
        {
            "location": "/contributing/appium-packages/#appium-gulp-plugins", 
            "text": "dev package with custom plugins used accross appium modules (for Appium development only)  contains task for  e2e and unit tests (with coverage reporting)  transpiling ES2016 into ES5  static code analysis (jshint)  watch task for dev", 
            "title": "appium-gulp-plugins"
        }, 
        {
            "location": "/contributing/appium-packages/#appium-remote-debugger", 
            "text": "RPC client to connect Appium to iOS webviews  can connect to WebKit devtools  for iOS only  has two rpc client classes  remote-debugger-rpc-client: uses tcp6 that connects to localhost:27753  webkit-rpc-client: uses WebSockets to connect to ws://localhost:27753/devtools/page/${pageId}", 
            "title": "appium-remote-debugger"
        }, 
        {
            "location": "/contributing/appium-packages/#node-teen_process", 
            "text": "helper module that exposes:  exec: ES7 (async/await) implementation of exec that uses spawn under the hood  SubProcess: cuts down boilerplate when using spawn (especially when using in an async/await context)", 
            "title": "node-teen_process"
        }, 
        {
            "location": "/contributing/appium-packages/#appium-logger", 
            "text": "basic logger defaulting to npmlog with special consideration for running tests  exposes getLogger function that gets used by almost all Appium packages  defers to already-running logger if there is one, so everything bubbles up", 
            "title": "appium-logger"
        }, 
        {
            "location": "/contributing/appium-packages/#appium-support", 
            "text": "utility functions used to support libs used across appium packages.  provides promise wrappers for some common operations like  system methods (isWindows, isLinux \u2026)  utility methods like hasValue, escapeSpace  a bunch of fs methods  plist helpers for parsing and updating plist files", 
            "title": "appium-support"
        }, 
        {
            "location": "/contributing/credits/", 
            "text": "Credits\n\n\nThese are the projects that inspired us, or are depended upon to make Appium awesome.\n\n\n\n\nApple UIAutomation\n\n\nGhostDriver\n\n\nIOS Auto\n\n\nIOS Driver\n\n\nMechanic.js\n\n\nnode-webkit\n\n\nRemote Debug\n\n\nSelenium Project\n\n\nios-webkit-debug-proxy\n\n\ninstruments-without-delay\n\n\ndeviceconsole\n\n\nWinAppDriver\n\n\nWebDriverAgent", 
            "title": "Credits"
        }, 
        {
            "location": "/contributing/credits/#credits", 
            "text": "", 
            "title": "Credits"
        }, 
        {
            "location": "/contributing/credits/#these-are-the-projects-that-inspired-us-or-are-depended-upon-to-make-appium-awesome", 
            "text": "Apple UIAutomation  GhostDriver  IOS Auto  IOS Driver  Mechanic.js  node-webkit  Remote Debug  Selenium Project  ios-webkit-debug-proxy  instruments-without-delay  deviceconsole  WinAppDriver  WebDriverAgent", 
            "title": "These are the projects that inspired us, or are depended upon to make Appium awesome."
        }, 
        {
            "location": "/contributing/developers-overview/", 
            "text": "A Developer's Overview of Appium\n\n\nBefore reading this document, please ensure that you have read and understood\nthe more general \nintroduction to Appium\nconcepts\n and the more general \ncontribution\ninstructions\n.\n\n\nTechnical Vision\n\n\nAppium aims to be a Mobile JSONWP front-end for the best app automation\ntechnologies. That's it. We want to take all the different useful automation\nengines and smooth away their differences and gotchas by making Appium drivers\nfor them and bringing them under the umbrella of Appium itself. This is very\nsimilar to the goal of the Selenium project. For our part, we want to have\nevery driver be an independent entity (separate repo, tests, etc...) even as it\nuses shared libraries that make the development of an Appium driver as simple\nand boilerplate-free as possible. We use modern JavaScript because JavaScript\nis everywhere and it's easy for many developers to understand and contribute\nback to.\n\n\nDeveloper Community\n\n\nAnyone is welcome to become an Appium developer; just read this guide and get\nsome of your code merged, and you are one of us! If you stick around and help\na lot, we will also make you a committer so that you can continue to help the\ncommunity more easily. If you are developing code for Appium and have\nquestions, reach out to the developer community at\n\nappium-developers@googlegroups.com\n. Note that this is a mailing list for\n\ndevelopment\n questions, not \nusage\n questions or bug reports. Usage questions\nbelong on \ndiscuss.appium.io\n. The GitHub issue\ntracker is for bug reports and feature requests only.\n\n\nAgile Development Workflow\n\n\nThe Appium team runs development according to a very lightweight version of\nSCRUM. Every two weeks we begin a new \"sprint\", or a period of time in which we\nhave decided what we want to accomplish. Anyone familiar with the Appium\ncodebase is welcome to attend our sprint planning and participate as a SCRUM\nteam member for that sprint. No long-term commitments required! During the\nsprint, we update each other with daily progress in the \n#standup\n room in our\n\nAppium Slack Group\n (there are no real-time daily\nstandups). At the end of the sprint, to celebrate our accomplishments and\nreflect on how things went, we hold a \"retrospective\", which might result in\na list of things we can try differently or do better next time around.\n\n\nUltimately, the goal is to time an Appium release at the end of each sprint, so\nevery two weeks. We're not quite there, but hopefully we will be soon.\n\n\nCurrent meeting times:\n\n Sprint Planning: every other Monday from 10:00 AM - 10:45 AM (Pacific Time)\n\n Sprint Retrospective: every other \nother\n Friday from 1:00 PM - 1:30 PM (Pacific Time)\n\n\nWe hold meetings using \nZoom\n video chat.\n\n\nFor project management, we use the \nZenHub\n browser plugin,\nwhich adds various features like Kanban boards and Epics to the GitHub\ninterface. To fully participate in Appium SCRUM, you'll need to have this\nbrowser plugin installed.\n\n\nIf you are interested in participating a sprint, ping \n@jlipps\n or \n@isaac\n in\nthe Appium Slack Group, or DM \n@jlipps\n on Twitter, and we'll share how to join\nthe video chat for the next sprint.\n\n\nArchitecture\n\n\nAppium is primarily a collection of \nnode.js\n packages that\ncombine to form a running node.js server. These packages are maintained\nindependently of one another and each have their own GitHub repo, CI, and\nrelease process. Some packages (like \nappium-ios-driver\n) are large and add\nsignificant functionality to Appium, while others play a support role and\nexpose one specific bit of functionality that is reused by other packages.\n\n\nFor an overview of the package hierarchy and the role that each package plays,\nplease check out our \npackage\noverview\n doc.\n\n\nTranspilation\n\n\nAppium is written in a new form of JavaScript, called ES6 (or now ES2015).\nBecause this version of the language is not yet supported natively by older\nversions of node.js, Appium code is \ntranspiled\n to ES5 (the more\nwidely-supported version of JS). This transpilation process must occur before\nany code is run. In addition to the new language features of ES6, we have\nadopted two very important keywords from the \nsubsequent\n version of JS, namely\n\nasync\n and \nawait\n, which assist in writing asynchronous code cleanly. Because\nof the transpilation step, Appium packages include tools which watch code for\nchanges and automatically re-transpile the code. Usually, the same tool will\nautomatically run unit tests as well to ensure that nothing small has broken.\nMost Appium packages have this as the default behavior when running \ngulp\n.\n\n\nLinting and Style\n\n\nIt's important for all of Appium's JS to look and feel the same. This includes\nstyle conventions as well as coding patterns and which libraries we use to\nsolve various problems. You should get familiar with our new \nES2015 Style\nGuide\n. When transpiling,\nAppium packages will automatically run JSHint or other lint tools and provide\nwarning or error feedback if the code doesn't conform to our style. These tools\nare not necessarily exhaustive of the kinds of style issues we care about, so\nwe may also mention style issues in our reviews. This isn't to be nit-picky but\nto have a clean, consistent, and readable codebase!\n\n\nSubmitting Code\n\n\nGetting your code into Appium is easy: just submit a PR to one of our repos and\nengage with the maintainers in the review process. We have a number of\nrequirements for code submissions (but don't worry! If the following seems like\na lot, we will helpfully and patiently walk you through each step. Just send in\nyour PR and we'll go from there):\n\n\n\n\nFollow the style of the surrounding code and our Style Guide\n\n\nAtomic commits--one commit per logical change (i.e., make sure that commits don't need to come in a group in order for the program to work. It should work at any given commit). Usually this means one commit per PR. You'll want to get very familiar with \ngit rebase -i\n and squashing!\n\n\nNo merge commits: always rebase on top of latest master (or whatever other branch you're asking to merge into) before submitting your PR.\n\n\nAlmost all changes should have tests. Bugfixes should at the least have unit tests that prove that the bug has been fixed. New features should have unit tests and in most cases e2e tests to prove that the feature actually works. We will be happy to walk you through the test creation process. Reading the surrounding test code is a good place to start. Our CI systems usually run test coverage statistics and we will likely not merge code that decreases test coverage.\n\n\n\n\nIf you do all of these things before submission, your code will almost\ncertainly be accepted very quickly! Of course, if you're thinking of making\na change to Appium that requires a lot of work, you might reach out to the\ndevelopers list to make sure that the change is in line with our philosophy and\nin principle something that we'll accept before you get going.\n\n\nTesting\n\n\nAlways make sure that your changes are tested! In addition to writing unit and\ne2e tests, make sure you run existing tests before you begin to make changes\nand before you push code to be reviewed. We do have CI set up for every Appium\nrepository as a safety net for reviewers to know whether the code they are\nreviewing has passed muster. Running tests in any Appium package is easy!\nUnless the README says otherwise, here are the things you can do:\n\n\ngulp                    # watch directory to re-transpile on code change, and run unit tests\ngulp once               # same as above but don't watch\ngulp unit-test          # transpile and run unit tests\ngulp e2e-test           # transpile and run end-to-end/functional tests\n_FORCE_LOGS=1 \ncommand\n # show module log output during test run\n\n\n\n\nNote that we have a convention for unit test files to end in \n-specs.js\n and\nfor e2e test files to end in \n-e2e-specs.js\n.\n\n\nReleasing\n\n\nThe release process for any Appium module other than the main Appium package is\npretty straightforward (note that you will need to be an NPM owner for the\npackage if you want to publish it. Ownership is managed by the Appium\ncommitters; talk to @jlipps or @imurchie if you believe you should be an owner\nand are not):\n\n\n\n\nrm -rf node_modules \n npm install\n and run tests to make sure a clean install works.\n\n\nDetermine whether we have a patch (bugfix), minor (feature), or major (breaking) release according to the principles of \nSemVer\n (see also this explanation of \nhow SemVer works with NPM\n).\n\n\nUpdate the CHANGELOG and/or README with any appropriate changes and commit. Most subpackages don't have a CHANGELOG.\n\n\nRun \nnpm version \nversion-type\n with the appropriate version type.\n\n\nPush the appropriate branch to GitHub, and don't forget to include the \n--tags\n flag to include the tag just created by \nnpm version\n.\n\n\nRun \nnpm publish\n (with \n--tag beta\n if this isn't an official release).\n\n\n\n\nFor the main Appium packages, all the above steps must be taken, but with\nseveral changes. One reason is that for the main package we use NPM shrinkwrap\nto ensure dependencies don't change between installations. Another reason is\nthat we develop on master and release on various branches. The way it works is\nas follows: we always develop and add new code to master. When we are ready to\nmake a new minor or major release (i.e., \n1.5.0\n or \n2.0.0\n), we create\na release branch (\n1.5\n or \n2.0\n respectively). We then publish off of that\nbranch. As we feel the need to make patch releases, we first pull the patch\ninto master, then cherry-pick individual patches to the release branch (perhaps\neven multiple release branches). Then we again publish from those branches with\nthe updated patch version (\n1.5.1\n or \n2.0.1\n for example).\n\n\nA note about \nnpm shrinkwrap\n:\n We use \nnpm shrinkwrap\n\nin order to lock dependencies on release. Without it, any development on dependent\npackages will be reflected when Appium is installed, which may lead to issues. Since\nthe configuration file, \nnpm-shrinkwrap.json\n, only exists on release branches,\nit is necessary to manually manage it during the release process. It needs to be\nchecked in to GitHub along with changes to \npackage.json\n.\n\n\n\n\nRemove the NPM shrinkwrap JSON file if it exists.\n\n\nrm -rf node_modules \n npm install\n and run tests to make sure a clean install works.\n\n\nrm -rf node_modules \n npm install --production\n to get just the production deps.\n\n\nnpm shrinkwrap\n to write the new NPM shrinkwrap JSON file.\n\n\nDetermine whether we have a patch (bugfix), minor (feature), or major (breaking) release according to the principles of SemVer.\n\n\nUpdate \npackage.json\n with the appropriate new version.\n\n\nUpdate the CHANGELOG/README with appropriate changes and submit for review as a PR, along with shrinkwrap and \npackage.json\n changes. Wait for it to be merged, then pull it into the release branch.\n\n\nCreate a tag of the form \nv\nversion\n on the release branch (usually a minor branch like \n1.5\n or \n1.4\n), with: \ngit tag -a v\nversion\n, e.g., \ngit tag -a v1.5.0\n. This is not necessary for beta versions.\n\n\nPush the tag to upstream: \ngit push --tags \nremote\n \nbranch\n\n\nInstall dev dependencies (or at least \ngulp\n and \nappium-gulp-plugins\n).\n\n\nRun \nnpm publish\n (with \n--tag beta\n if this isn't an official release).\n\n\nUpdate the docs at appium.io. Check out the appium.io repo from github, check out the \ngh-pages\n branch and pull latest. Run \nrake publish\n.\n\n\nCreate a new release on GitHub: go to \nhttps://github.com/appium/appium/releases/tag/v\nVERSION\n and hit \"Edit Tag\". Make the release name \nVERSION\n (e.g., \n2.0.5\n), then paste in the changelog (but not the changelog header for this version). If it's a beta release, mark as pre-release.\n\n\nCreate a new post on discuss.appium.io announcing the release. Post it in the \"News\" category. Paste in the changelog and any choice comments. Pin it and unpin the previous release post.\n\n\nBegin process of releasing \nappium-desktop\n.\n\n\nNotify @jlipps to so he can tweet a link to the discuss post.", 
            "title": "Developers overview"
        }, 
        {
            "location": "/contributing/developers-overview/#a-developers-overview-of-appium", 
            "text": "Before reading this document, please ensure that you have read and understood\nthe more general  introduction to Appium\nconcepts  and the more general  contribution\ninstructions .", 
            "title": "A Developer's Overview of Appium"
        }, 
        {
            "location": "/contributing/developers-overview/#technical-vision", 
            "text": "Appium aims to be a Mobile JSONWP front-end for the best app automation\ntechnologies. That's it. We want to take all the different useful automation\nengines and smooth away their differences and gotchas by making Appium drivers\nfor them and bringing them under the umbrella of Appium itself. This is very\nsimilar to the goal of the Selenium project. For our part, we want to have\nevery driver be an independent entity (separate repo, tests, etc...) even as it\nuses shared libraries that make the development of an Appium driver as simple\nand boilerplate-free as possible. We use modern JavaScript because JavaScript\nis everywhere and it's easy for many developers to understand and contribute\nback to.", 
            "title": "Technical Vision"
        }, 
        {
            "location": "/contributing/developers-overview/#developer-community", 
            "text": "Anyone is welcome to become an Appium developer; just read this guide and get\nsome of your code merged, and you are one of us! If you stick around and help\na lot, we will also make you a committer so that you can continue to help the\ncommunity more easily. If you are developing code for Appium and have\nquestions, reach out to the developer community at appium-developers@googlegroups.com . Note that this is a mailing list for development  questions, not  usage  questions or bug reports. Usage questions\nbelong on  discuss.appium.io . The GitHub issue\ntracker is for bug reports and feature requests only.", 
            "title": "Developer Community"
        }, 
        {
            "location": "/contributing/developers-overview/#agile-development-workflow", 
            "text": "The Appium team runs development according to a very lightweight version of\nSCRUM. Every two weeks we begin a new \"sprint\", or a period of time in which we\nhave decided what we want to accomplish. Anyone familiar with the Appium\ncodebase is welcome to attend our sprint planning and participate as a SCRUM\nteam member for that sprint. No long-term commitments required! During the\nsprint, we update each other with daily progress in the  #standup  room in our Appium Slack Group  (there are no real-time daily\nstandups). At the end of the sprint, to celebrate our accomplishments and\nreflect on how things went, we hold a \"retrospective\", which might result in\na list of things we can try differently or do better next time around.  Ultimately, the goal is to time an Appium release at the end of each sprint, so\nevery two weeks. We're not quite there, but hopefully we will be soon.  Current meeting times:  Sprint Planning: every other Monday from 10:00 AM - 10:45 AM (Pacific Time)  Sprint Retrospective: every other  other  Friday from 1:00 PM - 1:30 PM (Pacific Time)  We hold meetings using  Zoom  video chat.  For project management, we use the  ZenHub  browser plugin,\nwhich adds various features like Kanban boards and Epics to the GitHub\ninterface. To fully participate in Appium SCRUM, you'll need to have this\nbrowser plugin installed.  If you are interested in participating a sprint, ping  @jlipps  or  @isaac  in\nthe Appium Slack Group, or DM  @jlipps  on Twitter, and we'll share how to join\nthe video chat for the next sprint.", 
            "title": "Agile Development Workflow"
        }, 
        {
            "location": "/contributing/developers-overview/#architecture", 
            "text": "Appium is primarily a collection of  node.js  packages that\ncombine to form a running node.js server. These packages are maintained\nindependently of one another and each have their own GitHub repo, CI, and\nrelease process. Some packages (like  appium-ios-driver ) are large and add\nsignificant functionality to Appium, while others play a support role and\nexpose one specific bit of functionality that is reused by other packages.  For an overview of the package hierarchy and the role that each package plays,\nplease check out our  package\noverview  doc.", 
            "title": "Architecture"
        }, 
        {
            "location": "/contributing/developers-overview/#transpilation", 
            "text": "Appium is written in a new form of JavaScript, called ES6 (or now ES2015).\nBecause this version of the language is not yet supported natively by older\nversions of node.js, Appium code is  transpiled  to ES5 (the more\nwidely-supported version of JS). This transpilation process must occur before\nany code is run. In addition to the new language features of ES6, we have\nadopted two very important keywords from the  subsequent  version of JS, namely async  and  await , which assist in writing asynchronous code cleanly. Because\nof the transpilation step, Appium packages include tools which watch code for\nchanges and automatically re-transpile the code. Usually, the same tool will\nautomatically run unit tests as well to ensure that nothing small has broken.\nMost Appium packages have this as the default behavior when running  gulp .", 
            "title": "Transpilation"
        }, 
        {
            "location": "/contributing/developers-overview/#linting-and-style", 
            "text": "It's important for all of Appium's JS to look and feel the same. This includes\nstyle conventions as well as coding patterns and which libraries we use to\nsolve various problems. You should get familiar with our new  ES2015 Style\nGuide . When transpiling,\nAppium packages will automatically run JSHint or other lint tools and provide\nwarning or error feedback if the code doesn't conform to our style. These tools\nare not necessarily exhaustive of the kinds of style issues we care about, so\nwe may also mention style issues in our reviews. This isn't to be nit-picky but\nto have a clean, consistent, and readable codebase!", 
            "title": "Linting and Style"
        }, 
        {
            "location": "/contributing/developers-overview/#submitting-code", 
            "text": "Getting your code into Appium is easy: just submit a PR to one of our repos and\nengage with the maintainers in the review process. We have a number of\nrequirements for code submissions (but don't worry! If the following seems like\na lot, we will helpfully and patiently walk you through each step. Just send in\nyour PR and we'll go from there):   Follow the style of the surrounding code and our Style Guide  Atomic commits--one commit per logical change (i.e., make sure that commits don't need to come in a group in order for the program to work. It should work at any given commit). Usually this means one commit per PR. You'll want to get very familiar with  git rebase -i  and squashing!  No merge commits: always rebase on top of latest master (or whatever other branch you're asking to merge into) before submitting your PR.  Almost all changes should have tests. Bugfixes should at the least have unit tests that prove that the bug has been fixed. New features should have unit tests and in most cases e2e tests to prove that the feature actually works. We will be happy to walk you through the test creation process. Reading the surrounding test code is a good place to start. Our CI systems usually run test coverage statistics and we will likely not merge code that decreases test coverage.   If you do all of these things before submission, your code will almost\ncertainly be accepted very quickly! Of course, if you're thinking of making\na change to Appium that requires a lot of work, you might reach out to the\ndevelopers list to make sure that the change is in line with our philosophy and\nin principle something that we'll accept before you get going.", 
            "title": "Submitting Code"
        }, 
        {
            "location": "/contributing/developers-overview/#testing", 
            "text": "Always make sure that your changes are tested! In addition to writing unit and\ne2e tests, make sure you run existing tests before you begin to make changes\nand before you push code to be reviewed. We do have CI set up for every Appium\nrepository as a safety net for reviewers to know whether the code they are\nreviewing has passed muster. Running tests in any Appium package is easy!\nUnless the README says otherwise, here are the things you can do:  gulp                    # watch directory to re-transpile on code change, and run unit tests\ngulp once               # same as above but don't watch\ngulp unit-test          # transpile and run unit tests\ngulp e2e-test           # transpile and run end-to-end/functional tests\n_FORCE_LOGS=1  command  # show module log output during test run  Note that we have a convention for unit test files to end in  -specs.js  and\nfor e2e test files to end in  -e2e-specs.js .", 
            "title": "Testing"
        }, 
        {
            "location": "/contributing/developers-overview/#releasing", 
            "text": "The release process for any Appium module other than the main Appium package is\npretty straightforward (note that you will need to be an NPM owner for the\npackage if you want to publish it. Ownership is managed by the Appium\ncommitters; talk to @jlipps or @imurchie if you believe you should be an owner\nand are not):   rm -rf node_modules   npm install  and run tests to make sure a clean install works.  Determine whether we have a patch (bugfix), minor (feature), or major (breaking) release according to the principles of  SemVer  (see also this explanation of  how SemVer works with NPM ).  Update the CHANGELOG and/or README with any appropriate changes and commit. Most subpackages don't have a CHANGELOG.  Run  npm version  version-type  with the appropriate version type.  Push the appropriate branch to GitHub, and don't forget to include the  --tags  flag to include the tag just created by  npm version .  Run  npm publish  (with  --tag beta  if this isn't an official release).   For the main Appium packages, all the above steps must be taken, but with\nseveral changes. One reason is that for the main package we use NPM shrinkwrap\nto ensure dependencies don't change between installations. Another reason is\nthat we develop on master and release on various branches. The way it works is\nas follows: we always develop and add new code to master. When we are ready to\nmake a new minor or major release (i.e.,  1.5.0  or  2.0.0 ), we create\na release branch ( 1.5  or  2.0  respectively). We then publish off of that\nbranch. As we feel the need to make patch releases, we first pull the patch\ninto master, then cherry-pick individual patches to the release branch (perhaps\neven multiple release branches). Then we again publish from those branches with\nthe updated patch version ( 1.5.1  or  2.0.1  for example).  A note about  npm shrinkwrap :  We use  npm shrinkwrap \nin order to lock dependencies on release. Without it, any development on dependent\npackages will be reflected when Appium is installed, which may lead to issues. Since\nthe configuration file,  npm-shrinkwrap.json , only exists on release branches,\nit is necessary to manually manage it during the release process. It needs to be\nchecked in to GitHub along with changes to  package.json .   Remove the NPM shrinkwrap JSON file if it exists.  rm -rf node_modules   npm install  and run tests to make sure a clean install works.  rm -rf node_modules   npm install --production  to get just the production deps.  npm shrinkwrap  to write the new NPM shrinkwrap JSON file.  Determine whether we have a patch (bugfix), minor (feature), or major (breaking) release according to the principles of SemVer.  Update  package.json  with the appropriate new version.  Update the CHANGELOG/README with appropriate changes and submit for review as a PR, along with shrinkwrap and  package.json  changes. Wait for it to be merged, then pull it into the release branch.  Create a tag of the form  v version  on the release branch (usually a minor branch like  1.5  or  1.4 ), with:  git tag -a v version , e.g.,  git tag -a v1.5.0 . This is not necessary for beta versions.  Push the tag to upstream:  git push --tags  remote   branch  Install dev dependencies (or at least  gulp  and  appium-gulp-plugins ).  Run  npm publish  (with  --tag beta  if this isn't an official release).  Update the docs at appium.io. Check out the appium.io repo from github, check out the  gh-pages  branch and pull latest. Run  rake publish .  Create a new release on GitHub: go to  https://github.com/appium/appium/releases/tag/v VERSION  and hit \"Edit Tag\". Make the release name  VERSION  (e.g.,  2.0.5 ), then paste in the changelog (but not the changelog header for this version). If it's a beta release, mark as pre-release.  Create a new post on discuss.appium.io announcing the release. Post it in the \"News\" category. Paste in the changelog and any choice comments. Pin it and unpin the previous release post.  Begin process of releasing  appium-desktop .  Notify @jlipps to so he can tweet a link to the discuss post.", 
            "title": "Releasing"
        }, 
        {
            "location": "/contributing/gulp/", 
            "text": "Appium gulp commands\n\n\nGulp\n is like \nmake\n for Node.js! We use it to automate all\nkinds of appium dev tasks. Here's what you can do:\n\n\n\n\n\n\n\n\nTask\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngulp once\n\n\nCleans, lints, transpiles and runs unit tests\n\n\n\n\n\n\ngulp watch\n\n\nAutomatically runs \ngulp once\n when code changes\n\n\n\n\n\n\ngulp lint\n\n\nRuns JSLint\n\n\n\n\n\n\ngulp jshint\n\n\nRuns JSHint\n\n\n\n\n\n\ngulp transpile\n\n\nTranspiles our ES7/ES2015 code to ES5, generates \n/build\n directory + contents\n\n\n\n\n\n\ngulp unit-test\n\n\nRuns unit tests\n\n\n\n\n\n\ngulp e2e-test\n\n\nRuns e2e tests\n\n\n\n\n\n\ngulp docs\n\n\nGenerates docs/en/writing-running-appium/server-args.md doc", 
            "title": "Gulp"
        }, 
        {
            "location": "/contributing/gulp/#appium-gulp-commands", 
            "text": "Gulp  is like  make  for Node.js! We use it to automate all\nkinds of appium dev tasks. Here's what you can do:     Task  Description      gulp once  Cleans, lints, transpiles and runs unit tests    gulp watch  Automatically runs  gulp once  when code changes    gulp lint  Runs JSLint    gulp jshint  Runs JSHint    gulp transpile  Transpiles our ES7/ES2015 code to ES5, generates  /build  directory + contents    gulp unit-test  Runs unit tests    gulp e2e-test  Runs e2e tests    gulp docs  Generates docs/en/writing-running-appium/server-args.md doc", 
            "title": "Appium gulp commands"
        }, 
        {
            "location": "/contributing/how-to-write-docs/", 
            "text": "How to write docs\n\n\n##\n is used to write a h2 header. Each document must start with a h2 header.\nThis is to support appium.io docs generation. Don't use the \n---\n underline method of creating headers.\nDon't use h1 \n#\n or \n===\n for heading as it is not supported for table of contents (folder name is used as h1).\n\n\nSubheaders\n\n\n###\n is used to write subheaders.\n\n\nRegular headers\n\n\n####\n is used for headers that don't appear in the table of contents.\nDon't use h5 \n#####\n, or h6 \n######\n.\n\n\nLine breaks\n\n\nDon't use line breaks such as \n--\n or \n---\n. This will confuse Slate.\n\n\nLinking\n\n\nLink to the readme:\n\n\n[readme](../../README.md)\n\n\nLink to contributing:\n\n\n[contributing](../../CONTRIBUTING.md)\n\n\nLink to another document\n\n\n[link text](filename.md)\n\n\nTo link inside a document, use the \n#\n from the Slate URL.\n\n\n[go direct to json](filename.md#json-wire-protocol-server-extensions)\n\n\nNote that hash links will break when the heading changes so linking to\nthe start of the doc is preferable (\nother.md\n instead of \nother.md#something\n).\n\n\nCompatibility with appium.io\n\n\nCenter aligning code in appium.io\n\n\nAppium.io documentation uses \nslate\n for documentation.\nIf code snippet in documentation is not language specific or if you want code snippet to stay\nalong with text in center in appium.io documentation, use center as language in fenced code block.\n\n\nExample:\n\n\n```center\ncode snippet goes here.\n```\n\n\n\nPreviewing\n\n\nFollow these steps to preview the documentation\n\n\n\n\nInstall mkdocs\n\n\nRun \nnpm run docs:local\n\n\nOpen your web browser to localhost:8000 to view the documents\n\n\n\n\nPublishing\n\n\nTo publish documentation, run the npm script \nnpm run docs:publish", 
            "title": "How to write docs"
        }, 
        {
            "location": "/contributing/how-to-write-docs/#how-to-write-docs", 
            "text": "##  is used to write a h2 header. Each document must start with a h2 header.\nThis is to support appium.io docs generation. Don't use the  ---  underline method of creating headers.\nDon't use h1  #  or  ===  for heading as it is not supported for table of contents (folder name is used as h1).", 
            "title": "How to write docs"
        }, 
        {
            "location": "/contributing/how-to-write-docs/#subheaders", 
            "text": "###  is used to write subheaders.", 
            "title": "Subheaders"
        }, 
        {
            "location": "/contributing/how-to-write-docs/#regular-headers", 
            "text": "####  is used for headers that don't appear in the table of contents.\nDon't use h5  ##### , or h6  ###### .", 
            "title": "Regular headers"
        }, 
        {
            "location": "/contributing/how-to-write-docs/#line-breaks", 
            "text": "Don't use line breaks such as  --  or  --- . This will confuse Slate.", 
            "title": "Line breaks"
        }, 
        {
            "location": "/contributing/how-to-write-docs/#linking", 
            "text": "Link to the readme:  [readme](../../README.md)  Link to contributing:  [contributing](../../CONTRIBUTING.md)  Link to another document  [link text](filename.md)  To link inside a document, use the  #  from the Slate URL.  [go direct to json](filename.md#json-wire-protocol-server-extensions)  Note that hash links will break when the heading changes so linking to\nthe start of the doc is preferable ( other.md  instead of  other.md#something ).", 
            "title": "Linking"
        }, 
        {
            "location": "/contributing/how-to-write-docs/#compatibility-with-appiumio", 
            "text": "", 
            "title": "Compatibility with appium.io"
        }, 
        {
            "location": "/contributing/how-to-write-docs/#center-aligning-code-in-appiumio", 
            "text": "Appium.io documentation uses  slate  for documentation.\nIf code snippet in documentation is not language specific or if you want code snippet to stay\nalong with text in center in appium.io documentation, use center as language in fenced code block.  Example:  ```center\ncode snippet goes here.\n```", 
            "title": "Center aligning code in appium.io"
        }, 
        {
            "location": "/contributing/how-to-write-docs/#previewing", 
            "text": "Follow these steps to preview the documentation   Install mkdocs  Run  npm run docs:local  Open your web browser to localhost:8000 to view the documents", 
            "title": "Previewing"
        }, 
        {
            "location": "/contributing/how-to-write-docs/#publishing", 
            "text": "To publish documentation, run the npm script  npm run docs:publish", 
            "title": "Publishing"
        }, 
        {
            "location": "/contributing/style-guide-2.0/", 
            "text": "Style guide for contributors\n\n\nThanks for your contribution to Appium! Here are the principles we use when\nwriting javascript. Please conform to these so we can merge your pull request\n without going back and forth about style. The main principle is: \nmake your\n code look like the surrounding code\n.\n\n\nRebasing\n\n\nCommits in a pull request should consist of \nlogical changes\n.\nIf there are multiple authors, make sure each author has their own commit.\nIt's not a good idea to modify author information. Merge commits should be\nrebased out of pull requests.\n\n\nLinting\n\n\nAll code (except for code in \nbootstrap.js\n which uses proprietary Apple\nmethods) must pass JSLint. To check your code, you can simply run \ngrunt\nlint\n from the Appium repo dir. If you've created a new .js file,\nplease make sure it is covered by the wildcards in \ngrunt.js\n or that it is\nadded specifically.\n\n\nIt's easy to have your code linted as you type, which makes the whole process\nmuch smoother. We like \njshint\n,\nwhich has integrations with a lot of source code editors. The file \n.jshintrc\n is checked into the repo, so by adding jshint to your editor, you'll\ntake advantage of the linting.\n\n\nSince jshint does not enforce code style anymore, we also use\n\njscs\n, for which it also exists some\nsource editor integrations.\n\n\nThese configuration files define the warnings you will see in your favorite\neditor. See \nthis page for jshint\n and\n\nthis page for jscs\n to\nget the list of editors and platforms supported and how setup your editor for\nautomatic linting.\n\n\nStyle notes\n\n\nWe use a future version of JavaScript and take advantage of the Babel\ntranspiler to render it down to what is supported by current versions of\nNode.js. We use ES2015 (link needed) (formerly called ES6) with some\nnot-yet-standard features, namely \nasync/await\n (link needed). This style guide\nmust be followed diligently in all Appium contributions!\n\n\n\n\nUse two spaces for indentation, \nno tabs\n\n\n\n\nUse single spaces around operators\n\n\njavascript\nvar x = 1;\n\nnot\n\njavascript\nvar x=1;\n\n\n\n\n\n\nSpaces after commas and colons in lists, objects, function calls, etc...\n\n\njavascript\nvar x = myFunc(\"lol\", {foo: bar, baz: boo});\n\nnot\n\njavascript\nvar x = myFunc(\"lol\",{foo:bar,baz:boo});\n\n\n\n\n\n\nAlways end statements with semicolons\n\n\n\n\n\n\nComma-first\n\n\njavascript\nvar x = {\n  foo: 'bar'\n, baz: 'boo'\n, wuz: 'foz'\n};\n\n\n\n\n\n\nBrackets for \nfunction\n, \nif\n, etc... go on same line, \nelse\n gets sandwiched\n\n\njavascript\nif (foo === bar) {\n  // do something\n} else {\n  // do something else\n}\n\n\n\n\n\n\nSpace after \nif\n, \nfor\n, and \nfunction\n:\n\n\njavascript\nif (foo === bar) {\n\n\njavascript\nfor (var i = 0; i \n 10; i ++) {\n\n\njavascript\nvar lol = function (foo) {\n\nnot\n\njavascript\nif(foo === bar) {\n\n\njavascript\nfor(var i = 0; i \n 10; i ++) {\n\n\njavascript\nvar lol = function(foo) {\n\n\n\n\n\n\nAvoid bracketless \nif\n for one-liners:\n\n\njavascript\nif (foo === bar) {\n  foo++;\n}\n\nnot\n\njavascript\nif (foo === bar)\n  foo++;\n\nexcept in the case of short-circuiting to a callback in the event of an error\n\njavascript\nif (err) return cb(err);\n\n\n\n\n\n\nUse \n===\n, not \n==\n, and \n!==\n, not \n!=\n for no surprises\n\n\n\n\nLine length shouldn't be longer than 79 characters\n\n\n\n\nBreak up long strings like this:\n\n\njavascript\nmyFunc(\"This is a really long string that's longer \" +\n        \"than 79 characters so I broke it up, woo\");\n\n\n\n\n\n\nComments should line up with code\n\n\njavascript\nif (foo === 5) {\n  myFunc(foo);\n  // foo++;\n}\n\nnot\n\njavascript\nif (foo === 5) {\n  myFunc(foo);\n//foo++;\n}\n\n\n\n\n\n\nSubclassing by extending prototypes\n\n\n```javascript\nvar _ = require('underscore');\n\n\nvar SuperClass = function () {\n  this.init();\n};\n\n\nSuperClass.prototype.init = function () {\n  // initialize\n};\n\n\n// Create a subclass\n\n\nvar SubClass = function () {\n    this.init();\n};\n\n\n_.extend(SubClass.prototype, SuperClass.prototype);\n```\n\n\n\n\n\n\nCallbacks are always last in function definitions\n\n\njavascript\nvar foo = function (arg1, arg2, cb) {\n  ...\n};\n\n\n\n\n\n\nDefine functions as variables\n\n\njavascript\nvar myFunc = function (a, b, c) {};\n\nnot\n\njavascript\nfunction myFunc (a, b, c) {}\n\n\n\n\n\n\nVariable names should be camelCased:\n\n\njavascript\nvar myVariable = 42;\n\nnot\n\njavascript\nvar my_variable = 42;\n\n\n\n\n\n\nCheck for undefined\n\n\njavascript\ntypeof myVariable === \"undefined\"\n\nnot\n\njavascript\nmyVariable === undefined\n\n\n\n\n\n\nDefine a variable with a default value\n\n\njavascript\nvar x = y || z;\n\nnot\n\njavascript\nvar x = y ? y : z;\n\n\n\n\n\n\nTest Style:\n\n\nKeep on the same line if it makes sense semantically and length is not an issue:\n\n\nExamples:\n\n\n  driver.elementByTagName('el1').should.become(\n123\n)\n    .nodeify(done);\n\n  driver\n    .elementsByTagName('el1').should.eventually.have.length(0)\n    .nodeify(done);\n\n\n\n\nAlternatively use extra indents to improve readability:\n\n\nh.driver\n  .elementById('comments')\n    .clear()\n    .click()\n    .keys(\nhello world\n)\n    .getValue()\n    .should.become(\nhello world\n)\n  .elementById('comments')\n    .getValue().should.become(\nhello world\n)\n  .nodeify(done);\n\nh.driver\n  .execute(\n'nan'--\n)\n    .should.be.rejectedWith(\nstatus: 13\n)\n  .nodeify(done);", 
            "title": "Style guide 2.0"
        }, 
        {
            "location": "/contributing/style-guide-2.0/#style-guide-for-contributors", 
            "text": "Thanks for your contribution to Appium! Here are the principles we use when\nwriting javascript. Please conform to these so we can merge your pull request\n without going back and forth about style. The main principle is:  make your\n code look like the surrounding code .", 
            "title": "Style guide for contributors"
        }, 
        {
            "location": "/contributing/style-guide-2.0/#rebasing", 
            "text": "Commits in a pull request should consist of  logical changes .\nIf there are multiple authors, make sure each author has their own commit.\nIt's not a good idea to modify author information. Merge commits should be\nrebased out of pull requests.", 
            "title": "Rebasing"
        }, 
        {
            "location": "/contributing/style-guide-2.0/#linting", 
            "text": "All code (except for code in  bootstrap.js  which uses proprietary Apple\nmethods) must pass JSLint. To check your code, you can simply run  grunt\nlint  from the Appium repo dir. If you've created a new .js file,\nplease make sure it is covered by the wildcards in  grunt.js  or that it is\nadded specifically.  It's easy to have your code linted as you type, which makes the whole process\nmuch smoother. We like  jshint ,\nwhich has integrations with a lot of source code editors. The file  .jshintrc  is checked into the repo, so by adding jshint to your editor, you'll\ntake advantage of the linting.  Since jshint does not enforce code style anymore, we also use jscs , for which it also exists some\nsource editor integrations.  These configuration files define the warnings you will see in your favorite\neditor. See  this page for jshint  and this page for jscs  to\nget the list of editors and platforms supported and how setup your editor for\nautomatic linting.", 
            "title": "Linting"
        }, 
        {
            "location": "/contributing/style-guide-2.0/#style-notes", 
            "text": "We use a future version of JavaScript and take advantage of the Babel\ntranspiler to render it down to what is supported by current versions of\nNode.js. We use ES2015 (link needed) (formerly called ES6) with some\nnot-yet-standard features, namely  async/await  (link needed). This style guide\nmust be followed diligently in all Appium contributions!   Use two spaces for indentation,  no tabs   Use single spaces around operators  javascript\nvar x = 1; \nnot javascript\nvar x=1;    Spaces after commas and colons in lists, objects, function calls, etc...  javascript\nvar x = myFunc(\"lol\", {foo: bar, baz: boo}); \nnot javascript\nvar x = myFunc(\"lol\",{foo:bar,baz:boo});    Always end statements with semicolons    Comma-first  javascript\nvar x = {\n  foo: 'bar'\n, baz: 'boo'\n, wuz: 'foz'\n};    Brackets for  function ,  if , etc... go on same line,  else  gets sandwiched  javascript\nif (foo === bar) {\n  // do something\n} else {\n  // do something else\n}    Space after  if ,  for , and  function :  javascript\nif (foo === bar) {  javascript\nfor (var i = 0; i   10; i ++) {  javascript\nvar lol = function (foo) { \nnot javascript\nif(foo === bar) {  javascript\nfor(var i = 0; i   10; i ++) {  javascript\nvar lol = function(foo) {    Avoid bracketless  if  for one-liners:  javascript\nif (foo === bar) {\n  foo++;\n} \nnot javascript\nif (foo === bar)\n  foo++; \nexcept in the case of short-circuiting to a callback in the event of an error javascript\nif (err) return cb(err);    Use  === , not  == , and  !== , not  !=  for no surprises   Line length shouldn't be longer than 79 characters   Break up long strings like this:  javascript\nmyFunc(\"This is a really long string that's longer \" +\n        \"than 79 characters so I broke it up, woo\");    Comments should line up with code  javascript\nif (foo === 5) {\n  myFunc(foo);\n  // foo++;\n} \nnot javascript\nif (foo === 5) {\n  myFunc(foo);\n//foo++;\n}    Subclassing by extending prototypes  ```javascript\nvar _ = require('underscore');  var SuperClass = function () {\n  this.init();\n};  SuperClass.prototype.init = function () {\n  // initialize\n};  // Create a subclass  var SubClass = function () {\n    this.init();\n};  _.extend(SubClass.prototype, SuperClass.prototype);\n```    Callbacks are always last in function definitions  javascript\nvar foo = function (arg1, arg2, cb) {\n  ...\n};    Define functions as variables  javascript\nvar myFunc = function (a, b, c) {}; \nnot javascript\nfunction myFunc (a, b, c) {}    Variable names should be camelCased:  javascript\nvar myVariable = 42; \nnot javascript\nvar my_variable = 42;    Check for undefined  javascript\ntypeof myVariable === \"undefined\" \nnot javascript\nmyVariable === undefined    Define a variable with a default value  javascript\nvar x = y || z; \nnot javascript\nvar x = y ? y : z;", 
            "title": "Style notes"
        }, 
        {
            "location": "/contributing/style-guide-2.0/#test-style", 
            "text": "Keep on the same line if it makes sense semantically and length is not an issue:  Examples:    driver.elementByTagName('el1').should.become( 123 )\n    .nodeify(done);\n\n  driver\n    .elementsByTagName('el1').should.eventually.have.length(0)\n    .nodeify(done);  Alternatively use extra indents to improve readability:  h.driver\n  .elementById('comments')\n    .clear()\n    .click()\n    .keys( hello world )\n    .getValue()\n    .should.become( hello world )\n  .elementById('comments')\n    .getValue().should.become( hello world )\n  .nodeify(done);\n\nh.driver\n  .execute( 'nan'-- )\n    .should.be.rejectedWith( status: 13 )\n  .nodeify(done);", 
            "title": "Test Style:"
        }, 
        {
            "location": "/contributing/style-guide/", 
            "text": "Style guide for contributors\n\n\nThanks for your contribution to Appium! Here are the principles we use when\nwriting javascript. Please conform to these so we can merge your pull request\n without going back and forth about style. The main principle is: \nmake your\n code look like the surrounding code\n.\n\n\nRebasing\n\n\nCommits in a pull request should consist of \nlogical changes\n.\nIf there are multiple authors, make sure each author has their own commit.\nIt's not a good idea to modify author information. Merge commits should be\nrebased out of pull requests.\n\n\nLinting\n\n\nAll code (except for code in \nbootstrap.js\n which uses proprietary Apple\nmethods) must pass JSLint. To check your code, you can simply run \ngrunt\nlint\n from the Appium repo dir. If you've created a new .js file,\nplease make sure it is covered by the wildcards in \ngrunt.js\n or that it is\nadded specifically.\n\n\nIt's easy to have your code linted as you type, which makes the whole process\nmuch smoother. We like \njshint\n,\nwhich has integrations with a lot of source code editors. The file \n.jshintrc\n is checked into the repo, and its contents are:\n\n\n{\n  \nlaxcomma\n: true,\n  \nstrict\n: true,\n  \nundef\n: true,\n  \nunused\n: true,\n  \nnode\n: true,\n  \neqeqeq\n: true,\n  \ntrailing\n: true,\n  \nindent\n: 2\n}\n\n\n\n\nSince jshint does not enforce code style anymore, we also use\n\njscs\n, for which it also exists some\nsource editor integrations. The configuration file is:\n\n\n{\n  \nexcludeFiles\n: [\nsubmodules/**\n, \nnode_modules/**\n,\n    \n./lib/server/static/**\n, \n./lib/devices/firefoxos/atoms/*.js\n,\n    \n./test/harmony/**/*.js\n, \n./sample-code/examples/node/**/*-yiewd.js\n,\n    \n./sample-code/apps/**\n, \n./sample-code/examples/php/vendor/**\n],\n  \nrequireCurlyBraces\n: [\nfor\n, \nwhile\n, \ndo\n, \ntry\n, \ncatch\n],\n  \nrequireSpaceAfterKeywords\n: [\nif\n, \nelse\n, \nfor\n, \nwhile\n, \ndo\n, \nswitch\n,\n    \nreturn\n, \ntry\n, \ncatch\n, \nfunction\n],\n  \ndisallowMixedSpacesAndTabs\n: true,\n  \ndisallowTrailingWhitespace\n: true,\n  \nrequireSpacesInFunctionExpression\n: {\n    \nbeforeOpeningCurlyBrace\n: true\n  }\n}\n\n\n\n\nThese configuration files define the warnings you will see in your favorite\neditor. See \nthis page for jshint\n and\n\nthis page for jscs\n to\nget the list of editors and platforms supported and how setup your editor for\nautomatic linting.\n\n\nStyle notes\n\n\n\n\nUse two spaces for indentation, \nno tabs\n\n\n\n\nUse single spaces around operators\n\n\njavascript\nvar x = 1;\n\nnot\n\njavascript\nvar x=1;\n\n\n\n\n\n\nSpaces after commas and colons in lists, objects, function calls, etc...\n\n\njavascript\nvar x = myFunc(\"lol\", {foo: bar, baz: boo});\n\nnot\n\njavascript\nvar x = myFunc(\"lol\",{foo:bar,baz:boo});\n\n\n\n\n\n\nAlways end statements with semicolons\n\n\n\n\n\n\nComma-first\n\n\njavascript\nvar x = {\n  foo: 'bar'\n, baz: 'boo'\n, wuz: 'foz'\n};\n\n\n\n\n\n\nBrackets for \nfunction\n, \nif\n, etc... go on same line, \nelse\n gets sandwiched\n\n\njavascript\nif (foo === bar) {\n  // do something\n} else {\n  // do something else\n}\n\n\n\n\n\n\nSpace after \nif\n, \nfor\n, and \nfunction\n:\n\n\njavascript\nif (foo === bar) {\n\n\njavascript\nfor (var i = 0; i \n 10; i ++) {\n\n\njavascript\nvar lol = function (foo) {\n\nnot\n\njavascript\nif(foo === bar) {\n\n\njavascript\nfor(var i = 0; i \n 10; i ++) {\n\n\njavascript\nvar lol = function(foo) {\n\n\n\n\n\n\nAvoid bracketless \nif\n for one-liners:\n\n\njavascript\nif (foo === bar) {\n  foo++;\n}\n\nnot\n\njavascript\nif (foo === bar)\n  foo++;\n\nexcept in the case of short-circuiting to a callback in the event of an error\n\njavascript\nif (err) return cb(err);\n\n\n\n\n\n\nUse \n===\n, not \n==\n, and \n!==\n, not \n!=\n for no surprises\n\n\n\n\nLine length shouldn't be longer than 79 characters\n\n\n\n\nBreak up long strings like this:\n\n\njavascript\nmyFunc(\"This is a really long string that's longer \" +\n        \"than 79 characters so I broke it up, woo\");\n\n\n\n\n\n\nComments should line up with code\n\n\njavascript\nif (foo === 5) {\n  myFunc(foo);\n  // foo++;\n}\n\nnot\n\njavascript\nif (foo === 5) {\n  myFunc(foo);\n//foo++;\n}\n\n\n\n\n\n\nSubclassing by extending prototypes\n\n\n```javascript\nvar _ = require('underscore');\n\n\nvar SuperClass = function () {\n  this.init();\n};\n\n\nSuperClass.prototype.init = function () {\n  // initialize\n};\n\n\n// Create a subclass\n\n\nvar SubClass = function () {\n    this.init();\n};\n\n\n_.extend(SubClass.prototype, SuperClass.prototype);\n```\n\n\n\n\n\n\nCallbacks are always last in function definitions\n\n\njavascript\nvar foo = function (arg1, arg2, cb) {\n  ...\n};\n\n\n\n\n\n\nDefine functions as variables\n\n\njavascript\nvar myFunc = function (a, b, c) {};\n\nnot\n\njavascript\nfunction myFunc (a, b, c) {}\n\n\n\n\n\n\nVariable names should be camelCased:\n\n\njavascript\nvar myVariable = 42;\n\nnot\n\njavascript\nvar my_variable = 42;\n\n\n\n\n\n\nCheck for undefined\n\n\njavascript\ntypeof myVariable === \"undefined\"\n\nnot\n\njavascript\nmyVariable === undefined\n\n\n\n\n\n\nDefine a variable with a default value\n\n\njavascript\nvar x = y || z;\n\nnot\n\njavascript\nvar x = y ? y : z;\n\n\n\n\n\n\nTest Style:\n\n\nKeep on the same line if it makes sense semantically and length is not an issue:\n\n\nExamples:\n\n\n  driver.elementByTagName('el1').should.become(\n123\n)\n    .nodeify(done);\n\n  driver\n    .elementsByTagName('el1').should.eventually.have.length(0)\n    .nodeify(done);\n\n\n\n\nAlternatively use extra indents to improve readability:\n\n\nh.driver\n  .elementById('comments')\n    .clear()\n    .click()\n    .keys(\nhello world\n)\n    .getValue()\n    .should.become(\nhello world\n)\n  .elementById('comments')\n    .getValue().should.become(\nhello world\n)\n  .nodeify(done);\n\nh.driver\n  .execute(\n'nan'--\n)\n    .should.be.rejectedWith(\nstatus: 13\n)\n  .nodeify(done);", 
            "title": "Style guide"
        }, 
        {
            "location": "/contributing/style-guide/#style-guide-for-contributors", 
            "text": "Thanks for your contribution to Appium! Here are the principles we use when\nwriting javascript. Please conform to these so we can merge your pull request\n without going back and forth about style. The main principle is:  make your\n code look like the surrounding code .", 
            "title": "Style guide for contributors"
        }, 
        {
            "location": "/contributing/style-guide/#rebasing", 
            "text": "Commits in a pull request should consist of  logical changes .\nIf there are multiple authors, make sure each author has their own commit.\nIt's not a good idea to modify author information. Merge commits should be\nrebased out of pull requests.", 
            "title": "Rebasing"
        }, 
        {
            "location": "/contributing/style-guide/#linting", 
            "text": "All code (except for code in  bootstrap.js  which uses proprietary Apple\nmethods) must pass JSLint. To check your code, you can simply run  grunt\nlint  from the Appium repo dir. If you've created a new .js file,\nplease make sure it is covered by the wildcards in  grunt.js  or that it is\nadded specifically.  It's easy to have your code linted as you type, which makes the whole process\nmuch smoother. We like  jshint ,\nwhich has integrations with a lot of source code editors. The file  .jshintrc  is checked into the repo, and its contents are:  {\n   laxcomma : true,\n   strict : true,\n   undef : true,\n   unused : true,\n   node : true,\n   eqeqeq : true,\n   trailing : true,\n   indent : 2\n}  Since jshint does not enforce code style anymore, we also use jscs , for which it also exists some\nsource editor integrations. The configuration file is:  {\n   excludeFiles : [ submodules/** ,  node_modules/** ,\n     ./lib/server/static/** ,  ./lib/devices/firefoxos/atoms/*.js ,\n     ./test/harmony/**/*.js ,  ./sample-code/examples/node/**/*-yiewd.js ,\n     ./sample-code/apps/** ,  ./sample-code/examples/php/vendor/** ],\n   requireCurlyBraces : [ for ,  while ,  do ,  try ,  catch ],\n   requireSpaceAfterKeywords : [ if ,  else ,  for ,  while ,  do ,  switch ,\n     return ,  try ,  catch ,  function ],\n   disallowMixedSpacesAndTabs : true,\n   disallowTrailingWhitespace : true,\n   requireSpacesInFunctionExpression : {\n     beforeOpeningCurlyBrace : true\n  }\n}  These configuration files define the warnings you will see in your favorite\neditor. See  this page for jshint  and this page for jscs  to\nget the list of editors and platforms supported and how setup your editor for\nautomatic linting.", 
            "title": "Linting"
        }, 
        {
            "location": "/contributing/style-guide/#style-notes", 
            "text": "Use two spaces for indentation,  no tabs   Use single spaces around operators  javascript\nvar x = 1; \nnot javascript\nvar x=1;    Spaces after commas and colons in lists, objects, function calls, etc...  javascript\nvar x = myFunc(\"lol\", {foo: bar, baz: boo}); \nnot javascript\nvar x = myFunc(\"lol\",{foo:bar,baz:boo});    Always end statements with semicolons    Comma-first  javascript\nvar x = {\n  foo: 'bar'\n, baz: 'boo'\n, wuz: 'foz'\n};    Brackets for  function ,  if , etc... go on same line,  else  gets sandwiched  javascript\nif (foo === bar) {\n  // do something\n} else {\n  // do something else\n}    Space after  if ,  for , and  function :  javascript\nif (foo === bar) {  javascript\nfor (var i = 0; i   10; i ++) {  javascript\nvar lol = function (foo) { \nnot javascript\nif(foo === bar) {  javascript\nfor(var i = 0; i   10; i ++) {  javascript\nvar lol = function(foo) {    Avoid bracketless  if  for one-liners:  javascript\nif (foo === bar) {\n  foo++;\n} \nnot javascript\nif (foo === bar)\n  foo++; \nexcept in the case of short-circuiting to a callback in the event of an error javascript\nif (err) return cb(err);    Use  === , not  == , and  !== , not  !=  for no surprises   Line length shouldn't be longer than 79 characters   Break up long strings like this:  javascript\nmyFunc(\"This is a really long string that's longer \" +\n        \"than 79 characters so I broke it up, woo\");    Comments should line up with code  javascript\nif (foo === 5) {\n  myFunc(foo);\n  // foo++;\n} \nnot javascript\nif (foo === 5) {\n  myFunc(foo);\n//foo++;\n}    Subclassing by extending prototypes  ```javascript\nvar _ = require('underscore');  var SuperClass = function () {\n  this.init();\n};  SuperClass.prototype.init = function () {\n  // initialize\n};  // Create a subclass  var SubClass = function () {\n    this.init();\n};  _.extend(SubClass.prototype, SuperClass.prototype);\n```    Callbacks are always last in function definitions  javascript\nvar foo = function (arg1, arg2, cb) {\n  ...\n};    Define functions as variables  javascript\nvar myFunc = function (a, b, c) {}; \nnot javascript\nfunction myFunc (a, b, c) {}    Variable names should be camelCased:  javascript\nvar myVariable = 42; \nnot javascript\nvar my_variable = 42;    Check for undefined  javascript\ntypeof myVariable === \"undefined\" \nnot javascript\nmyVariable === undefined    Define a variable with a default value  javascript\nvar x = y || z; \nnot javascript\nvar x = y ? y : z;", 
            "title": "Style notes"
        }, 
        {
            "location": "/contributing/style-guide/#test-style", 
            "text": "Keep on the same line if it makes sense semantically and length is not an issue:  Examples:    driver.elementByTagName('el1').should.become( 123 )\n    .nodeify(done);\n\n  driver\n    .elementsByTagName('el1').should.eventually.have.length(0)\n    .nodeify(done);  Alternatively use extra indents to improve readability:  h.driver\n  .elementById('comments')\n    .clear()\n    .click()\n    .keys( hello world )\n    .getValue()\n    .should.become( hello world )\n  .elementById('comments')\n    .getValue().should.become( hello world )\n  .nodeify(done);\n\nh.driver\n  .execute( 'nan'-- )\n    .should.be.rejectedWith( status: 13 )\n  .nodeify(done);", 
            "title": "Test Style:"
        }, 
        {
            "location": "/contributing/version-branch-release/", 
            "text": "Appium Version, Branch, and Release Models\n\n\nVersioning\n\n\nFollowing 1.3.6, Appium switched to semantic versioning: \nmajor | minor | patch | [-beta{N}]\n. E.g., \n1.4.1\n or \n2.4.0-Beta4\n.\n\n Major: API-breaking changes; new features\n\n Minor: Backward-compatible changes; may or may not include new features\n* Patch: Quick fix engineering; no new features\n\n\nThis makes Appium\u2019s versioning consistent with other major projects in the NPM ecosystem. It also works well with the trunk-based development model described below.\n\n\nBranching and Release Model\n\n\nAppium uses \nTrunk Based Development\n. As Paul Hammant explains,\n\n\n\n\nTrunk Based Development (TBD) is where all developers (for a particular deployable unit) commit to one shared branch under source-control. That branch is going to be colloquially known as trunk. \n\n\n\u2026 Branches are made for a release. Developers are not allowed to make branches in that shared place. Only release engineers commit to those branches, and indeed create each release branch. They may also cherry-pick individual commits to that branch if there is a desire to do so. \n\n\n\u2026 The release branch that will live for a short time before it is replaced by another release branch, takes everything from trunk when it is created. In terms of merges, only cherry-picks FROM trunk TO the release branch are supported.\n\n\n\n\nMilestones\n\n\nThe versioning and release model shape how we set Appium milestones. The next milestone is always a Major.Minor release. Triaged bugs and features that aren't associated with the next Major.Minor release should be backlogged in eponymously-named milestones (i.e., \nBugs\n and \nFeatures\n). In general, our goal is a minor release every 8 to 10 weeks. This includes approximately a week of Beta testing and another week for fixes and final changes. Hotfixes are released (Major.Minor.Patch) as needed between the Major.Minor versions. This allows us to get fixes out quickly while minimizing the risk of regression.\n\n\nWorkflow\n\n\nFor Appium, the basic flow looks like this:\n\n\n\n\nAll PRs go to \nmaster\n (aka \ntrunk\n).\n\n\nWhoever is leading a release acts as the \"release engineer\" (RE). When the release is ready to be shared (\u201cBeta\" status or better), the RE creates a new branch \nv[Major].[Minor].[Patch]-branch\n.\n\n\nPRs continue to go to \nmaster\n.\n\n\nIf the release requires fixes committed to \nmaster\n, the RE cherrypicks those commits into the release branch. \n\n\nThe release branch can be amended with hotfixes for subsequent patch releases. This allows the team to carefully scope small changesets for quick release. Fixes can also be pulled into previous release  branches branches when needed.  \n\n\nRinse, repeat.\n\n\n\n\nDevelopers can maintain working branches however they like. These are strictly for personal use. All \u201cofficial\u201d branches should conform to the model defined above.\n\n\nExample\n\n\n\n\nIt\u2019s 1 June. The Appium team plans on releasing 20.1-beta on 15 July and the full 20.1 release on 1 August.\n\n\nFor the next six weeks, the team commits their work to \nmaster\n.\n\n\nOn 15 July, the acting RE creates \n20.1-branch\n. The first node is tagged \u201c20.1.0 Beta\u201d.\n\n\nOne team member begins fixing bugs in the beta. The fixes are committed to \nmaster\n.\n\n\nOther contributors begin committing changes that are planned for 20.2. These also go to \nmaster\n.\n\n\nThe RE cherrypicks the fixes into \n20.1-branch\n, leaving the other changes on \nmaster\n.\n\n\nThe team celebrates that all the beta bugs are fixed for the 1 August release.\n\n\nThe RE tags HEAD of \n20.1-branch\n as \n20.1.0\n and publishes the release.\n\n\nA few weeks later, a crash is discovered in \n20.1.0\n and users need a fix NOW.\n\n\nThe acting RE pulls the crash fix from master into \n20.1-branch\n, tags HEAD as \n20.1.1\n, and publishes the hotfix.\n\n\nThe cycle repeats once the \n20.2\n release is ready.", 
            "title": "Version branch release"
        }, 
        {
            "location": "/contributing/version-branch-release/#appium-version-branch-and-release-models", 
            "text": "", 
            "title": "Appium Version, Branch, and Release Models"
        }, 
        {
            "location": "/contributing/version-branch-release/#versioning", 
            "text": "Following 1.3.6, Appium switched to semantic versioning:  major | minor | patch | [-beta{N}] . E.g.,  1.4.1  or  2.4.0-Beta4 .  Major: API-breaking changes; new features  Minor: Backward-compatible changes; may or may not include new features\n* Patch: Quick fix engineering; no new features  This makes Appium\u2019s versioning consistent with other major projects in the NPM ecosystem. It also works well with the trunk-based development model described below.", 
            "title": "Versioning"
        }, 
        {
            "location": "/contributing/version-branch-release/#branching-and-release-model", 
            "text": "Appium uses  Trunk Based Development . As Paul Hammant explains,   Trunk Based Development (TBD) is where all developers (for a particular deployable unit) commit to one shared branch under source-control. That branch is going to be colloquially known as trunk.   \u2026 Branches are made for a release. Developers are not allowed to make branches in that shared place. Only release engineers commit to those branches, and indeed create each release branch. They may also cherry-pick individual commits to that branch if there is a desire to do so.   \u2026 The release branch that will live for a short time before it is replaced by another release branch, takes everything from trunk when it is created. In terms of merges, only cherry-picks FROM trunk TO the release branch are supported.", 
            "title": "Branching and Release Model"
        }, 
        {
            "location": "/contributing/version-branch-release/#milestones", 
            "text": "The versioning and release model shape how we set Appium milestones. The next milestone is always a Major.Minor release. Triaged bugs and features that aren't associated with the next Major.Minor release should be backlogged in eponymously-named milestones (i.e.,  Bugs  and  Features ). In general, our goal is a minor release every 8 to 10 weeks. This includes approximately a week of Beta testing and another week for fixes and final changes. Hotfixes are released (Major.Minor.Patch) as needed between the Major.Minor versions. This allows us to get fixes out quickly while minimizing the risk of regression.", 
            "title": "Milestones"
        }, 
        {
            "location": "/contributing/version-branch-release/#workflow", 
            "text": "For Appium, the basic flow looks like this:   All PRs go to  master  (aka  trunk ).  Whoever is leading a release acts as the \"release engineer\" (RE). When the release is ready to be shared (\u201cBeta\" status or better), the RE creates a new branch  v[Major].[Minor].[Patch]-branch .  PRs continue to go to  master .  If the release requires fixes committed to  master , the RE cherrypicks those commits into the release branch.   The release branch can be amended with hotfixes for subsequent patch releases. This allows the team to carefully scope small changesets for quick release. Fixes can also be pulled into previous release  branches branches when needed.    Rinse, repeat.   Developers can maintain working branches however they like. These are strictly for personal use. All \u201cofficial\u201d branches should conform to the model defined above.", 
            "title": "Workflow"
        }, 
        {
            "location": "/contributing/version-branch-release/#example", 
            "text": "It\u2019s 1 June. The Appium team plans on releasing 20.1-beta on 15 July and the full 20.1 release on 1 August.  For the next six weeks, the team commits their work to  master .  On 15 July, the acting RE creates  20.1-branch . The first node is tagged \u201c20.1.0 Beta\u201d.  One team member begins fixing bugs in the beta. The fixes are committed to  master .  Other contributors begin committing changes that are planned for 20.2. These also go to  master .  The RE cherrypicks the fixes into  20.1-branch , leaving the other changes on  master .  The team celebrates that all the beta bugs are fixed for the 1 August release.  The RE tags HEAD of  20.1-branch  as  20.1.0  and publishes the release.  A few weeks later, a crash is discovered in  20.1.0  and users need a fix NOW.  The acting RE pulls the crash fix from master into  20.1-branch , tags HEAD as  20.1.1 , and publishes the hotfix.  The cycle repeats once the  20.2  release is ready.", 
            "title": "Example"
        }, 
        {
            "location": "/setup/android-hax-emulator/", 
            "text": "Intel\u00ae Hardware Accelerated Execution Manager\n\n\nIf you find the android emulator a slow and your system runs on an Intel\u00ae\ncpu, you can check out HAXM. HAXM lets you leverage your hardware for\nvirtualization, accelerating the emulator.\n\n\n\n\nTo install HAXM open the Android SDK Manager, you will find the package\n  under Extras.\n\n\nYou can find all relevant documentation on \nIntel's website\n\n\nThis will require an x86 emulator image\n\n\nUse Intel's package to install HAXM; The Android SDK Manager appears to not\n  do so successfully, depending on the version you might have installed", 
            "title": "Android hax emulator"
        }, 
        {
            "location": "/setup/android-hax-emulator/#intel-hardware-accelerated-execution-manager", 
            "text": "If you find the android emulator a slow and your system runs on an Intel\u00ae\ncpu, you can check out HAXM. HAXM lets you leverage your hardware for\nvirtualization, accelerating the emulator.   To install HAXM open the Android SDK Manager, you will find the package\n  under Extras.  You can find all relevant documentation on  Intel's website  This will require an x86 emulator image  Use Intel's package to install HAXM; The Android SDK Manager appears to not\n  do so successfully, depending on the version you might have installed", 
            "title": "Intel\u00ae Hardware Accelerated Execution Manager"
        }, 
        {
            "location": "/setup/android-setup/", 
            "text": "Android Setup\n\n\nTo get started, you'll need to install Node.js (v4 or greater). Just\nfollow the \ninstructions for your flavor of linux\n.\n\n\nOnce you've got Node.js installed, install the \nAndroid SDK\n.\nYou will need to run the \nandroid\n tool (included in the SDK, under the 'tools' directory).\n\n\nRun the \nandroid\n tool and use it to install an API Level 17 or greater.\n\n\n(If you want to run Appium from source, you will also need \nApache Ant\n to build the bootstrap jar that Appium uses for running against Android simulators/devices.)\n\n\nFinally, set \n$ANDROID_HOME\n to be your Android SDK path. If you unzipped the\nAndroid SDK to /usr/local/adt/, for example, you should add this to your\nshell startup:\n\n\nexport ANDROID_HOME=\"/usr/local/adt/sdk\"\n\n\n\nNow you're set up to run Appium! (If you're running Appium from source, make sure to run \nnpm install\n from your Appium checkout to install all the\ndependencies.)\n\n\nAdditional Setup for Older Versions of Android\n\n\nAppium uses, and comes prepackaged with, a project called \nSelendroid\n for running Android\nversions 2.3 to 4.1.  Appium switches to using Selendroid automatically when it\ndetects older versions, but there is some additional setup required if you're\nrunning from source.\n\n\n\n\nMake sure you have \nMaven 3.1.1\n or\n  newer installed (\nmvn\n).\n\n\n\n\nRunning Appium Android Tests\n\n\nTo run tests on Linux, you will need to have the Android Emulator booted and\nrunning an AVD with API Level 17 or greater. Then run Appium (\nappium\n) after\ninstalling via NPM, or \nnode .\n in the source directory if running from source.\n\n\nSee the \nserver documentation\n for all the command line arguments.\n\n\nNotes\n\n\n\n\nThere exists a hardware accelerated emulator for android, it has its own\n  limitations. For more information you can check out this\n  \npage\n.\n\n\nMake sure that \nhw.battery=yes\n in your AVD's \nconfig.ini\n, if you want to\n  run any of the Appium tests, or use any of the power commands. As of Android 5.0, this is the default.\n\n\nSelendroid requires the following permission for instrumenting your app:\n  \nuses-permission android:name=\"android.**permission.INTERNET\"/\n,\n  please make sure your app has internet permission set when you are using selendroid or older versions of Android i.e. 2.3 to 4.1", 
            "title": "Android setup"
        }, 
        {
            "location": "/setup/android-setup/#android-setup", 
            "text": "To get started, you'll need to install Node.js (v4 or greater). Just\nfollow the  instructions for your flavor of linux .  Once you've got Node.js installed, install the  Android SDK .\nYou will need to run the  android  tool (included in the SDK, under the 'tools' directory).  Run the  android  tool and use it to install an API Level 17 or greater.  (If you want to run Appium from source, you will also need  Apache Ant  to build the bootstrap jar that Appium uses for running against Android simulators/devices.)  Finally, set  $ANDROID_HOME  to be your Android SDK path. If you unzipped the\nAndroid SDK to /usr/local/adt/, for example, you should add this to your\nshell startup:  export ANDROID_HOME=\"/usr/local/adt/sdk\"  Now you're set up to run Appium! (If you're running Appium from source, make sure to run  npm install  from your Appium checkout to install all the\ndependencies.)", 
            "title": "Android Setup"
        }, 
        {
            "location": "/setup/android-setup/#additional-setup-for-older-versions-of-android", 
            "text": "Appium uses, and comes prepackaged with, a project called  Selendroid  for running Android\nversions 2.3 to 4.1.  Appium switches to using Selendroid automatically when it\ndetects older versions, but there is some additional setup required if you're\nrunning from source.   Make sure you have  Maven 3.1.1  or\n  newer installed ( mvn ).", 
            "title": "Additional Setup for Older Versions of Android"
        }, 
        {
            "location": "/setup/android-setup/#running-appium-android-tests", 
            "text": "To run tests on Linux, you will need to have the Android Emulator booted and\nrunning an AVD with API Level 17 or greater. Then run Appium ( appium ) after\ninstalling via NPM, or  node .  in the source directory if running from source.  See the  server documentation  for all the command line arguments.", 
            "title": "Running Appium Android Tests"
        }, 
        {
            "location": "/setup/android-setup/#notes", 
            "text": "There exists a hardware accelerated emulator for android, it has its own\n  limitations. For more information you can check out this\n   page .  Make sure that  hw.battery=yes  in your AVD's  config.ini , if you want to\n  run any of the Appium tests, or use any of the power commands. As of Android 5.0, this is the default.  Selendroid requires the following permission for instrumenting your app:\n   uses-permission android:name=\"android.**permission.INTERNET\"/ ,\n  please make sure your app has internet permission set when you are using selendroid or older versions of Android i.e. 2.3 to 4.1", 
            "title": "Notes"
        }, 
        {
            "location": "/setup/ios-deploy/", 
            "text": "Deploying an iOS app to a real device\n\n\nTo prepare for your Appium tests to run on a real device, you will need to:\n\n\n\n\nBuild your app with specific device-targeted parameters\n\n\nUse \nideviceinstaller\n, a 3rd-party tool,\n to deploy this build to your device\n\n\n\n\nXcodebuild with parameters:\n\n\nA newer xcodebuild now allows settings to be specified. Taken from \ndeveloper.apple.com\n:\n\n\nxcodebuild [-project projectname] [-target targetname ...]\n             [-configuration configurationname] [-sdk [sdkfullpath | sdkname]]\n             [buildaction ...] [setting=value ...] [-userdefault=value ...]\n\n\n\n\nThis is a resource to explore the available \nsettings\n\n\nCODE_SIGN_IDENTITY (Code Signing Identity)\n    Description: Identifier. Specifies the name of a code signing identity.\n    Example value: iPhone Developer\n\n\n\n\nPROVISIONING_PROFILE is missing from the index of available commands,\nbut may be necessary.\n\n\nSpecify \"CODE_SIGN_IDENTITY\" \n \"PROVISIONING_PROFILE\" settings in the\nxcodebuild command:\n\n\nxcodebuild -sdk \niphoneos\n -target \ntarget_name\n -configuration \nDebug\n CODE_SIGN_IDENTITY=\niPhone Developer: Mister Smith\n PROVISIONING_PROFILE=\nXXXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXX\n\n\n\n\n\nOn success, the app will be built to your \napp_dir\n/build/\nconfiguration\n-iphoneos/\napp_name\n.app\n\n\nDeploy using ideviceinstaller\n\n\nTo install the latest tagged version of the ideviceinstaller using\nHomebrew, run the following commands in the terminal:\n\n\n``` center\n # The first command is only required if you don't have brew installed.\n\n\n\n\nruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\nbrew update\nbrew install ideviceinstaller\nideviceinstaller -u \n -i \n\n ```\n\n\n\n\nNext: \nRunning Appium on Real Devices", 
            "title": "Ios deploy"
        }, 
        {
            "location": "/setup/ios-deploy/#deploying-an-ios-app-to-a-real-device", 
            "text": "To prepare for your Appium tests to run on a real device, you will need to:   Build your app with specific device-targeted parameters  Use  ideviceinstaller , a 3rd-party tool,\n to deploy this build to your device", 
            "title": "Deploying an iOS app to a real device"
        }, 
        {
            "location": "/setup/ios-deploy/#xcodebuild-with-parameters", 
            "text": "A newer xcodebuild now allows settings to be specified. Taken from  developer.apple.com :  xcodebuild [-project projectname] [-target targetname ...]\n             [-configuration configurationname] [-sdk [sdkfullpath | sdkname]]\n             [buildaction ...] [setting=value ...] [-userdefault=value ...]  This is a resource to explore the available  settings  CODE_SIGN_IDENTITY (Code Signing Identity)\n    Description: Identifier. Specifies the name of a code signing identity.\n    Example value: iPhone Developer  PROVISIONING_PROFILE is missing from the index of available commands,\nbut may be necessary.  Specify \"CODE_SIGN_IDENTITY\"   \"PROVISIONING_PROFILE\" settings in the\nxcodebuild command:  xcodebuild -sdk  iphoneos  -target  target_name  -configuration  Debug  CODE_SIGN_IDENTITY= iPhone Developer: Mister Smith  PROVISIONING_PROFILE= XXXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXX   On success, the app will be built to your  app_dir /build/ configuration -iphoneos/ app_name .app", 
            "title": "Xcodebuild with parameters:"
        }, 
        {
            "location": "/setup/ios-deploy/#deploy-using-ideviceinstaller", 
            "text": "To install the latest tagged version of the ideviceinstaller using\nHomebrew, run the following commands in the terminal:  ``` center\n # The first command is only required if you don't have brew installed.   ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\nbrew update\nbrew install ideviceinstaller\nideviceinstaller -u   -i  \n ```   Next:  Running Appium on Real Devices", 
            "title": "Deploy using ideviceinstaller"
        }, 
        {
            "location": "/setup/parallel_tests/", 
            "text": "Parallel Android Tests\n\n\nAppium provides a way for users to automate multiple Android sessions on a single machine. All it involves is starting multiple Appium servers with different flags.\n\n\nThe important flags for automating multiple Android sessions are:\n\n\n\n\n-p\n the main Appium port\n\n\n-U\n the device id\n\n\n-bp\n the Appium bootstrap port\n\n\n--chromedriver-port\n the chromedriver port (if using webviews or chrome)\n\n\n--selendroid-port\n the selendroid port (if using selendroid)\n\n\n\n\nMore information on these flags can be found \nhere\n.\n\n\nIf we had two devices with the ID's 43364 and 32456, we would start two different Appium servers with the following commands:\n\n\nnode . -p 4492 -bp 2251  -U 32456\n\n\nnode . -p 4491  -bp 2252 -U 43364\n\n\nAs long as your Appium and Appium bootstrap ports are between 0 and 65536, all they have to be is different so that two Appium servers aren't trying to listen on the same port. Be sure that your -u flag corresponds with the correct device ID. This is how Appium knows which device to communicate with, so it must be accurate.\n\n\nIf you are using chromedriver or selendroid, set a different port for each server.\n\n\nIf you are using \nappium-uiautomator2-driver\n, set a different system port for each Appium instanceset with \nsystemPort\n capability since sometimes there can be a port conflict if different ports aren't used, such as in \nthis issue\n.\n\n\nParallel iOS Tests\n\n\nUnfortunately, running local parallel iOS tests isn't currently possible. Unlike Android, only one version of the iOS simulator can be launched at a time, making it run multiple tests at once.\n\n\nIf you do want to run parallel iOS tests, you need to use Sauce. Simply upload your Appium test to Sauce, and it can run as many parallel iOS or Android tests as your account allows. See more about running your tests on Sauce \nhere\n.", 
            "title": "Parallel tests"
        }, 
        {
            "location": "/setup/parallel_tests/#parallel-android-tests", 
            "text": "Appium provides a way for users to automate multiple Android sessions on a single machine. All it involves is starting multiple Appium servers with different flags.  The important flags for automating multiple Android sessions are:   -p  the main Appium port  -U  the device id  -bp  the Appium bootstrap port  --chromedriver-port  the chromedriver port (if using webviews or chrome)  --selendroid-port  the selendroid port (if using selendroid)   More information on these flags can be found  here .  If we had two devices with the ID's 43364 and 32456, we would start two different Appium servers with the following commands:  node . -p 4492 -bp 2251  -U 32456  node . -p 4491  -bp 2252 -U 43364  As long as your Appium and Appium bootstrap ports are between 0 and 65536, all they have to be is different so that two Appium servers aren't trying to listen on the same port. Be sure that your -u flag corresponds with the correct device ID. This is how Appium knows which device to communicate with, so it must be accurate.  If you are using chromedriver or selendroid, set a different port for each server.  If you are using  appium-uiautomator2-driver , set a different system port for each Appium instanceset with  systemPort  capability since sometimes there can be a port conflict if different ports aren't used, such as in  this issue .", 
            "title": "Parallel Android Tests"
        }, 
        {
            "location": "/setup/parallel_tests/#parallel-ios-tests", 
            "text": "Unfortunately, running local parallel iOS tests isn't currently possible. Unlike Android, only one version of the iOS simulator can be launched at a time, making it run multiple tests at once.  If you do want to run parallel iOS tests, you need to use Sauce. Simply upload your Appium test to Sauce, and it can run as many parallel iOS or Android tests as your account allows. See more about running your tests on Sauce  here .", 
            "title": "Parallel iOS Tests"
        }, 
        {
            "location": "/setup/platform-support/", 
            "text": "Appium Platform Support\n\n\nAppium supports a variety of platforms and testing modalities (native,\nhybrid, web, real devices, simulators, etc...). This document is designed to\nmake explicit the level of support and requirements for each of these.\n\n\niOS Support\n\n\nSee \nRunning on OS X: iOS\n for iOS requirements and setup\ninstructions.\n\n\n\n\nVersions: 7.1 and up\n\n\nDevices: iPhone Simulator, iPad Simulator, and real iPhones and iPads\n\n\nNative app support: Yes, with debug version of .app (simulator),\n  or correctly-signed .ipa (real devices). Underlying support is provided by\n  Apple's \nXCUITest\n (or \nUIAutomation\n for older versions)\n  framework.\n\n\nMobile web support: Yes, via automation of mobile Safari. For real devices,\n  \nios-webkit-remote-debugger\n is required, and automation of native aspects of\n  the Safari interface is not possible. See the \nmobile web doc\n for instructions.\n\n\nHybrid support: Yes. For real devices, ios-webkit-remote-debugger is\n  required. See the \nhybrid doc\n for instructions.\n\n\nSupport for automating multiple apps in one session: No\n\n\nSupport for automating multiple devices simultaneously: No\n\n\nSupport for automating vendor-provided or third-party apps: Only\n  vendor-provided apps (Preferences, Maps, etc...), and only on the simulator. For iOS 10+, you can automate the home screen as well.\n\n\nSupport for automating custom, non-standard UI controls: Minimal. You need to\n  set accessibility information on the control which enables some basic\n  automation.\n\n\n\n\nAndroid Support\n\n\nSee \nRunning on OS X: Android\n,\n\nRunning on Windows\n, or\n\nRunning on Linux\n for Android requirements and setup\ninstructions.\n\n\n\n\nVersions: 2.3 and up\n\n\nVersions 2.3 through 4.2 are supported via Appium's bundled version of\n    \nSelendroid\n, which utilizes \nInstrumentation\n. Selendroid has a different set of commands than the default Appium (though this is rapidly being minimized) and a different support profile. To access this automation backend, use the \nautomationName\n capability with the value \nSelendroid\n.\n\n\nVersions 4.2 and up are supported via Appium's own \nUiAutomator\n\n      libraries. This is the default automation backend.\n\n\nDevices: Android emulators and real Android devices\n\n\nNative app support: Yes\n\n\nMobile web support: Yes (but not when using Selendroid backend). Automation\n  is effected using a bundled \nChromedriver\n\n  server as a proxy. With 4.2 and 4.3, automation works on official Chrome\n  browser or Chromium only. With 4.4+, automation also works on the built-in\n  \"Browser\" app. Chrome/Chromium/Browser must already be installed on the\n  device under test. See the \nmobile web doc\n for instructions.\n\n\nHybrid support: Yes. See the \nhybrid doc\n for instructions.\n\n\nWith default Appium automation backend: versions 4.4 and up\n\n\nWith Selendroid automation backend: versions 2.3 and up\n\n\nSupport for automating multiple apps in one session: Yes (but not when\n  using the Selendroid backend)\n\n\nSupport for automating multiple devices simultaneously: Yes,\n  though Appium must be started using different ports for the server\n   parameters \n--port\n, \n--bootstrap-port\n (or \n--selendroid-port\n) and/or\n  \n--chromedriver-port\n. See the \nserver args doc\n for more\n  information on these parameters.\n\n\nSupport for automating vendor-provided or third-party apps: Yes (but not\n  when using the Selendroid backend)\n\n\nSupport for automating custom, non-standard UI controls: No\n\n\n\n\nWindows Desktop Support\n\n\nSee these docs for details:\n\n\n\n\nRunning on Windows\n\n\nWindows App Testing", 
            "title": "Platform support"
        }, 
        {
            "location": "/setup/platform-support/#appium-platform-support", 
            "text": "Appium supports a variety of platforms and testing modalities (native,\nhybrid, web, real devices, simulators, etc...). This document is designed to\nmake explicit the level of support and requirements for each of these.", 
            "title": "Appium Platform Support"
        }, 
        {
            "location": "/setup/platform-support/#ios-support", 
            "text": "See  Running on OS X: iOS  for iOS requirements and setup\ninstructions.   Versions: 7.1 and up  Devices: iPhone Simulator, iPad Simulator, and real iPhones and iPads  Native app support: Yes, with debug version of .app (simulator),\n  or correctly-signed .ipa (real devices). Underlying support is provided by\n  Apple's  XCUITest  (or  UIAutomation  for older versions)\n  framework.  Mobile web support: Yes, via automation of mobile Safari. For real devices,\n   ios-webkit-remote-debugger  is required, and automation of native aspects of\n  the Safari interface is not possible. See the  mobile web doc  for instructions.  Hybrid support: Yes. For real devices, ios-webkit-remote-debugger is\n  required. See the  hybrid doc  for instructions.  Support for automating multiple apps in one session: No  Support for automating multiple devices simultaneously: No  Support for automating vendor-provided or third-party apps: Only\n  vendor-provided apps (Preferences, Maps, etc...), and only on the simulator. For iOS 10+, you can automate the home screen as well.  Support for automating custom, non-standard UI controls: Minimal. You need to\n  set accessibility information on the control which enables some basic\n  automation.", 
            "title": "iOS Support"
        }, 
        {
            "location": "/setup/platform-support/#android-support", 
            "text": "See  Running on OS X: Android , Running on Windows , or Running on Linux  for Android requirements and setup\ninstructions.   Versions: 2.3 and up  Versions 2.3 through 4.2 are supported via Appium's bundled version of\n     Selendroid , which utilizes  Instrumentation . Selendroid has a different set of commands than the default Appium (though this is rapidly being minimized) and a different support profile. To access this automation backend, use the  automationName  capability with the value  Selendroid .  Versions 4.2 and up are supported via Appium's own  UiAutomator \n      libraries. This is the default automation backend.  Devices: Android emulators and real Android devices  Native app support: Yes  Mobile web support: Yes (but not when using Selendroid backend). Automation\n  is effected using a bundled  Chromedriver \n  server as a proxy. With 4.2 and 4.3, automation works on official Chrome\n  browser or Chromium only. With 4.4+, automation also works on the built-in\n  \"Browser\" app. Chrome/Chromium/Browser must already be installed on the\n  device under test. See the  mobile web doc  for instructions.  Hybrid support: Yes. See the  hybrid doc  for instructions.  With default Appium automation backend: versions 4.4 and up  With Selendroid automation backend: versions 2.3 and up  Support for automating multiple apps in one session: Yes (but not when\n  using the Selendroid backend)  Support for automating multiple devices simultaneously: Yes,\n  though Appium must be started using different ports for the server\n   parameters  --port ,  --bootstrap-port  (or  --selendroid-port ) and/or\n   --chromedriver-port . See the  server args doc  for more\n  information on these parameters.  Support for automating vendor-provided or third-party apps: Yes (but not\n  when using the Selendroid backend)  Support for automating custom, non-standard UI controls: No", 
            "title": "Android Support"
        }, 
        {
            "location": "/setup/platform-support/#windows-desktop-support", 
            "text": "See these docs for details:   Running on Windows  Windows App Testing", 
            "title": "Windows Desktop Support"
        }, 
        {
            "location": "/setup/real-devices-android/", 
            "text": "Appium on Android Real Devices\n\n\nHooray! There is nothing extra to know about testing real Android devices: it\nworks exactly the same as testing on emulators. Make sure that your device\ncan connect to ADB and has Developer Mode enabled (the process for this differs\nfor different vendors, so check their documentation). For testing Chrome on a real\ndevice, you are responsible for ensuring that Chrome of an appropriate version\nis installed.\n\n\nAlso, you will want to make sure that \"Verify Apps\" in settings is\ndisabled/unchecked, otherwise it can prevent some of Appium's helper apps from\nlaunching and doing their job correctly.", 
            "title": "Real devices android"
        }, 
        {
            "location": "/setup/real-devices-android/#appium-on-android-real-devices", 
            "text": "Hooray! There is nothing extra to know about testing real Android devices: it\nworks exactly the same as testing on emulators. Make sure that your device\ncan connect to ADB and has Developer Mode enabled (the process for this differs\nfor different vendors, so check their documentation). For testing Chrome on a real\ndevice, you are responsible for ensuring that Chrome of an appropriate version\nis installed.  Also, you will want to make sure that \"Verify Apps\" in settings is\ndisabled/unchecked, otherwise it can prevent some of Appium's helper apps from\nlaunching and doing their job correctly.", 
            "title": "Appium on Android Real Devices"
        }, 
        {
            "location": "/setup/real-devices-ios/", 
            "text": "Appium on iOS Real Devices\n\n\nAppium has support for iOS real device testing.\n\n\nRunning your tests with Appium\n\n\nOnce your device and app are configured, you can run tests on that device by\npassing the \nudid\n desired capability, and the bundle ID (via the \nbundleId\n\ncapability, if the app is installed on the device) or the path to the \n.ipa\n or\n\n.app\n file via the \napp\n desired capability.\n\n\nDesired Capabilities\n\n\nYou can launch the app on a device by including the following desired\ncapabilities in your tests:\n\n\n\n\napp\n or \nbundleId\n - specifies the application, or, if it is already installed,\n   simply the bundle identifier of the app so that Appium can launch it\n\n\nudid\n - the specific id of the device to test on. This can also be set to\n   \nauto\n if there is only a single device, in which case Appium will determine\n   the device id and use it\n\n\n\n\nRefer to the \nAppium server capabilities\n page for more detail on\nthe capabilities that you can use.\n\n\nRequired Software\n\n\nAppium iOS real device support depends on a central third-party software suite,\n\nlibimobiledevice\n, which is easily installable\nwith \nHomebrew\n)\n\n\nbrew install libimobiledevice\n\n\n\n\nConfiguring iOS Real Device Tests: Xcode 7 and iOS 9.3 or below\n\n\nAutomating real devices with iOS 9.3 or below, using Xcode 7.3 or below (i.e.,\n\nInstruments\n-based testing) requires a relatively small amount of configuration.\nThe central requirement is to have a build of your app signed with a development\nprovisioning profile. Unfortunately Apple has removed all of its documentation\non using older versions of Xcode, but a good overview of the process can be\nfound \nhere\n\nand \nhere\n.\n\n\nIn a little more detail, to get started on a real device, you will need the following:\n\n\n\n\nAn \nApple Developer ID\n and a valid\nDeveloper Account with a configured development certificate and provisioning\nprofile.\n\n\nA valid iOS Development Certificate and Provisioning Profile are necessary to\ntest on a real device. Your app will also need to be signed. You can find\ninformation about this in the \nApple documentation\n.\n\n\nAn iPad or iPhone. Make sure this has been set up for development in Xcode.\n\n\nA signed \n.app\n or \n.ipa\n file of your app, or the source code to build one.\n\n\nA Mac with \nXcode\n and the Xcode Command\nLine Developer Tools.\n\n\n\n\nAppium handles installing the application to the device, using \nideviceinstaller\n\n(part of \nlibimobiledevice\n), but it is sometimes easier to pre-install your app\nusing Xcode to ensure there are no problems (see the \niOS deploy\n\ndocument for more information).\n\n\nTroubleshooting ideas\n\n\n\n\nMake sure UDID is correct by checking it in Xcode Organizer or iTunes. It\n   is a long string (20+ chars).\n\n\nMake sure that you can run your tests against the Simulator.\n\n\nDouble check that you can invoke your automation from Instruments.\n\n\nMake sure Instruments is not already running.\n\n\nMake sure UI Automation is enabled on your device. Settings -\n Developer -\n Enable UI Automation\n\n\n\n\nConfiguring iOS Real Device Tests: Xcode 8 and iOS 9.3 and above\n\n\nIn addition to the dependency on \nlibimobiledevice\n, Appium support for real\ndevices running iOS 9.3 and above using Xcode 8+ also depends on \nios-deploy\n,\nwhich is easily available through \nnpm\n\n\nnpm install -g ios-deploy\n\n\n\n\nUnfortunately, Apple changed the way it makes testing available, and the new\nway requires the installation of a helper application onto the device, through\nwhich the application under test is automated. While this is simple in theory,\nthe hoops of code signing and provisioning applications for development and\ntesting can make this a bit of a headache.\n\n\nThe application that Appium installs is called \nWebDriverAgent-Runner\n (found\n\nhere\n), and to do the install\nAppium needs to be able to configure its build.\n\n\nBasic (automatic) configuration\n\n\nThe easiest way to get up-and-running with Appium's XCUITest support on iOS\nreal devices is to use the automatic configuration strategy. There are two ways\nto do this:\n\n\n\n\nUse the \nxcodeOrgId\n and \nxcodeSigningId\n desired capabilities:\n\n\n\n\n    {\n      \nxcodeOrgId\n: \nTeam ID\n,\n      \nxcodeSigningId\n: \niPhone Developer\n\n    }\n\n\n\n\n\n\nCreate a \n.xcconfig\n file somewhere on your file system and add the following to it:\n\n\n\n\n    DEVELOPMENT_TEAM = \nTeam ID\n\n    CODE_SIGN_IDENTITY = iPhone Developer\n\n\n\n\nIn either case, the Team ID is a unique 10-character string generated by Apple\nthat is assigned to your team. You can find your Team ID using your developer\naccount. Sign in to \ndeveloper.apple.com/account\n,\nand click Membership in the sidebar. Your Team ID appears in the Membership\nInformation section under the team name. You can also find your team ID listed\nunder the \"Organizational Unit\" field in your iPhone Developer certificate in\nyour keychain.\n\n\nNote that these are mutually exclusive strategies; use \neither\n the\n\nxcodeConfigFile\n capability or the combination of \nxcodeOrgId\n and \nxcodeSigningId\n.\n\n\nOnce this configuration is done, it should just be a matter of starting your test\nspecifying a real device in your \nudid\n desired capability.\n\n\nIf this has not worked it will usually manifest itself in the Appium server logs\nas some error followed by \ninfo XCUITest xcodebuild exited with code '65' and\nsignal 'null'\n. This usually means that the necessary code signing is not set up\ncorrectly. Go on to the \nBasic (manual) configuration\n\nto fix.\n\n\nIf the \nWebDriverAgentRunner\n is successfully installed on the device, but in the\nAppium logs there is an error message something like:\n\n\n2017-01-24 09:02:18.358 xcodebuild[30385:339674] Error Domain=com.apple.platform.iphoneos Code=-12 \nUnable to launch com.apple.test.WebDriverAgentRunner-Runner\n UserInfo={NSLocalizedDescription=Unable to launch com.apple.test.WebDriverAgentRunner-Runner, NSUnderlyingError=0x7fa839cadc60 {Error Domain=DTXMessage Code=1 \n(null)\n UserInfo={DTXExceptionKey=The operation couldn\u2019t be completed. Unable to launch com.apple.test.WebDriverAgentRunner-Runner because it has an invalid code signature, inadequate entitlements or its profile has not been explicitly trusted by the user. : Failed to launch process with bundle identifier 'com.apple.test.WebDriverAgentRunner-Runner'}}}\n2017-01-24 09:02:18.358 xcodebuild[30385:339674] Error Domain=IDETestOperationsObserverErrorDomain Code=5 \nEarly unexpected exit, operation never finished bootstrapping - no restart will be attempted\n UserInfo={NSLocalizedDescription=Early unexpected exit, operation never finished bootstrapping - no restart will be attempted}\n\nTesting failed:\n    Test target WebDriverAgentRunner encountered an error (Early unexpected exit, operation never finished bootstrapping - no restart will be attempted)\n\n\n\n\nThe problem is that the developer is not trusted on the device. If you manually\ntry to run the \nWebDriverAgentRunner\n app on the device, you will see a popup\nmessage:\n\n\n\n\nYou can go to Settings =\n General =\n Device Management on the device to trust\nthe developer and allow the \nWebDriverAgentRunner\n app to be run (see \nApple\ndocumentation for more information\n).\n\n\nBasic (manual) configuration\n\n\nThere are many cases in which the basic automatic configuration is not enough. This\nusually has to do with code signing and the configuration of the project to be\nable to be run on the real device under test. Often this happens when the\ndevelopment account being used is a \"Free\" one, in which case it is not possible\nto create a wildcard provisioning profile, and will often not create one for the\ndefault application bundle.\n\n\nThis will manifest as something like an error that Xcode \nfailed to create\nprovisioning profile\n:\n\n\n\n\nThe easiest way around this is to create a provisioning profile by opening\n\nXcode\n and creating a new project:\n\n\n\n\nThe type does not matter, other than it being \"iOS\". \"Single View Application\"\nis the easiest:\n\n\n\n\nThe important part is to use a unique \"Product Name\" and \"Organization Name\". Also,\nat this point, specify your \"Team\".\n\n\n\n\nYou can confirm that the provisioning profile was created by looking at the \"Project\"\ntab:\n\n\n\n\nOr by going into your account preferences and seeing the provisioning profile:\n\n\n\n\nAt this point you have a valid provisioning profile. Make note of the bundle id\nyou associated with it, and add that in the \nupdatedWDABundleId\n desired\ncapability for your tests. Then follow the \ninitial instructions for automatic\nconfiguration\n.\n\n\nFull manual configuration\n\n\nAlternatively, the provisioning profile can be manually associated with the\nproject (keep in mind that this will have to be done each time the WebDriverAgent\nis updated, and is \nnot\n recommended):\n\n\n\n\nFind out where your Appium installation is:\n\n\n\n\n    $ which appium\n    /path/where/installed/bin/appium\n\n\n\n\n\n\nGiven this installation location, \n/path/where/installed/bin/appium\n, \nWebDriverAgent\n\n    will be found in \n/path/where/installed/lib/node_modules/appium/node_modules/appium-xcuitest-driver/WebDriverAgent\n.\n    Open a terminal and go to that location, then run the following in order to\n    set the project up:\n\n\n\n\n    mkdir -p Resources/WebDriverAgent.bundle\n    ./Scripts/bootstrap.sh -d\n\n\n\n\n\n\n\n\nOpen \nWebDriverAgent.xcodeproj\n in Xcode. For \nboth\n the \nWebDriverAgentLib\n\n    and \nWebDriverAgentRunner\n targets, select \"Automatically manage signing\"\n    in the \"General\" tab, and then select your \nDevelopment Team\n. This\n    should also auto select \nSigning Ceritificate\n. The outcome should look as\n    shown below:\n\n\n\n\n\n\nXcode may fail to create a provisioning profile for the \nWebDriverAgentRunner\n\n  target:\n\n\n\n\n\n\n\n\nThis necessitates manually changing the bundle id for the target by going\n  into the \"Build Settings\" tab, and changing the \"Product Bundle Identifier\"\n  from \ncom.facebook.WebDriverAgentRunner\n to something that Xcode will accept:\n\n\n\n\n\n\n\n\nGoing back to the \"General\" tab for the \nWebDriverAgentRunner\n target, you\n  should now see that it has created a provisioning profile and all is well:\n\n\n\n\n\n\n\n\n\n\nFinally, you can verify that everything works. Build the project:\n\n\n\n\n\n\n    xcodebuild -project WebDriverAgent.xcodeproj -scheme WebDriverAgentRunner -destination 'id=\nudid\n' test\n\n\n\n\nIf this was successful, the output should end with something like:\n\n\n    Test Suite 'All tests' started at 2017-01-23 15:49:12.585\n    Test Suite 'WebDriverAgentRunner.xctest' started at 2017-01-23 15:49:12.586\n    Test Suite 'UITestingUITests' started at 2017-01-23 15:49:12.587\n    Test Case '-[UITestingUITests testRunner]' started.\n        t =     0.00s     Start Test at 2017-01-23 15:49:12.588\n        t =     0.00s     Set Up\n\n\n\n\n\n\nTo completely verify, you can try accessing the WebDriverAgent server status\n    (\nnote:\n you \nmust\n be on the same network as the device, and know its IP\n    address, from Settings =\n Wi-Fi =\n Current Network):\n\n\n\n\n    export DEVICE_URL='http://\ndevice IP\n:8100'\n    export JSON_HEADER='-H \nContent-Type: application/json;charset=UTF-8, accept: application/json\n'\n    curl -X GET $JSON_HEADER $DEVICE_URL/status\n\n\n\n\nYou ought to get back output something like this:\n\n\n\n    {\n      \nvalue\n : {\n        \nstate\n : \nsuccess\n,\n        \nos\n : {\n          \nname\n : \niOS\n,\n          \nversion\n : \n10.2\n\n        },\n        \nios\n : {\n          \nsimulatorVersion\n : \n10.2\n,\n          \nip\n : \n192.168.0.7\n\n        },\n        \nbuild\n : {\n          \ntime\n : \nJan 23 2017 14:59:57\n\n        }\n      },\n      \nsessionId\n : \n8951A6DD-F3AD-410E-A5DB-D042F42F68A7\n,\n      \nstatus\n : 0\n    }", 
            "title": "Real devices ios"
        }, 
        {
            "location": "/setup/real-devices-ios/#appium-on-ios-real-devices", 
            "text": "Appium has support for iOS real device testing.", 
            "title": "Appium on iOS Real Devices"
        }, 
        {
            "location": "/setup/real-devices-ios/#running-your-tests-with-appium", 
            "text": "Once your device and app are configured, you can run tests on that device by\npassing the  udid  desired capability, and the bundle ID (via the  bundleId \ncapability, if the app is installed on the device) or the path to the  .ipa  or .app  file via the  app  desired capability.", 
            "title": "Running your tests with Appium"
        }, 
        {
            "location": "/setup/real-devices-ios/#desired-capabilities", 
            "text": "You can launch the app on a device by including the following desired\ncapabilities in your tests:   app  or  bundleId  - specifies the application, or, if it is already installed,\n   simply the bundle identifier of the app so that Appium can launch it  udid  - the specific id of the device to test on. This can also be set to\n    auto  if there is only a single device, in which case Appium will determine\n   the device id and use it   Refer to the  Appium server capabilities  page for more detail on\nthe capabilities that you can use.", 
            "title": "Desired Capabilities"
        }, 
        {
            "location": "/setup/real-devices-ios/#required-software", 
            "text": "Appium iOS real device support depends on a central third-party software suite, libimobiledevice , which is easily installable\nwith  Homebrew )  brew install libimobiledevice", 
            "title": "Required Software"
        }, 
        {
            "location": "/setup/real-devices-ios/#configuring-ios-real-device-tests-xcode-7-and-ios-93-or-below", 
            "text": "Automating real devices with iOS 9.3 or below, using Xcode 7.3 or below (i.e., Instruments -based testing) requires a relatively small amount of configuration.\nThe central requirement is to have a build of your app signed with a development\nprovisioning profile. Unfortunately Apple has removed all of its documentation\non using older versions of Xcode, but a good overview of the process can be\nfound  here \nand  here .  In a little more detail, to get started on a real device, you will need the following:   An  Apple Developer ID  and a valid\nDeveloper Account with a configured development certificate and provisioning\nprofile.  A valid iOS Development Certificate and Provisioning Profile are necessary to\ntest on a real device. Your app will also need to be signed. You can find\ninformation about this in the  Apple documentation .  An iPad or iPhone. Make sure this has been set up for development in Xcode.  A signed  .app  or  .ipa  file of your app, or the source code to build one.  A Mac with  Xcode  and the Xcode Command\nLine Developer Tools.   Appium handles installing the application to the device, using  ideviceinstaller \n(part of  libimobiledevice ), but it is sometimes easier to pre-install your app\nusing Xcode to ensure there are no problems (see the  iOS deploy \ndocument for more information).", 
            "title": "Configuring iOS Real Device Tests: Xcode 7 and iOS 9.3 or below"
        }, 
        {
            "location": "/setup/real-devices-ios/#troubleshooting-ideas", 
            "text": "Make sure UDID is correct by checking it in Xcode Organizer or iTunes. It\n   is a long string (20+ chars).  Make sure that you can run your tests against the Simulator.  Double check that you can invoke your automation from Instruments.  Make sure Instruments is not already running.  Make sure UI Automation is enabled on your device. Settings -  Developer -  Enable UI Automation", 
            "title": "Troubleshooting ideas"
        }, 
        {
            "location": "/setup/real-devices-ios/#configuring-ios-real-device-tests-xcode-8-and-ios-93-and-above", 
            "text": "In addition to the dependency on  libimobiledevice , Appium support for real\ndevices running iOS 9.3 and above using Xcode 8+ also depends on  ios-deploy ,\nwhich is easily available through  npm  npm install -g ios-deploy  Unfortunately, Apple changed the way it makes testing available, and the new\nway requires the installation of a helper application onto the device, through\nwhich the application under test is automated. While this is simple in theory,\nthe hoops of code signing and provisioning applications for development and\ntesting can make this a bit of a headache.  The application that Appium installs is called  WebDriverAgent-Runner  (found here ), and to do the install\nAppium needs to be able to configure its build.", 
            "title": "Configuring iOS Real Device Tests: Xcode 8 and iOS 9.3 and above"
        }, 
        {
            "location": "/setup/real-devices-ios/#basic-automatic-configuration", 
            "text": "The easiest way to get up-and-running with Appium's XCUITest support on iOS\nreal devices is to use the automatic configuration strategy. There are two ways\nto do this:   Use the  xcodeOrgId  and  xcodeSigningId  desired capabilities:       {\n       xcodeOrgId :  Team ID ,\n       xcodeSigningId :  iPhone Developer \n    }   Create a  .xcconfig  file somewhere on your file system and add the following to it:       DEVELOPMENT_TEAM =  Team ID \n    CODE_SIGN_IDENTITY = iPhone Developer  In either case, the Team ID is a unique 10-character string generated by Apple\nthat is assigned to your team. You can find your Team ID using your developer\naccount. Sign in to  developer.apple.com/account ,\nand click Membership in the sidebar. Your Team ID appears in the Membership\nInformation section under the team name. You can also find your team ID listed\nunder the \"Organizational Unit\" field in your iPhone Developer certificate in\nyour keychain.  Note that these are mutually exclusive strategies; use  either  the xcodeConfigFile  capability or the combination of  xcodeOrgId  and  xcodeSigningId .  Once this configuration is done, it should just be a matter of starting your test\nspecifying a real device in your  udid  desired capability.  If this has not worked it will usually manifest itself in the Appium server logs\nas some error followed by  info XCUITest xcodebuild exited with code '65' and\nsignal 'null' . This usually means that the necessary code signing is not set up\ncorrectly. Go on to the  Basic (manual) configuration \nto fix.  If the  WebDriverAgentRunner  is successfully installed on the device, but in the\nAppium logs there is an error message something like:  2017-01-24 09:02:18.358 xcodebuild[30385:339674] Error Domain=com.apple.platform.iphoneos Code=-12  Unable to launch com.apple.test.WebDriverAgentRunner-Runner  UserInfo={NSLocalizedDescription=Unable to launch com.apple.test.WebDriverAgentRunner-Runner, NSUnderlyingError=0x7fa839cadc60 {Error Domain=DTXMessage Code=1  (null)  UserInfo={DTXExceptionKey=The operation couldn\u2019t be completed. Unable to launch com.apple.test.WebDriverAgentRunner-Runner because it has an invalid code signature, inadequate entitlements or its profile has not been explicitly trusted by the user. : Failed to launch process with bundle identifier 'com.apple.test.WebDriverAgentRunner-Runner'}}}\n2017-01-24 09:02:18.358 xcodebuild[30385:339674] Error Domain=IDETestOperationsObserverErrorDomain Code=5  Early unexpected exit, operation never finished bootstrapping - no restart will be attempted  UserInfo={NSLocalizedDescription=Early unexpected exit, operation never finished bootstrapping - no restart will be attempted}\n\nTesting failed:\n    Test target WebDriverAgentRunner encountered an error (Early unexpected exit, operation never finished bootstrapping - no restart will be attempted)  The problem is that the developer is not trusted on the device. If you manually\ntry to run the  WebDriverAgentRunner  app on the device, you will see a popup\nmessage:   You can go to Settings =  General =  Device Management on the device to trust\nthe developer and allow the  WebDriverAgentRunner  app to be run (see  Apple\ndocumentation for more information ).", 
            "title": "Basic (automatic) configuration"
        }, 
        {
            "location": "/setup/real-devices-ios/#basic-manual-configuration", 
            "text": "There are many cases in which the basic automatic configuration is not enough. This\nusually has to do with code signing and the configuration of the project to be\nable to be run on the real device under test. Often this happens when the\ndevelopment account being used is a \"Free\" one, in which case it is not possible\nto create a wildcard provisioning profile, and will often not create one for the\ndefault application bundle.  This will manifest as something like an error that Xcode  failed to create\nprovisioning profile :   The easiest way around this is to create a provisioning profile by opening Xcode  and creating a new project:   The type does not matter, other than it being \"iOS\". \"Single View Application\"\nis the easiest:   The important part is to use a unique \"Product Name\" and \"Organization Name\". Also,\nat this point, specify your \"Team\".   You can confirm that the provisioning profile was created by looking at the \"Project\"\ntab:   Or by going into your account preferences and seeing the provisioning profile:   At this point you have a valid provisioning profile. Make note of the bundle id\nyou associated with it, and add that in the  updatedWDABundleId  desired\ncapability for your tests. Then follow the  initial instructions for automatic\nconfiguration .", 
            "title": "Basic (manual) configuration"
        }, 
        {
            "location": "/setup/real-devices-ios/#full-manual-configuration", 
            "text": "Alternatively, the provisioning profile can be manually associated with the\nproject (keep in mind that this will have to be done each time the WebDriverAgent\nis updated, and is  not  recommended):   Find out where your Appium installation is:       $ which appium\n    /path/where/installed/bin/appium   Given this installation location,  /path/where/installed/bin/appium ,  WebDriverAgent \n    will be found in  /path/where/installed/lib/node_modules/appium/node_modules/appium-xcuitest-driver/WebDriverAgent .\n    Open a terminal and go to that location, then run the following in order to\n    set the project up:       mkdir -p Resources/WebDriverAgent.bundle\n    ./Scripts/bootstrap.sh -d    Open  WebDriverAgent.xcodeproj  in Xcode. For  both  the  WebDriverAgentLib \n    and  WebDriverAgentRunner  targets, select \"Automatically manage signing\"\n    in the \"General\" tab, and then select your  Development Team . This\n    should also auto select  Signing Ceritificate . The outcome should look as\n    shown below:    Xcode may fail to create a provisioning profile for the  WebDriverAgentRunner \n  target:     This necessitates manually changing the bundle id for the target by going\n  into the \"Build Settings\" tab, and changing the \"Product Bundle Identifier\"\n  from  com.facebook.WebDriverAgentRunner  to something that Xcode will accept:     Going back to the \"General\" tab for the  WebDriverAgentRunner  target, you\n  should now see that it has created a provisioning profile and all is well:      Finally, you can verify that everything works. Build the project:        xcodebuild -project WebDriverAgent.xcodeproj -scheme WebDriverAgentRunner -destination 'id= udid ' test  If this was successful, the output should end with something like:      Test Suite 'All tests' started at 2017-01-23 15:49:12.585\n    Test Suite 'WebDriverAgentRunner.xctest' started at 2017-01-23 15:49:12.586\n    Test Suite 'UITestingUITests' started at 2017-01-23 15:49:12.587\n    Test Case '-[UITestingUITests testRunner]' started.\n        t =     0.00s     Start Test at 2017-01-23 15:49:12.588\n        t =     0.00s     Set Up   To completely verify, you can try accessing the WebDriverAgent server status\n    ( note:  you  must  be on the same network as the device, and know its IP\n    address, from Settings =  Wi-Fi =  Current Network):       export DEVICE_URL='http:// device IP :8100'\n    export JSON_HEADER='-H  Content-Type: application/json;charset=UTF-8, accept: application/json '\n    curl -X GET $JSON_HEADER $DEVICE_URL/status  You ought to get back output something like this:      {\n       value  : {\n         state  :  success ,\n         os  : {\n           name  :  iOS ,\n           version  :  10.2 \n        },\n         ios  : {\n           simulatorVersion  :  10.2 ,\n           ip  :  192.168.0.7 \n        },\n         build  : {\n           time  :  Jan 23 2017 14:59:57 \n        }\n      },\n       sessionId  :  8951A6DD-F3AD-410E-A5DB-D042F42F68A7 ,\n       status  : 0\n    }", 
            "title": "Full manual configuration"
        }, 
        {
            "location": "/setup/real-devices/", 
            "text": "Appium Support for Real Device Testing\n\n\nAppium has support for real device testing.\n\n\n\n\nFor \nAndroid\n testing, see \nandroid real device documentation\n\n\nFor \niOS\n testing, see \niOS real device documentation", 
            "title": "Real devices"
        }, 
        {
            "location": "/setup/real-devices/#appium-support-for-real-device-testing", 
            "text": "Appium has support for real device testing.   For  Android  testing, see  android real device documentation  For  iOS  testing, see  iOS real device documentation", 
            "title": "Appium Support for Real Device Testing"
        }, 
        {
            "location": "/setup/running-on-linux/", 
            "text": "Running Appium on Linux\n\n\nLimitations\n\n\nIf you are running Appium on Linux, you cannot use the prebuilt '.app',\nwhich is built for OS X only. Additionally, you will not be able to test iOS\napps because Appium relies on OS X-only libraries to support iOS testing.\n\n\nSetup (Android)\n\n\nInstructions for setting up Android and running tests on Linux are the same as\nthose on Mac OS X. See the \nAndroid setup docs\n.", 
            "title": "Running on linux"
        }, 
        {
            "location": "/setup/running-on-linux/#running-appium-on-linux", 
            "text": "", 
            "title": "Running Appium on Linux"
        }, 
        {
            "location": "/setup/running-on-linux/#limitations", 
            "text": "If you are running Appium on Linux, you cannot use the prebuilt '.app',\nwhich is built for OS X only. Additionally, you will not be able to test iOS\napps because Appium relies on OS X-only libraries to support iOS testing.", 
            "title": "Limitations"
        }, 
        {
            "location": "/setup/running-on-linux/#setup-android", 
            "text": "Instructions for setting up Android and running tests on Linux are the same as\nthose on Mac OS X. See the  Android setup docs .", 
            "title": "Setup (Android)"
        }, 
        {
            "location": "/setup/running-on-osx/", 
            "text": "Running Appium on Mac OS X\n\n\nAppium on OS X supports iOS and Android testing.\n\n\nSystem setup (iOS)\n\n\n\n\nAppium requires Mac OS X 10.10 or greater.\n\n\nMake sure you have Xcode and the iOS SDK(s) installed. Xcode version 7.1 is\n  recommended as earlier versions of Xcode are limited in which versions of iOS\n  they can test against. See the next section for more detail.\n\n\nYou need to authorize use of the iOS Simulator. See \nbelow\n.\n\n\nIf you're on Xcode 7.x and up, Instruments Without Delay (IWD) does not work.\n  You can enable IWD (which will significantly speed up your tests) using \nthis\n  method\n\n\nIf you're on Xcode 6, you need to launch each simulator you intend to use\n  with appium in advance, and change the default to actually show the soft\n  keyboard if you want sendKeys to work. You can do this by clicking on any\n  textfield and hitting command-K until you notice the soft keyboard show up.\n\n\nIf you're on Xcode 6, you have a feature in Xcode called Devices\n  (command-shift-2). You need to make sure that whichever deviceName you choose\n  to use with Appium in your capabilities, there is only one of those per sdk\n  version. In other words, if you send in a deviceName cap of \"iPhone 5s\" and\n  a platformVersion cap of \"8.0\", you need to make sure that there is exactly\n  one device with the name \"iPhone 5s\" and the 8.0 sdk in your devices list.\n  Otherwise, Appium won't know which one to use.\n\n\nIn iOS 8, devices each have their own setting which enables or disables\n  UIAutomation. It lives in a \"Developer\" view in the Settings app. You need to\n  verify that UIAutomation is enabled in this view before the simulator or\n  device can be automated.\n\n\n\n\nAuthorizing iOS on the computer\n\n\nYou need to authorize use of the iOS Simulator by running the \nauthorize-ios\n\nbinary made available through \nnpm\n. Install the program by running\n\n\nnpm install -g authorize-ios\n\n\n\n\nAnd the invoke the program using\n\n\nsudo authorize-ios\n\n\n\n\nIf you are running \nAppium.app\n, you can\nauthorize iOS through the GUI.\n\n\nYou need to do this every time you install a new version of Xcode.\n\n\nTesting against multiple iOS SDKs\n\n\nXcode version 7.1 allows for automatic testing against iOS versions 7.1 and later.\n\n\nIf you're using multiple Xcode versions, you can switch between them using:\n\n\nsudo xcode-select --switch \nlt;path to required xcode\ngt;\n\n\n\nTesting using Xcode 8 (including iOS 10) with XCUITest\n\n\nIn order to automate iOS devices with Xcode 8 (which includes all testing of iOS 10+),\nyou need to install the \nCarthage\n dependency\nmanager:\n\n\nbrew install carthage\n\n\n\n\nTesting Mac apps\n\n\nCurrently, the Mac app driver for appium does not ship with the AppiumForMac binary, which means, in order to automate Mac apps you must manually install the AppiumForMac application and grant it the appropriate OS X Accessibility permissions.\n\n\nTo Install Appium for Mac:\n1. \nDownload a release\n and unzip the application into your \n/Applications\n folder\n2. Follow the \nbrief supplemental installation instructions\n to enable appium to have access to OS X's Accessibility APIs\n\n\nFor more information on using Appium for mac, checkout the \ndocs\n.\n\n\nSystem setup (Android)\n\n\nInstructions for setting up Android and running tests on Mac OS X are the same as\nthose on Linux. See the \nAndroid setup docs\n.\n\n\nRunning iOS tests on OS X using Jenkins\n\n\nFirst download the jenkins-cli.jar and verify the Mac successfully connects to Jenkins master. Ensure you've run the \nauthorize-ios\n command mentioned above.\n\n\nwget https://jenkins.ci.cloudbees.com/jnlpJars/jenkins-cli.jar\n\n\njava -jar jenkins-cli.jar \\\n -s https://team-appium.ci.cloudbees.com \\\n -i ~/.ssh/id_rsa \\\n on-premise-executor \\\n -fsroot ~/jenkins \\\n -labels osx \\\n -name mac_appium\n ```\n\nNext define a LaunchAgent for Jenkins to launch automatically on login. A LaunchDaemon will not work because daemons don't have GUI access. Make sure the plist doesn't contain the `SessionCreate` or `User` key as that may prevent tests from running. You'll see a `Failed to authorize rights` error if misconfigured.\n\n\n\n\n\n$ sudo nano /Library/LaunchAgents/com.jenkins.ci.plist\n\n?xml version=\"1.0\" encoding=\"UTF-8\"?\n\n\n!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"\n\n\n\n\n\n    \nLabel\n\n    \ncom.jenkins.ci\n\n    \nProgramArguments\n\n    \n\n        \njava\n\n        \n-Djava.awt.headless=true\n\n        \n-jar\n\n        \n/Users/appium/jenkins/jenkins-cli.jar\n\n        \n-s\n\n        \nhttps://instructure.ci.cloudbees.com\n\n        \non-premise-executor\n\n        \n-fsroot\n\n        \n/Users/appium/jenkins\n\n        \n-executors\n\n        \n1\n\n        \n-labels\n\n        \nmac\n\n        \n-name\n\n        \nmac_appium\n\n        \n-persistent\n\n    \n\n    \nKeepAlive\n\n    \n\n    \nStandardOutPath\n\n    \n/Users/appium/jenkins/stdout.log\n\n    \nStandardErrorPath\n\n    \n/Users/appium/jenkins/error.log\n\n\n\n\n\n\n\nFinally set the owner, permissions, and then start the agent.\n\n\n\n\n\nsudo chown root:wheel /Library/LaunchAgents/com.jenkins.ci.plist\nsudo chmod 644 /Library/LaunchAgents/com.jenkins.ci.plist\n\n\nlaunchctl load /Library/LaunchAgents/com.jenkins.ci.plist\nlaunchctl start com.jenkins.ci\n\n\n\n\n### Files generated by iOS test runs\n\nTesting on iOS generates files that can sometimes get large. These include logs,\ntemporary files, and derived data from Xcode runs. Generally the following locations\nare where they are found, should they need to be deleted:\n\n\n\n\n\n$HOME/Library/Logs/CoreSimulator/*\n\n\n\nFor Instruments-based tests (iOS _not_ using `XCUITest` as `automationName`):\n\n\n\n\n\n/Library/Caches/com.apple.dt.instruments/*\n\n\n\nFor XCUITest-based tests:\n\n\n\n\n\n$HOME/Library/Developer/Xcode/DerivedData/*\n```", 
            "title": "Running on osx"
        }, 
        {
            "location": "/setup/running-on-osx/#running-appium-on-mac-os-x", 
            "text": "Appium on OS X supports iOS and Android testing.", 
            "title": "Running Appium on Mac OS X"
        }, 
        {
            "location": "/setup/running-on-osx/#system-setup-ios", 
            "text": "Appium requires Mac OS X 10.10 or greater.  Make sure you have Xcode and the iOS SDK(s) installed. Xcode version 7.1 is\n  recommended as earlier versions of Xcode are limited in which versions of iOS\n  they can test against. See the next section for more detail.  You need to authorize use of the iOS Simulator. See  below .  If you're on Xcode 7.x and up, Instruments Without Delay (IWD) does not work.\n  You can enable IWD (which will significantly speed up your tests) using  this\n  method  If you're on Xcode 6, you need to launch each simulator you intend to use\n  with appium in advance, and change the default to actually show the soft\n  keyboard if you want sendKeys to work. You can do this by clicking on any\n  textfield and hitting command-K until you notice the soft keyboard show up.  If you're on Xcode 6, you have a feature in Xcode called Devices\n  (command-shift-2). You need to make sure that whichever deviceName you choose\n  to use with Appium in your capabilities, there is only one of those per sdk\n  version. In other words, if you send in a deviceName cap of \"iPhone 5s\" and\n  a platformVersion cap of \"8.0\", you need to make sure that there is exactly\n  one device with the name \"iPhone 5s\" and the 8.0 sdk in your devices list.\n  Otherwise, Appium won't know which one to use.  In iOS 8, devices each have their own setting which enables or disables\n  UIAutomation. It lives in a \"Developer\" view in the Settings app. You need to\n  verify that UIAutomation is enabled in this view before the simulator or\n  device can be automated.", 
            "title": "System setup (iOS)"
        }, 
        {
            "location": "/setup/running-on-osx/#authorizing-ios-on-the-computer", 
            "text": "You need to authorize use of the iOS Simulator by running the  authorize-ios \nbinary made available through  npm . Install the program by running  npm install -g authorize-ios  And the invoke the program using  sudo authorize-ios  If you are running  Appium.app , you can\nauthorize iOS through the GUI.  You need to do this every time you install a new version of Xcode.", 
            "title": "Authorizing iOS on the computer"
        }, 
        {
            "location": "/setup/running-on-osx/#testing-against-multiple-ios-sdks", 
            "text": "Xcode version 7.1 allows for automatic testing against iOS versions 7.1 and later.  If you're using multiple Xcode versions, you can switch between them using:  sudo xcode-select --switch  lt;path to required xcode gt;", 
            "title": "Testing against multiple iOS SDKs"
        }, 
        {
            "location": "/setup/running-on-osx/#testing-using-xcode-8-including-ios-10-with-xcuitest", 
            "text": "In order to automate iOS devices with Xcode 8 (which includes all testing of iOS 10+),\nyou need to install the  Carthage  dependency\nmanager:  brew install carthage", 
            "title": "Testing using Xcode 8 (including iOS 10) with XCUITest"
        }, 
        {
            "location": "/setup/running-on-osx/#testing-mac-apps", 
            "text": "Currently, the Mac app driver for appium does not ship with the AppiumForMac binary, which means, in order to automate Mac apps you must manually install the AppiumForMac application and grant it the appropriate OS X Accessibility permissions.  To Install Appium for Mac:\n1.  Download a release  and unzip the application into your  /Applications  folder\n2. Follow the  brief supplemental installation instructions  to enable appium to have access to OS X's Accessibility APIs  For more information on using Appium for mac, checkout the  docs .", 
            "title": "Testing Mac apps"
        }, 
        {
            "location": "/setup/running-on-osx/#system-setup-android", 
            "text": "Instructions for setting up Android and running tests on Mac OS X are the same as\nthose on Linux. See the  Android setup docs .", 
            "title": "System setup (Android)"
        }, 
        {
            "location": "/setup/running-on-osx/#running-ios-tests-on-os-x-using-jenkins", 
            "text": "First download the jenkins-cli.jar and verify the Mac successfully connects to Jenkins master. Ensure you've run the  authorize-ios  command mentioned above.  wget https://jenkins.ci.cloudbees.com/jnlpJars/jenkins-cli.jar  java -jar jenkins-cli.jar \\\n -s https://team-appium.ci.cloudbees.com \\\n -i ~/.ssh/id_rsa \\\n on-premise-executor \\\n -fsroot ~/jenkins \\\n -labels osx \\\n -name mac_appium\n ```\n\nNext define a LaunchAgent for Jenkins to launch automatically on login. A LaunchDaemon will not work because daemons don't have GUI access. Make sure the plist doesn't contain the `SessionCreate` or `User` key as that may prevent tests from running. You'll see a `Failed to authorize rights` error if misconfigured.  $ sudo nano /Library/LaunchAgents/com.jenkins.ci.plist ?xml version=\"1.0\" encoding=\"UTF-8\"?  !DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"   \n     Label \n     com.jenkins.ci \n     ProgramArguments \n     \n         java \n         -Djava.awt.headless=true \n         -jar \n         /Users/appium/jenkins/jenkins-cli.jar \n         -s \n         https://instructure.ci.cloudbees.com \n         on-premise-executor \n         -fsroot \n         /Users/appium/jenkins \n         -executors \n         1 \n         -labels \n         mac \n         -name \n         mac_appium \n         -persistent \n     \n     KeepAlive \n     \n     StandardOutPath \n     /Users/appium/jenkins/stdout.log \n     StandardErrorPath \n     /Users/appium/jenkins/error.log    \nFinally set the owner, permissions, and then start the agent.  sudo chown root:wheel /Library/LaunchAgents/com.jenkins.ci.plist\nsudo chmod 644 /Library/LaunchAgents/com.jenkins.ci.plist  launchctl load /Library/LaunchAgents/com.jenkins.ci.plist\nlaunchctl start com.jenkins.ci  \n\n### Files generated by iOS test runs\n\nTesting on iOS generates files that can sometimes get large. These include logs,\ntemporary files, and derived data from Xcode runs. Generally the following locations\nare where they are found, should they need to be deleted:  $HOME/Library/Logs/CoreSimulator/*  \nFor Instruments-based tests (iOS _not_ using `XCUITest` as `automationName`):  /Library/Caches/com.apple.dt.instruments/*  \nFor XCUITest-based tests:  $HOME/Library/Developer/Xcode/DerivedData/*\n```", 
            "title": "Running iOS tests on OS X using Jenkins"
        }, 
        {
            "location": "/setup/running-on-windows/", 
            "text": "Windows Setup\n\n\nAppium on Windows supports both Windows and Android app automation!\n\n\nSee \nWindows App Testing\n for more details.\n\n\nRunning Appium on Windows\n\n\nSetup\n\n\nTo get started:\n\n\n\n\nDownload latest \nnode and npm tools\n MSI (version \n= 6.0). The \nnpm\n and \nnodejs\n paths should be in your PATH environment variable.\n\n\nOpen admin cmd prompt\n\n\nRun the command \nnpm install -g appium\n which will install Appium from NPM\n\n\nTo start Appium, you can now simply run \nappium\n from the prompt.\n\n\nFollow the directions below for setup for either Android or Windows app testing.\n\n\nRun a test from any Appium client.\n\n\n\n\nAdditional Setup for Android App Testing\n\n\n\n\nDownload the latest Java JDK \nhere\n (accept the license agreement first). Set 'JAVA_HOME' to be your JDK path. The \nbin\n in that directory should be added to your PATH variable.\n\n\nInstall the \nAndroid SDK\n. Set the \nANDROID_HOME\n environment variable to be your Android SDK path and add the \ntools\n and \nplatform-tools\n folders to your PATH variable.\n\n\nInstall \nApache Ant\n or use the one that comes with the Android Windows SDK in the eclipse\\plugins folder. Be sure to add the folder containing Ant to your PATH variable.\n\n\nInstall \nApache Maven\n and set the M2HOME and M2 environment variables. Set \nM2_HOME\n to the directory maven is installed in, and set \nM2\n to the \nbin\n in that directory. Add the path you used for \nM2\n to your PATH.\n\n\nTo run tests on Windows, you will need to have the Android Emulator booted or an Android Device connected that is running an AVD with API Level 17 or greater. Then run Appium on the command line (via the \nappium\n command)\n\n\nYour test script should ensure that the \nplatformVersion\n capability corresponds to the emulator or device version you are testing, and that the \napp\n capability is an absolute path to the .apk file of the Android app.\n\n\n\n\nAdditional Setup for Windows App Testing\n\n\n\n\nTo test a Windows app, simply make sure you have turned \ndeveloper mode\n on.\n\n\n\n\n(see the \nWindows app testing\n doc for instructions on how to run Windows app tests)\n\n\nRunning Appium\n\n\nSee the \nserver documentation\n for all the command line arguments.\n\n\n\n\nOn Windows run Appium.exe as an administrator, or when running from source you need to run cmd as an administrator.\n\n\nYou must supply the \n--no-reset\n or \n--full-reset\n flags for\n  Android to work on Windows.\n\n\nThere exists a hardware accelerated emulator for Android; it has it's own\n  limitations. For more information you can check out this\n  \npage\n.", 
            "title": "Running on windows"
        }, 
        {
            "location": "/setup/running-on-windows/#windows-setup", 
            "text": "Appium on Windows supports both Windows and Android app automation!  See  Windows App Testing  for more details.", 
            "title": "Windows Setup"
        }, 
        {
            "location": "/setup/running-on-windows/#running-appium-on-windows", 
            "text": "", 
            "title": "Running Appium on Windows"
        }, 
        {
            "location": "/setup/running-on-windows/#setup", 
            "text": "To get started:   Download latest  node and npm tools  MSI (version  = 6.0). The  npm  and  nodejs  paths should be in your PATH environment variable.  Open admin cmd prompt  Run the command  npm install -g appium  which will install Appium from NPM  To start Appium, you can now simply run  appium  from the prompt.  Follow the directions below for setup for either Android or Windows app testing.  Run a test from any Appium client.", 
            "title": "Setup"
        }, 
        {
            "location": "/setup/running-on-windows/#additional-setup-for-android-app-testing", 
            "text": "Download the latest Java JDK  here  (accept the license agreement first). Set 'JAVA_HOME' to be your JDK path. The  bin  in that directory should be added to your PATH variable.  Install the  Android SDK . Set the  ANDROID_HOME  environment variable to be your Android SDK path and add the  tools  and  platform-tools  folders to your PATH variable.  Install  Apache Ant  or use the one that comes with the Android Windows SDK in the eclipse\\plugins folder. Be sure to add the folder containing Ant to your PATH variable.  Install  Apache Maven  and set the M2HOME and M2 environment variables. Set  M2_HOME  to the directory maven is installed in, and set  M2  to the  bin  in that directory. Add the path you used for  M2  to your PATH.  To run tests on Windows, you will need to have the Android Emulator booted or an Android Device connected that is running an AVD with API Level 17 or greater. Then run Appium on the command line (via the  appium  command)  Your test script should ensure that the  platformVersion  capability corresponds to the emulator or device version you are testing, and that the  app  capability is an absolute path to the .apk file of the Android app.", 
            "title": "Additional Setup for Android App Testing"
        }, 
        {
            "location": "/setup/running-on-windows/#additional-setup-for-windows-app-testing", 
            "text": "To test a Windows app, simply make sure you have turned  developer mode  on.   (see the  Windows app testing  doc for instructions on how to run Windows app tests)", 
            "title": "Additional Setup for Windows App Testing"
        }, 
        {
            "location": "/setup/running-on-windows/#running-appium", 
            "text": "See the  server documentation  for all the command line arguments.   On Windows run Appium.exe as an administrator, or when running from source you need to run cmd as an administrator.  You must supply the  --no-reset  or  --full-reset  flags for\n  Android to work on Windows.  There exists a hardware accelerated emulator for Android; it has it's own\n  limitations. For more information you can check out this\n   page .", 
            "title": "Running Appium"
        }, 
        {
            "location": "/setup/troubleshooting/", 
            "text": "Troubleshooting Appium\n\n\nHere's what to do if you're experiencing problems, before you submit a ticket\nto github or write to the \nappium-discuss discussion group\n.\n\n\nGeneral\n\n\n\n\nMake sure you've followed the getting started steps in the \nREADME\n\n\nMake sure your system is set up appropriately (i.e., XCode is updated,\n  Android SDK is installed and \nANDROID_HOME\n is set.\n\n\nMake sure the paths to your applications are correct\n\n\nOn windows run appium.app as administrator or when running from source you need to run cmd as administrator.\n\n\n\n\nIf you're running Appium.app\n\n\n\n\nUpdate the app and restart. If you get a message saying the app can't be updated,\n  re-download it from \nappium.io\n.\n\n\n\n\nIf you're running Appium from source\n\n\n\n\ngit pull\n to make sure you're running the latest code\n\n\nRemove old dependencies: \nrm -rf node_modules\n\n\nRe-install dependencies: \nnpm install\n\n\n\n\nRe-transpile the code: \ngulp transpile\n\n\n\n\n\n\nYou can also use \nAppium Doctor\n to determine whether your system is configured correctly for Appium.\n\n\n\n\nIf you get this error after upgrading to Android SDK 22:\n  \n{ANDROID_HOME}/tools/ant/uibuild.xml:155: SDK does not have any Build Tools installed.\n\nIn the Android SDK 22, the platform and build tools are split up into their\nown items in the SDK manager. Make sure you install the build-tools and platform-tools.\n\n\n\n\nAndroid\n\n\n\n\nMake sure the Android emulator is up and running.\n\n\nIt's sometimes useful to run \nadb kill-server \n adb devices\n. This can\n  reset the connection to the Android device.\n\n\nMake sure you set ANDROID_HOME pointing to the Android SDK directory\n\n\n\n\nWindows\n\n\n\n\nMake sure developer mode is on\n\n\nMake sure command prompt is Admin\n\n\nCheck that the URL Appium server is listening to matches the one specified in test script\n\n\n\n\nIOS\n\n\n\n\nMake sure Instruments.app is not open\n\n\nIf you're running the simulator, make sure your actual device is not\n  plugged in\n\n\nMake sure the accessibility helper is turned off in your Settings app\n\n\nMake sure the app is compiled for the version of the simulator that's being\n  run\n\n\nMake sure the app is compiled for the simulator (or real device) as\n  appropriate (e.g., in debug mode for the simulator), or you might get\n  a \nposix spawn\n error.\n\n\nIf you've ever run Appium with sudo, you might need to \nsudo rm\n  /tmp/instruments_sock\n and try again as not-sudo.\n\n\nIf this is the first time you've run Appium, make sure to authorize the use\n  of Instruments. See \nrunning on OSX documentation\n.\n\n\nIf Instruments is crashing when running against a physical device (\"exited with code 253\"), ensure Xcode has downloaded device symbols. Go to Window -\n Devices, and it should start automatically. This is needed after iOS version upgrades.\n\n\nIf you see \niOS Simulator failed to install the application.\n and the\n  paths are correct, try restarting the computer.\n\n\nMake sure your macOS keychain that holds the certificate(s) needed for building your app and the WebDriverAgent is unlocked. Especialy if you are using ssh. General symptom to look for is \ncodesign\n failure.\n\n\nIf you have custom elements in your app, they will not be automatable by\n  UIAutomation (and therefore Appium) by default. You need to set the\n  accessibility status to 'enabled' on them. The way to do this in code is:\n\n\n\n\ncenter\n  [myCustomView setAccessibilityEnabled:YES];\n\n\n\n\nTests on iOS may exhibit symptoms similar to a memory leak including sluggish\n  performance or hangs. If you experience this problem, it's likely due to a\n  known issue with NSLog. One option is to remove NSLog from your code.\n  However, there are several more nuanced approaches that may also help without\n  requiring that you refactor.\n\n\n\n\n### Workaround 1\n  NSLog is a macro and can be redefined. E.g.,\n  ```objectivec\n  // \nYou'll need to define TEST or TEST2 and then recompile.\n\n\n#ifdef TEST\n    #define NSLog(...) _BlackHoleTestLogger(\nVA_ARGS\n);\n  #endif // TEST\n  #ifdef TEST2\n    #define NSLog(...) _StdoutTestLogger(\nVA_ARGS\n);\n  #endif // TEST2\n\n\nvoid _BlackHoleTestLogger(NSString *format, ...) {\n      //\n  }\n\n\nvoid _StdoutTestLogger(NSString *format, ...) {\n      va_list argumentList;\n      va_start(argumentList, format);\n      NSMutableString * message = [[NSMutableString alloc] initWithFormat:format\n                                                  arguments:argumentList];\n\n\n  printf(message);\n\n  va_end(argumentList);\n  [message release];\n\n\n\n}\n  ```\n\n\n### Workaround 2\n  Manually replace the underlying function that NSLog wraps. This method was recommended by\n  \nApple in a similar context.\n\n\n```objectivec\n  extern void _NSSetLogCStringFunction(void(\n)(const char \n, unsigned, BOOL));\n\n\nstatic void _GarbageFreeLogCString(const char *message, unsigned length, BOOL withSyslogBanner) {\n     fprintf(stderr, \"%s\\n\", message);\n  }\n\n\nint main (int argc, const char \nargv[]) {\n     NSAutoreleasePool \npool = [[NSAutoreleasePool alloc] init];\n     int exitCode;\n\n\n setbuf(stderr, NULL);\n\n _NSSetLogCStringFunction(_GarbageFreeLogCString);\n exitCode = WOApplicationMain(@\"Application\", argc, argv);\n [pool release];\n return exitCode;\n\n\n\n}\n```\n\n\nWebview/Hybrid/Safari app support\n\n\n\n\nMake Sure you enable the 'Web Inspector' on the real device.\n\n\nMake Sure you enable the Safari - Advance Preferences- Developer menu for\n  simulators.\n\n\nMake sure you are properly switching contexts using the \ncontext\n appium commands provided by your client library.\n\n\nIf you getting this error: select_port() failed, when trying to open the\n  proxy, see this \ndiscussion\n\n\nIn a Safari session, if the logs indicate that the initial url cannot be entered, make sure that\n  you have the software keyboard enabled. See this \ndiscussion\n.\n\n\n\n\nLet the community know\n\n\nOnce you've tried the above steps and your issue still isn't resolved,\nhere's what you can do:\n\n\nIf you're having trouble getting Appium working and the error messages Appium\nprovides are not clear, join the \ndiscussion group\n\nand send a message. Please include the following:\n\n\n\n\nHow you're running Appium (Appium.app, npm, source)\n\n\nWhat operating system you are using\n\n\nWhat device and version you are testing against (i.e. Android 4.4, or iOS 7.1)\n\n\nWhether you are running against a real device or a simulator/emulator\n\n\nThe client-side and server-side errors you're getting (i.e.,\n\"In Python this is the exception I get in my test script,\nand here's a link to a paste of the Appium server output)\n\n\nPer above, it's very important to include a paste of the Appium server\noutput when it's run in verbose mode so that we can diagnose what's going on.\n\n\n\n\nIf you've found what you believe is a bug, go straight to the \nissue tracker\n\nand submit an issue describing the bug and a repro case.\n\n\nKnown Issues\n\n\n\n\nIf you've installed Node from the Node website, it requires that you use sudo\n  for \nnpm\n. This is not ideal. Try to get node with \nnvm\n,\n  \nn\n or \nbrew install node\n instead!\n\n\nWebview support works on real iOS devices with a proxy, see \ndiscussion\n.\n\n\nSometimes iOS UI elements become invalidated milliseconds after they are\n  found. This results in an error that looks like \n(null) cannot be tapped\n.\n  Sometimes the only solution is to put the finding-and-clicking code in a retry\n  block.\n\n\nAppium may have difficulties finding the \nnode\n executable if you've\n  installed Node and npm via MacPorts. You must make sure that the MacPorts bin\n  folder (\n/opt/local/bin\n by default) is added to \nPATH\n somewhere in your\n  \n~/.profile\n, \n~/.bash_profile\n or \n~/.bashrc\n.\n\n\n\n\nSpecific Errors\n\n\n\n\n\n\n\n\nAction\n\n\nError\n\n\nResolution\n\n\n\n\n\n\n\n\n\n\nRunning ios test\n\n\n[INST STDERR] posix spawn failure; aborting launch\n\n\nYour app is not compiled correctly for the simulator or device.\n\n\n\n\n\n\nRunning mobile safari test\n\n\nerror: Could not prepare mobile safari with version '7.1'\n\n\nYou probably need to run the authorize script again to make the iOS SDK files writeable. See \nrunning on OSX documentation", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/setup/troubleshooting/#troubleshooting-appium", 
            "text": "Here's what to do if you're experiencing problems, before you submit a ticket\nto github or write to the  appium-discuss discussion group .", 
            "title": "Troubleshooting Appium"
        }, 
        {
            "location": "/setup/troubleshooting/#general", 
            "text": "Make sure you've followed the getting started steps in the  README  Make sure your system is set up appropriately (i.e., XCode is updated,\n  Android SDK is installed and  ANDROID_HOME  is set.  Make sure the paths to your applications are correct  On windows run appium.app as administrator or when running from source you need to run cmd as administrator.", 
            "title": "General"
        }, 
        {
            "location": "/setup/troubleshooting/#if-youre-running-appiumapp", 
            "text": "Update the app and restart. If you get a message saying the app can't be updated,\n  re-download it from  appium.io .", 
            "title": "If you're running Appium.app"
        }, 
        {
            "location": "/setup/troubleshooting/#if-youre-running-appium-from-source", 
            "text": "git pull  to make sure you're running the latest code  Remove old dependencies:  rm -rf node_modules  Re-install dependencies:  npm install   Re-transpile the code:  gulp transpile    You can also use  Appium Doctor  to determine whether your system is configured correctly for Appium.   If you get this error after upgrading to Android SDK 22:\n   {ANDROID_HOME}/tools/ant/uibuild.xml:155: SDK does not have any Build Tools installed. \nIn the Android SDK 22, the platform and build tools are split up into their\nown items in the SDK manager. Make sure you install the build-tools and platform-tools.", 
            "title": "If you're running Appium from source"
        }, 
        {
            "location": "/setup/troubleshooting/#android", 
            "text": "Make sure the Android emulator is up and running.  It's sometimes useful to run  adb kill-server   adb devices . This can\n  reset the connection to the Android device.  Make sure you set ANDROID_HOME pointing to the Android SDK directory", 
            "title": "Android"
        }, 
        {
            "location": "/setup/troubleshooting/#windows", 
            "text": "Make sure developer mode is on  Make sure command prompt is Admin  Check that the URL Appium server is listening to matches the one specified in test script", 
            "title": "Windows"
        }, 
        {
            "location": "/setup/troubleshooting/#ios", 
            "text": "Make sure Instruments.app is not open  If you're running the simulator, make sure your actual device is not\n  plugged in  Make sure the accessibility helper is turned off in your Settings app  Make sure the app is compiled for the version of the simulator that's being\n  run  Make sure the app is compiled for the simulator (or real device) as\n  appropriate (e.g., in debug mode for the simulator), or you might get\n  a  posix spawn  error.  If you've ever run Appium with sudo, you might need to  sudo rm\n  /tmp/instruments_sock  and try again as not-sudo.  If this is the first time you've run Appium, make sure to authorize the use\n  of Instruments. See  running on OSX documentation .  If Instruments is crashing when running against a physical device (\"exited with code 253\"), ensure Xcode has downloaded device symbols. Go to Window -  Devices, and it should start automatically. This is needed after iOS version upgrades.  If you see  iOS Simulator failed to install the application.  and the\n  paths are correct, try restarting the computer.  Make sure your macOS keychain that holds the certificate(s) needed for building your app and the WebDriverAgent is unlocked. Especialy if you are using ssh. General symptom to look for is  codesign  failure.  If you have custom elements in your app, they will not be automatable by\n  UIAutomation (and therefore Appium) by default. You need to set the\n  accessibility status to 'enabled' on them. The way to do this in code is:   center\n  [myCustomView setAccessibilityEnabled:YES];   Tests on iOS may exhibit symptoms similar to a memory leak including sluggish\n  performance or hangs. If you experience this problem, it's likely due to a\n  known issue with NSLog. One option is to remove NSLog from your code.\n  However, there are several more nuanced approaches that may also help without\n  requiring that you refactor.   ### Workaround 1\n  NSLog is a macro and can be redefined. E.g.,\n  ```objectivec\n  //  You'll need to define TEST or TEST2 and then recompile.  #ifdef TEST\n    #define NSLog(...) _BlackHoleTestLogger( VA_ARGS );\n  #endif // TEST\n  #ifdef TEST2\n    #define NSLog(...) _StdoutTestLogger( VA_ARGS );\n  #endif // TEST2  void _BlackHoleTestLogger(NSString *format, ...) {\n      //\n  }  void _StdoutTestLogger(NSString *format, ...) {\n      va_list argumentList;\n      va_start(argumentList, format);\n      NSMutableString * message = [[NSMutableString alloc] initWithFormat:format\n                                                  arguments:argumentList];    printf(message);\n\n  va_end(argumentList);\n  [message release];  }\n  ```  ### Workaround 2\n  Manually replace the underlying function that NSLog wraps. This method was recommended by\n   Apple in a similar context.  ```objectivec\n  extern void _NSSetLogCStringFunction(void( )(const char  , unsigned, BOOL));  static void _GarbageFreeLogCString(const char *message, unsigned length, BOOL withSyslogBanner) {\n     fprintf(stderr, \"%s\\n\", message);\n  }  int main (int argc, const char  argv[]) {\n     NSAutoreleasePool  pool = [[NSAutoreleasePool alloc] init];\n     int exitCode;   setbuf(stderr, NULL);\n\n _NSSetLogCStringFunction(_GarbageFreeLogCString);\n exitCode = WOApplicationMain(@\"Application\", argc, argv);\n [pool release];\n return exitCode;  }\n```", 
            "title": "IOS"
        }, 
        {
            "location": "/setup/troubleshooting/#webviewhybridsafari-app-support", 
            "text": "Make Sure you enable the 'Web Inspector' on the real device.  Make Sure you enable the Safari - Advance Preferences- Developer menu for\n  simulators.  Make sure you are properly switching contexts using the  context  appium commands provided by your client library.  If you getting this error: select_port() failed, when trying to open the\n  proxy, see this  discussion  In a Safari session, if the logs indicate that the initial url cannot be entered, make sure that\n  you have the software keyboard enabled. See this  discussion .", 
            "title": "Webview/Hybrid/Safari app support"
        }, 
        {
            "location": "/setup/troubleshooting/#let-the-community-know", 
            "text": "Once you've tried the above steps and your issue still isn't resolved,\nhere's what you can do:  If you're having trouble getting Appium working and the error messages Appium\nprovides are not clear, join the  discussion group \nand send a message. Please include the following:   How you're running Appium (Appium.app, npm, source)  What operating system you are using  What device and version you are testing against (i.e. Android 4.4, or iOS 7.1)  Whether you are running against a real device or a simulator/emulator  The client-side and server-side errors you're getting (i.e.,\n\"In Python this is the exception I get in my test script,\nand here's a link to a paste of the Appium server output)  Per above, it's very important to include a paste of the Appium server\noutput when it's run in verbose mode so that we can diagnose what's going on.   If you've found what you believe is a bug, go straight to the  issue tracker \nand submit an issue describing the bug and a repro case.", 
            "title": "Let the community know"
        }, 
        {
            "location": "/setup/troubleshooting/#known-issues", 
            "text": "If you've installed Node from the Node website, it requires that you use sudo\n  for  npm . This is not ideal. Try to get node with  nvm ,\n   n  or  brew install node  instead!  Webview support works on real iOS devices with a proxy, see  discussion .  Sometimes iOS UI elements become invalidated milliseconds after they are\n  found. This results in an error that looks like  (null) cannot be tapped .\n  Sometimes the only solution is to put the finding-and-clicking code in a retry\n  block.  Appium may have difficulties finding the  node  executable if you've\n  installed Node and npm via MacPorts. You must make sure that the MacPorts bin\n  folder ( /opt/local/bin  by default) is added to  PATH  somewhere in your\n   ~/.profile ,  ~/.bash_profile  or  ~/.bashrc .", 
            "title": "Known Issues"
        }, 
        {
            "location": "/setup/troubleshooting/#specific-errors", 
            "text": "Action  Error  Resolution      Running ios test  [INST STDERR] posix spawn failure; aborting launch  Your app is not compiled correctly for the simulator or device.    Running mobile safari test  error: Could not prepare mobile safari with version '7.1'  You probably need to run the authorize script again to make the iOS SDK files writeable. See  running on OSX documentation", 
            "title": "Specific Errors"
        }, 
        {
            "location": "/writing-and-running/appium-bindings/", 
            "text": "Appium Client Libraries\n\n\nAppium has libraries for:\n\n\n\n\n\n\n\n\nLanguage\n\n\nSource\n\n\n\n\n\n\n\n\n\n\nRuby\n\n\nGitHub\n\n\n\n\n\n\nPython\n\n\nGitHub\n\n\n\n\n\n\nJava\n\n\nGitHub\n\n\n\n\n\n\nJavaScript\n\n\nGitHub\n\n\n\n\n\n\nPHP\n\n\nGitHub\n\n\n\n\n\n\nC#\n\n\nGitHub\n\n\n\n\n\n\nObjective-C\n\n\nGitHub\n\n\n\n\n\n\n\n\nNote that some methods such as \nendTestCoverage()\n are\nnot generally useful. Proper coverage support will be added once \nthis issue\n\nis resolved. If you want to use them anyway, consult the documentation for the bindings on GitHub.\n\n\nLock\n\n\nLock the screen.\n\n\n# ruby\nlock 5\n\n\n\n\n# python\ndriver.lock(5)\n\n\n\n\n// java\ndriver.lockScreen(3);\n\n\n\n\n// javascript\ndriver.lock(3)\n\n\n\n\n// php\n$this-\nlock(3);\n\n\n\n\n// c#\ndriver.LockDevice(3);\n\n\n\n\n// objective c\n[driver lockDeviceScreen:3];\n\n\n\n\nBackground app\n\n\nSend the currently active app to the background, and either return after a certain amount of time, or leave the app deactivated.\n\n\nThere are 2 types of parameters which may be passed to this method:\n\n\n\n\nAn integer (in seconds): how long to background the app for. -1 means to deactivate the app entirely. This style of parameter is deprecated.\n\n\nAn object that looks like \n{\"timeout\": secs}\n, where \nsecs\n is again an integer with the semantics mentioned just above in 1, or \nnull\n (which means to deactivate entirely).\n\n\n\n\n# ruby\nbackground_app 5  # background app for 5 seconds\nbackground_app -1  # deactivate app\n\n\n\n\n# python\ndriver.background_app(5)  # background for 5 seconds\ndriver.background_app(-1) # deactivate app\ndriver.background_app({'timeout': None}) # deactivate app\n\n\n\n\n// java\ndriver.runAppInBackground(5);  // for 5 seconds\ndriver.runAppInBackground(-1);  // deactivate completely\n\n\n\n\n// javascript\ndriver.backgroundApp(5);  // for 5 seconds\ndriver.backgroundApp(-1); // deactivate app\ndriver.backgroundApp({timeout: null}); // deactivate app\n\n\n\n\n// php\n$this-\nbackgroundApp(5);\n$this-\nbackgroundApp(-1);\n\n\n\n\n// c#\ndriver.BackgroundApp(5);\ndriver.BackgroundApp(-1);\n\n\n\n\n// objective c\n[driver runAppInBackground:3];\n[driver runAppInBackground:-1];\n\n\n\n\nHide Keyboard\n\n\nHide the keyboard. \nNote\n: on iOS, this helper function is not guaranteed to\nwork. There is no automation hook for hiding the keyboard, and apps are free to\nallow the user to hide the keyboard using any of a variety of different\nstrategies, whether that is tapping outside the keyboard, swiping down, etc...\nWe encourage you, rather than using this method, to think about how a \nuser\n\nwould hide the keyboard in your app, and tell Appium to do that instead (swipe,\ntap on a certain coordinate, etc...). That being said, the default behavior\nhere might help you.\n\n\n# ruby\nhide_keyboard\n\n\n\n\n# python\ndriver.hide_keyboard()\n\n\n\n\n// java\ndriver.hideKeyboard();\n\n\n\n\n// javascript\ndriver.hideKeyboard()\n\n\n\n\n// php\n$this-\nhideKeyboard();\n$this-\nhideKeyboard(array('strategy' =\n 'pressKey', 'key' =\n 'Done'));\n\n\n\n\n// c#\ndriver.HideKeyboard(\nDone\n);\n\n\n\n\n// objective c\n[driver hideKeyboard];\n\n\n\n\nStart Activity\n\n\nOpen an activity in the current app or start a new app and open an activity \nAndroid only\n\n\n// java\ndriver.startActivity(\nappPackage\n,\ncom.example.android.apis\n, null, null);\n\n\n\n\n// javascript\ndriver.startActivity({appPackage: 'com.example.android.apis', appActivity: '.Foo'}, cb);\n\n\n\n\n# python\ndriver.start_activity('com.example.android.apis', '.Foo')\n\n\n\n\n# ruby\nstart_activity app_package: 'io.appium.android.apis', app_activity: '.accessibility.AccessibilityNodeProviderActivity'\n\n\n\n\n// c#\ndriver.StartActivity(\ncom.example.android.apis\n, \n.Foo\n);\n\n\n\n\n// php\n$this-\nstartActivity(array(\nappPackage\n =\n \ncom.example.android.apis\n,\n                            \nappActivity\n =\n \n.Foo\n));\n\n\n\n\n// objective c\n[driver startActivity:@\ncom.example.android.apis\n package:@\n.Foo\n];\n\n\n\n\nOpen Notifications\n\n\nOpen the notification shade \nAndroid only\n\n\n// java\ndriver.openNotifications();\n\n\n\n\n// javascript\ndriver.openNotifications(cb);\n\n\n\n\n# python\ndriver.open_notifications()\n\n\n\n\n# ruby\nopen_notifications\n\n\n\n\n// c#\ndriver.OpenNotifications();\n\n\n\n\n// php\n$this-\nopenNotifications();\n\n\n\n\n// objective c\n[driver openNotifications];\n\n\n\n\nIs installed\n\n\nCheck if an app is installed\n\n\n# ruby\nis_installed? \ncom.example.android.apis\n\n\n\n\n\n# python\ndriver.is_app_installed('com.example.android.apis')\n\n\n\n\n// java\ndriver.isAppInstalled(\ncom.example.android.apis\n)\n\n\n\n\n// javascript\ndriver.isAppInstalled(\ncom.example.android.apis\n)\n  .then(function (isAppInstalled) { /*...*/ })\n\n\n\n\n// php\n$this-\nisAppInstalled('com.example.android.apis');\n\n\n\n\n// c#\ndriver.IsAppInstalled(\ncom.example.android.apis-\n);\n\n\n\n\n// objective c\n[driver isAppInstalled:@\ncom.example.android.apis-\n];\n\n\n\n\nInstall App\n\n\nInstall an app to the device.\n\n\n# ruby\ninstall 'path/to/my.apk'\n\n\n\n\n# python\ndriver.install_app('path/to/my.apk')\n\n\n\n\n// java\ndriver.installApp(\npath/to/my.apk\n)\n\n\n\n\n// javascript\ndriver.installApp(\npath/to/my.apk\n)\n\n\n\n\n// php\n$this-\ninstallApp('path/to/my.apk');\n\n\n\n\n// c#\ndriver.InstallApp(\npath/to/my.apk\n);\n\n\n\n\n// objective c\n[driver installAppAtPath:@\npath/to/my.apk\n];\n\n\n\n\nRemove App\n\n\nRemove an app from the device.\n\n\n# ruby\nremove 'com.example.android.apis'\n\n\n\n\n# python\ndriver.remove_app('com.example.android.apis')\n\n\n\n\n// java\ndriver.removeApp(\ncom.example.android.apis\n)\n\n\n\n\n// javascript\ndriver.removeApp(\ncom.example.android.apis\n)\n\n\n\n\n// php\n$this-\nremoveApp('com.example.android.apis');\n\n\n\n\n// c#\ndriver.RemoveApp(\ncom.example.android.apis\n);\n\n\n\n\n// objective c\n[driver removeApp:@\ncom.example.android.apis\n];\n\n\n\n\nShake\n\n\nSimulate the device shaking.\n\n\n# ruby\nshake\n\n\n\n\n# python\ndriver.shake()\n\n\n\n\n// java\ndriver.shake()\n\n\n\n\n// javascript\ndriver.shake()\n\n\n\n\n// php\n$this-\nshake();\n\n\n\n\n// c#\ndriver.ShakeDevice();\n\n\n\n\n// objective c\n[driver shakeDevice];\n\n\n\n\nClose app\n\n\nClose the app\n\n\n# ruby\nclose_app\n\n\n\n\n# python\ndriver.close_app();\n\n\n\n\n// java\ndriver.closeApp()\n\n\n\n\n// javascript\ndriver.closeApp()\n\n\n\n\n// php\n$this-\ncloseApp();\n\n\n\n\n// c#\ndriver.CloseApp();\n\n\n\n\n// objective c\n[driver closeApp];\n\n\n\n\nLaunch\n\n\nLaunch the session for the desired capabilities. Note that this is the\ncompanion to the autoLaunch=false capability. This is not for launching\narbitrary apps/activities---for that use \nstart_activity\n. This is for\ncontinuing the initialization (\"launch\") process if you have used\nautoLaunch=false.\n\n\n# ruby\nlaunch_app\n\n\n\n\n# python\ndriver.launch_app()\n\n\n\n\n// java\ndriver.launchApp()\n\n\n\n\n// javascript\ndriver.launchApp()\n\n\n\n\n// php\n$this-\nlaunchApp();\n\n\n\n\n// c#\ndriver.LaunchApp();\n\n\n\n\n// objective c\n[driver launchApp];\n\n\n\n\nReset\n\n\nReset the app.\n\n\n# ruby\ndriver.reset\n\n\n\n\n# python\ndriver.reset()\n\n\n\n\n// java\ndriver.resetApp()\n\n\n\n\n// javascript\ndriver.resetApp()\n\n\n\n\n// php\n$this-\nreset();\n\n\n\n\n// c#\ndriver.ResetApp();\n\n\n\n\n// objective c\n[driver resetApp];\n\n\n\n\nAvailable Contexts\n\n\nList all available contexts\n\n\n# ruby\ncontext_array = available_contexts\n\n\n\n\n# python\ndriver.contexts\n\n\n\n\n// java\ndriver.getContextHandles()\n\n\n\n\n// javascript\ndriver.contexts().then(function (contexts) { /*...*/ })\n\n\n\n\n// php\n$this-\ncontexts();\n\n\n\n\n// c#\ndriver.GetContexts()\n\n\n\n\n// objective c\nNSArray *contexts = driver.allContexts;\n\n\n\n\nCurrent context\n\n\nList the current context\n\n\n# ruby\ncontext = current_context\n\n\n\n\n# python\ndriver.current_context\n\n\n\n\n// java\ndriver.getContext()\n\n\n\n\n// javascript\ndriver.currentContext().then(function (context) { /*...*/ })\n\n\n\n\n// php\n$this-\ncontext();\n\n\n\n\n// c#\ndriver.GetContext()\n\n\n\n\n// objective c\nNSString *context = driver.context;\n\n\n\n\nSwitch to default context\n\n\nChange the context to the default.\n\n\n# ruby\nswitch_to_default_context\n\n\n\n\n# python\ndriver.switch_to.context(None)\n\n\n\n\n// java\ndriver.context();\n\n\n\n\n// javascript\ndriver.context()\n\n\n\n\n// php\n$this-\ncontext(NULL);\n\n\n\n\n// c#\ndriver.SetContext();\n\n\n\n\n// objective c\n[driver setContext:nil];\n\n\n\n\nApp Strings\n\n\nGet the app's strings.\n\n\n# ruby\napp_strings\n\n\n\n\n# python\ndriver.app_strings\n\n\n\n\n// java\ndriver.getAppStrings();\n\n\n\n\n// javascript\ndriver.getAppStrings().then(function (appStrings) { /*...*/ })\n\n\n\n\n// php\n$this-\nappStrings();\n$this-\nappStrings('ru');\n\n\n\n\n// c#\ndriver.GetAppStrings();\n\n\n\n\n// objective c\n[driver appStrings];\n[driver appStringsForLanguage:\n@ru\n];\n\n\n\n\nKey Event\n\n\nSend a key event to the device.\n\n\n# ruby\nkey_event 176\n\n\n\n\n# python\ndriver.keyevent(176)\n\n\n\n\n// java\ndriver.sendKeyEvent(AndroidKeyCode.HOME);\n\n\n\n\n// javascript\ndriver.deviceKeyEvent(wd.SPECIAL_KEYS.Home)\n\n\n\n\n// php\n$this-\nkeyEvent('176');\n\n\n\n\n// c#\ndriver.KeyEvent(\n176\n);\n\n\n\n\n// objective c\nNSError *err;\n[driver triggerKeyEvent:176 metastate:0 error:\nerr];\n\n\n\n\nCurrent Activity\n\n\nAndroid only. Get the current activity.\n\n\n# ruby\ncurrent_activity\n\n\n\n\n# python\ndriver.current_activity\n\n\n\n\n// java\ndriver.currentActivity();\n\n\n\n\n// javascript\ndriver.getCurrentActivity().then(function (activity) { /*...*/ })\n\n\n\n\n// php\n$this-\ncurrentActivity();\n\n\n\n\n// c#\ndriver.GetCurrentActivity();\n\n\n\n\n// objective c\nNSError *err;\n[driver currentActivity];\n\n\n\n\nCurrent Package\n\n\nAndroid only. Get the current package.\n\n\n# ruby\ncurrent_package\n\n\n\n\n# python\ndriver.current_package\n\n\n\n\n// java\ndriver.getCurrentPackage();\n\n\n\n\n// javascript\ndriver.getCurrentPackage().then(function (package) { /*...*/ })\n\n\n\n\n// php\n$this-\ncurrentPackage();\n\n\n\n\n// c#\ndriver.GetCurrentPackage();\n\n\n\n\nTouchAction / MultiTouchAction\n\n\nAn API for generating touch actions. This section of the documentation will be\nexpanded upon soon.\n\n\n# ruby\ntouch_action = Appium::TouchAction.new\nelement  = find_element :accessibility_id, 'Buttons, Various uses of UIButton'\ntouch_action.press(element: element, x: 10, y: 10).perform\n\n\n\n\n# python\naction = TouchAction(driver)\naction.press(element=el, x=10, y=10).release().perform()\n\n\n\n\n// java\nTouchAction action = new TouchAction(driver)\n.press(mapview, 10, 10)\n.release().\nperform();\n\n\n\n\n// javascript\nvar action = new wd.TouchAction(driver);\naction\n  .tap({el: el, x: 10, y: 10})\n  .release();\nreturn action.perform(); // returns a promise\n\n\n\n\n// php\n$action = $this-\ninitiateTouchAction();\n               -\npress(array('element' =\n $el))\n               -\nrelease()\n               -\nperform();\n\n$action1 = $this-\ninitiateTouchAction();\n$action1-\npress(array('element' =\n $els[0]))\n        -\nmoveTo(array('x' =\n 10, 'y' =\n 0))\n        -\nmoveTo(array('x' =\n 10, 'y' =\n -75))\n        -\nmoveTo(array('x' =\n 10, 'y' =\n -600))\n        -\nrelease();\n\n$action2 = $this-\ninitiateTouchAction();\n$action2-\npress(array('element' =\n $els[1]))\n        -\nmoveTo(array('x' =\n 10, 'y' =\n 10))\n        -\nmoveTo(array('x' =\n 10, 'y' =\n -300))\n        -\nmoveTo(array('x' =\n 10, 'y' =\n -600))\n        -\nrelease();\n\n$multiAction = $this-\ninitiateMultiAction();\n$multiAction-\nadd($action1);\n$multiAction-\nadd($action2);\n$multiAction-\nperform();\n\n\n\n\n// c#\nITouchAction action = new TouchAction(driver);\naction.Press(el, 10, 10).Release();\naction.Perform ();\n\n\n\n\nSwipe\n\n\nSimulate a user swipe.\n\n\n# ruby\nswipe start_x: 75, start_y: 500, end_x: 75, end_y: 0, duration: 0.8\n\n\n\n\n# python\ndriver.swipe(start_x=75, start_y=500, end_x=75, end_y=0, duration=800)\n\n\n\n\n// java\ndriver.swipe(75, 500, 75, 0, 0.8)\n\n\n\n\n// javascript\nfunction swipe(opts) {\n  var action = new wd.TouchAction(this);\n  action\n    .press({x: opts.startX, y: opts.startY})\n    .wait(opts.duration)\n    .moveTo({x: opts.endX, y: opts.endY})\n    .release();\n  return action.perform();\n}\nwd.addPromiseChainMethod('swipe', swipe);\n// ...\nreturn driver.swipe({ startX: 75, startY: 500,\n  endX: 75,  endY: 0, duration: 800 });\n\n\n\n\n// php\n$this-\nswipe(75, 500, 75, 0, 800);\n\n\n\n\n// c#\ntodo: c#\n\n\n\n\nPinch\n\n\nPinch the screen.\n\n\n# ruby\npinch 75\n\n\n\n\n# python\ndriver.pinch(element=el)\n\n\n\n\n// java\ndriver.pinch(element);\n\n\n\n\n// javascript\nfunction pinch(el) {\n  return Q.all([\n    el.getSize(),\n    el.getLocation(),\n  ]).then(function(res) {\n    var size = res[0];\n    var loc = res[1];\n    var center = {\n      x: loc.x + size.width / 2,\n      y: loc.y + size.height / 2\n    };\n    var a1 = new wd.TouchAction(this);\n    a1.press({el: el, x: center.x, y:center.y - 100}).moveTo({el: el}).release();\n    var a2 = new wd.TouchAction(this);\n    a2.press({el: el, x: center.x, y: center.y + 100}).moveTo({el: el}).release();\n    var m = new wd.MultiAction(this);\n    m.add(a1, a2);\n    return m.perform();\n  }.bind(this));\n};\nwd.addPromiseChainMethod('pinch', pinch);\nwd.addElementPromiseChainMethod('pinch', function() {\n  return this.browser.pinch(this);\n});\n// ...\nreturn driver.pinch(el);\n// ...\nreturn el.pinch();\n\n\n\n\n$this-\npinch($el);\n\n\n\n\n// c#\ndriver.Pinch(25, 25)\n\n\n\n\nZoom\n\n\nZoom the screen.\n\n\n# ruby\nzoom 200\n\n\n\n\n# python\ndriver.zoom(element=el)\n\n\n\n\n// java\ndriver.zoom(element);\n\n\n\n\n// javascript\nfunction zoom(el) {\n  return Q.all([\n    this.getWindowSize(),\n    this.getLocation(el),\n  ]).then(function(res) {\n    var size = res[0];\n    var loc = res[1];\n    var center = {\n      x: loc.x + size.width / 2,\n      y: loc.y + size.height / 2\n    };\n    var a1 = new wd.TouchAction(this);\n    a1.press({el: el}).moveTo({el: el, x: center.x, y: center.y - 100}).release();\n    var a2 = new wd.TouchAction(this);\n    a2.press({el: el}).moveTo({el: el, x: center.x, y: center.y + 100}).release();\n    var m = new wd.MultiAction(this);\n    m.add(a1, a2);\n    return m.perform();\n  }.bind(this));\n};\nwd.addPromiseChainMethod('zoom', zoom);\nwd.addElementPromiseChainMethod('zoom', function() {\n  return this.browser.zoom(this);\n});\n// ...\nreturn driver.zoom(el);\n// ...\nreturn el.zoom();\n\n\n\n\n// php\n$this-\nzoom($el);\n\n\n\n\n// c#\ndriver.Zoom(100, 200);\n\n\n\n\nScroll To\n\n\nScroll to an element.\n\n\n# ruby\nelement = find_element :accessibility_id, \nElement ID\n\nexecute_script \nmobile: scroll\n, direction: \ndown\n, element: element.ref\n\n\n\n\n# python\ndriver.execute_script(\nmobile: scroll\n, {\ndirection\n: \ndown\n, \nelement\n: element.id})\n\n\n\n\n// java\nJavascriptExecutor js = (JavascriptExecutor) driver;\nHashMap\nString, String\n scrollObject = new HashMap\nString, String\n();\nscrollObject.put(\ndirection\n, \ndown\n);\nscrollObject.put(\nelement\n, ((RemoteWebElement) element).getId());\njs.executeScript(\nmobile: scroll\n, scrollObject);\n\n\n\n\n// javascript\nreturn driver.elementByAccessibilityId().then(function (el) {\n  driver.execute(\nmobile: scroll\n, [{direction: \ndown\n, element: el.value}]);\n});\n\n\n\n\n// php\n$els = $this-\nelements($this-\nusing('class name')-\nvalue('android.widget.TextView'));\n$this-\nscroll($els[count($els) - 1], $els[0]);\n\n\n\n\n// c#\nDictionary\nstring, string\n scrollObject = new Dictionary\nstring, string\n();\nscrollObject.Add(\ndirection\n, \ndown\n);\nscrollObject.Add(\nelement\n, \nelement_id\n);\n((IJavaScriptExecutor)driver).ExecuteScript(\nmobile: scroll\n, scrollObject));\n\n\n\n\nPull file\n\n\nPulls a file from the device.\n\n\n# ruby\npull_file 'Library/AddressBook/AddressBook.sqlitedb'\n\n\n\n\n# python\ndriver.pull_file('Library/AddressBook/AddressBook.sqlitedb')\n\n\n\n\n// java\ndriver.pullFile(\nLibrary/AddressBook/AddressBook.sqlitedb\n);\n\n\n\n\n// javascript\ndriver.pullFile(\nLibrary/AddressBook/AddressBook.sqlitedb\n)\n  .then(function (base64File) { /*...*/ })\n\n\n\n\n// php\n$this-\npullFile('Library/AddressBook/AddressBook.sqlitedb');\n\n\n\n\n// c#\ndriver.PullFile(\nLibrary/AddressBook/AddressBook.sqlitedb\n);\n\n\n\n\nPush File\n\n\nPushes a file to the device.\n\n\n# ruby\ndata = \nsome data for the file\n\npath = \n/data/local/tmp/file.txt\n\npush_file path, data\n\n\n\n\n# python\ndata = \nsome data for the file\n\npath = \n/data/local/tmp/file.txt\n\ndriver.push_file(path, data.encode('base64'))\n\n\n\n\n// java\nbyte[] data = Base64.encodeBase64(\nsome data for the file\n.getBytes());\nString path = \n/data/local/tmp/file.txt\n;\ndriver.pushFile(path, data)\n\n\n\n\n// javascript\ndriver.pushFile(path, data)\n\n\n\n\n// php\n$path = 'data/local/tmp/test_push_file.txt';\n$data = 'This is the contents of the file to push to the device.';\n$this-\npushFile($path, base64_encode($data));\n\n\n\n\n// c#\ndriver.PushFile(\n/data/local/tmp/file.txt\n, \nsome data for the file\n);\n\n\n\n\nSettings\n\n\nHere you will find sample code for getting/setting appium serverSetting.\nFor more information on how they work, and which settings are supported, see\n\nthe settings docs\n.\n\n\n# ruby\ncurrent_settings = get_settings\nupdate_settings someSetting: true\n\n\n\n\n# python\ncurrent_settings = driver.get_settings()\ndriver.update_settings({\nsomeSetting\n: true})\n\n\n\n\n// java\nJsonObject settings = driver.getSettings()\n// java-client doesn't support setting arbitrary settings, just settings which are already provided by appium.\n// So for the 'ignoreUnimportantViews' setting, the following method exists:\ndriver.ignoreUnimportantViews(true);\n\n\n\n\n// javascript\nvar settings = driver.settings();\nbrowser.updateSettings({'someSetting': true});\n\n\n\n\n// php\n$settings = $this-\ngetSettings();\n$this-\nupdateSettings(array('cyberdelia' =\n \nopen\n));\n\n\n\n\n// c#\nDictionary\nString, Object\nsettings = driver.GetSettings();\n// dotnet-driver doesn't support setting arbitrary settings, just settings which are already provided by appium.\n// So for the 'ignoreUnimportantViews' setting, the following method exists:\ndriver.IgnoreUnimportantViews(true);\n\n\n\n\nAppium Desktop Apps\n\n\nAppium's desktop app supports OS X, Windows and Linux.\n\n\n\n\n[Appium Desktop][https://www.github.com/appium/appium-desktop/releases/latest]", 
            "title": "Appium bindings"
        }, 
        {
            "location": "/writing-and-running/appium-bindings/#appium-client-libraries", 
            "text": "Appium has libraries for:     Language  Source      Ruby  GitHub    Python  GitHub    Java  GitHub    JavaScript  GitHub    PHP  GitHub    C#  GitHub    Objective-C  GitHub     Note that some methods such as  endTestCoverage()  are\nnot generally useful. Proper coverage support will be added once  this issue \nis resolved. If you want to use them anyway, consult the documentation for the bindings on GitHub.", 
            "title": "Appium Client Libraries"
        }, 
        {
            "location": "/writing-and-running/appium-bindings/#lock", 
            "text": "Lock the screen.  # ruby\nlock 5  # python\ndriver.lock(5)  // java\ndriver.lockScreen(3);  // javascript\ndriver.lock(3)  // php\n$this- lock(3);  // c#\ndriver.LockDevice(3);  // objective c\n[driver lockDeviceScreen:3];", 
            "title": "Lock"
        }, 
        {
            "location": "/writing-and-running/appium-bindings/#background-app", 
            "text": "Send the currently active app to the background, and either return after a certain amount of time, or leave the app deactivated.  There are 2 types of parameters which may be passed to this method:   An integer (in seconds): how long to background the app for. -1 means to deactivate the app entirely. This style of parameter is deprecated.  An object that looks like  {\"timeout\": secs} , where  secs  is again an integer with the semantics mentioned just above in 1, or  null  (which means to deactivate entirely).   # ruby\nbackground_app 5  # background app for 5 seconds\nbackground_app -1  # deactivate app  # python\ndriver.background_app(5)  # background for 5 seconds\ndriver.background_app(-1) # deactivate app\ndriver.background_app({'timeout': None}) # deactivate app  // java\ndriver.runAppInBackground(5);  // for 5 seconds\ndriver.runAppInBackground(-1);  // deactivate completely  // javascript\ndriver.backgroundApp(5);  // for 5 seconds\ndriver.backgroundApp(-1); // deactivate app\ndriver.backgroundApp({timeout: null}); // deactivate app  // php\n$this- backgroundApp(5);\n$this- backgroundApp(-1);  // c#\ndriver.BackgroundApp(5);\ndriver.BackgroundApp(-1);  // objective c\n[driver runAppInBackground:3];\n[driver runAppInBackground:-1];", 
            "title": "Background app"
        }, 
        {
            "location": "/writing-and-running/appium-bindings/#hide-keyboard", 
            "text": "Hide the keyboard.  Note : on iOS, this helper function is not guaranteed to\nwork. There is no automation hook for hiding the keyboard, and apps are free to\nallow the user to hide the keyboard using any of a variety of different\nstrategies, whether that is tapping outside the keyboard, swiping down, etc...\nWe encourage you, rather than using this method, to think about how a  user \nwould hide the keyboard in your app, and tell Appium to do that instead (swipe,\ntap on a certain coordinate, etc...). That being said, the default behavior\nhere might help you.  # ruby\nhide_keyboard  # python\ndriver.hide_keyboard()  // java\ndriver.hideKeyboard();  // javascript\ndriver.hideKeyboard()  // php\n$this- hideKeyboard();\n$this- hideKeyboard(array('strategy' =  'pressKey', 'key' =  'Done'));  // c#\ndriver.HideKeyboard( Done );  // objective c\n[driver hideKeyboard];", 
            "title": "Hide Keyboard"
        }, 
        {
            "location": "/writing-and-running/appium-bindings/#start-activity", 
            "text": "Open an activity in the current app or start a new app and open an activity  Android only  // java\ndriver.startActivity( appPackage , com.example.android.apis , null, null);  // javascript\ndriver.startActivity({appPackage: 'com.example.android.apis', appActivity: '.Foo'}, cb);  # python\ndriver.start_activity('com.example.android.apis', '.Foo')  # ruby\nstart_activity app_package: 'io.appium.android.apis', app_activity: '.accessibility.AccessibilityNodeProviderActivity'  // c#\ndriver.StartActivity( com.example.android.apis ,  .Foo );  // php\n$this- startActivity(array( appPackage  =   com.example.android.apis ,\n                             appActivity  =   .Foo ));  // objective c\n[driver startActivity:@ com.example.android.apis  package:@ .Foo ];", 
            "title": "Start Activity"
        }, 
        {
            "location": "/writing-and-running/appium-bindings/#open-notifications", 
            "text": "Open the notification shade  Android only  // java\ndriver.openNotifications();  // javascript\ndriver.openNotifications(cb);  # python\ndriver.open_notifications()  # ruby\nopen_notifications  // c#\ndriver.OpenNotifications();  // php\n$this- openNotifications();  // objective c\n[driver openNotifications];", 
            "title": "Open Notifications"
        }, 
        {
            "location": "/writing-and-running/appium-bindings/#is-installed", 
            "text": "Check if an app is installed  # ruby\nis_installed?  com.example.android.apis   # python\ndriver.is_app_installed('com.example.android.apis')  // java\ndriver.isAppInstalled( com.example.android.apis )  // javascript\ndriver.isAppInstalled( com.example.android.apis )\n  .then(function (isAppInstalled) { /*...*/ })  // php\n$this- isAppInstalled('com.example.android.apis');  // c#\ndriver.IsAppInstalled( com.example.android.apis- );  // objective c\n[driver isAppInstalled:@ com.example.android.apis- ];", 
            "title": "Is installed"
        }, 
        {
            "location": "/writing-and-running/appium-bindings/#install-app", 
            "text": "Install an app to the device.  # ruby\ninstall 'path/to/my.apk'  # python\ndriver.install_app('path/to/my.apk')  // java\ndriver.installApp( path/to/my.apk )  // javascript\ndriver.installApp( path/to/my.apk )  // php\n$this- installApp('path/to/my.apk');  // c#\ndriver.InstallApp( path/to/my.apk );  // objective c\n[driver installAppAtPath:@ path/to/my.apk ];", 
            "title": "Install App"
        }, 
        {
            "location": "/writing-and-running/appium-bindings/#remove-app", 
            "text": "Remove an app from the device.  # ruby\nremove 'com.example.android.apis'  # python\ndriver.remove_app('com.example.android.apis')  // java\ndriver.removeApp( com.example.android.apis )  // javascript\ndriver.removeApp( com.example.android.apis )  // php\n$this- removeApp('com.example.android.apis');  // c#\ndriver.RemoveApp( com.example.android.apis );  // objective c\n[driver removeApp:@ com.example.android.apis ];", 
            "title": "Remove App"
        }, 
        {
            "location": "/writing-and-running/appium-bindings/#shake", 
            "text": "Simulate the device shaking.  # ruby\nshake  # python\ndriver.shake()  // java\ndriver.shake()  // javascript\ndriver.shake()  // php\n$this- shake();  // c#\ndriver.ShakeDevice();  // objective c\n[driver shakeDevice];", 
            "title": "Shake"
        }, 
        {
            "location": "/writing-and-running/appium-bindings/#close-app", 
            "text": "Close the app  # ruby\nclose_app  # python\ndriver.close_app();  // java\ndriver.closeApp()  // javascript\ndriver.closeApp()  // php\n$this- closeApp();  // c#\ndriver.CloseApp();  // objective c\n[driver closeApp];", 
            "title": "Close app"
        }, 
        {
            "location": "/writing-and-running/appium-bindings/#launch", 
            "text": "Launch the session for the desired capabilities. Note that this is the\ncompanion to the autoLaunch=false capability. This is not for launching\narbitrary apps/activities---for that use  start_activity . This is for\ncontinuing the initialization (\"launch\") process if you have used\nautoLaunch=false.  # ruby\nlaunch_app  # python\ndriver.launch_app()  // java\ndriver.launchApp()  // javascript\ndriver.launchApp()  // php\n$this- launchApp();  // c#\ndriver.LaunchApp();  // objective c\n[driver launchApp];", 
            "title": "Launch"
        }, 
        {
            "location": "/writing-and-running/appium-bindings/#reset", 
            "text": "Reset the app.  # ruby\ndriver.reset  # python\ndriver.reset()  // java\ndriver.resetApp()  // javascript\ndriver.resetApp()  // php\n$this- reset();  // c#\ndriver.ResetApp();  // objective c\n[driver resetApp];", 
            "title": "Reset"
        }, 
        {
            "location": "/writing-and-running/appium-bindings/#available-contexts", 
            "text": "List all available contexts  # ruby\ncontext_array = available_contexts  # python\ndriver.contexts  // java\ndriver.getContextHandles()  // javascript\ndriver.contexts().then(function (contexts) { /*...*/ })  // php\n$this- contexts();  // c#\ndriver.GetContexts()  // objective c\nNSArray *contexts = driver.allContexts;", 
            "title": "Available Contexts"
        }, 
        {
            "location": "/writing-and-running/appium-bindings/#current-context", 
            "text": "List the current context  # ruby\ncontext = current_context  # python\ndriver.current_context  // java\ndriver.getContext()  // javascript\ndriver.currentContext().then(function (context) { /*...*/ })  // php\n$this- context();  // c#\ndriver.GetContext()  // objective c\nNSString *context = driver.context;", 
            "title": "Current context"
        }, 
        {
            "location": "/writing-and-running/appium-bindings/#switch-to-default-context", 
            "text": "Change the context to the default.  # ruby\nswitch_to_default_context  # python\ndriver.switch_to.context(None)  // java\ndriver.context();  // javascript\ndriver.context()  // php\n$this- context(NULL);  // c#\ndriver.SetContext();  // objective c\n[driver setContext:nil];", 
            "title": "Switch to default context"
        }, 
        {
            "location": "/writing-and-running/appium-bindings/#app-strings", 
            "text": "Get the app's strings.  # ruby\napp_strings  # python\ndriver.app_strings  // java\ndriver.getAppStrings();  // javascript\ndriver.getAppStrings().then(function (appStrings) { /*...*/ })  // php\n$this- appStrings();\n$this- appStrings('ru');  // c#\ndriver.GetAppStrings();  // objective c\n[driver appStrings];\n[driver appStringsForLanguage: @ru ];", 
            "title": "App Strings"
        }, 
        {
            "location": "/writing-and-running/appium-bindings/#key-event", 
            "text": "Send a key event to the device.  # ruby\nkey_event 176  # python\ndriver.keyevent(176)  // java\ndriver.sendKeyEvent(AndroidKeyCode.HOME);  // javascript\ndriver.deviceKeyEvent(wd.SPECIAL_KEYS.Home)  // php\n$this- keyEvent('176');  // c#\ndriver.KeyEvent( 176 );  // objective c\nNSError *err;\n[driver triggerKeyEvent:176 metastate:0 error: err];", 
            "title": "Key Event"
        }, 
        {
            "location": "/writing-and-running/appium-bindings/#current-activity", 
            "text": "Android only. Get the current activity.  # ruby\ncurrent_activity  # python\ndriver.current_activity  // java\ndriver.currentActivity();  // javascript\ndriver.getCurrentActivity().then(function (activity) { /*...*/ })  // php\n$this- currentActivity();  // c#\ndriver.GetCurrentActivity();  // objective c\nNSError *err;\n[driver currentActivity];", 
            "title": "Current Activity"
        }, 
        {
            "location": "/writing-and-running/appium-bindings/#current-package", 
            "text": "Android only. Get the current package.  # ruby\ncurrent_package  # python\ndriver.current_package  // java\ndriver.getCurrentPackage();  // javascript\ndriver.getCurrentPackage().then(function (package) { /*...*/ })  // php\n$this- currentPackage();  // c#\ndriver.GetCurrentPackage();", 
            "title": "Current Package"
        }, 
        {
            "location": "/writing-and-running/appium-bindings/#touchaction-multitouchaction", 
            "text": "An API for generating touch actions. This section of the documentation will be\nexpanded upon soon.  # ruby\ntouch_action = Appium::TouchAction.new\nelement  = find_element :accessibility_id, 'Buttons, Various uses of UIButton'\ntouch_action.press(element: element, x: 10, y: 10).perform  # python\naction = TouchAction(driver)\naction.press(element=el, x=10, y=10).release().perform()  // java\nTouchAction action = new TouchAction(driver)\n.press(mapview, 10, 10)\n.release().\nperform();  // javascript\nvar action = new wd.TouchAction(driver);\naction\n  .tap({el: el, x: 10, y: 10})\n  .release();\nreturn action.perform(); // returns a promise  // php\n$action = $this- initiateTouchAction();\n               - press(array('element' =  $el))\n               - release()\n               - perform();\n\n$action1 = $this- initiateTouchAction();\n$action1- press(array('element' =  $els[0]))\n        - moveTo(array('x' =  10, 'y' =  0))\n        - moveTo(array('x' =  10, 'y' =  -75))\n        - moveTo(array('x' =  10, 'y' =  -600))\n        - release();\n\n$action2 = $this- initiateTouchAction();\n$action2- press(array('element' =  $els[1]))\n        - moveTo(array('x' =  10, 'y' =  10))\n        - moveTo(array('x' =  10, 'y' =  -300))\n        - moveTo(array('x' =  10, 'y' =  -600))\n        - release();\n\n$multiAction = $this- initiateMultiAction();\n$multiAction- add($action1);\n$multiAction- add($action2);\n$multiAction- perform();  // c#\nITouchAction action = new TouchAction(driver);\naction.Press(el, 10, 10).Release();\naction.Perform ();", 
            "title": "TouchAction / MultiTouchAction"
        }, 
        {
            "location": "/writing-and-running/appium-bindings/#swipe", 
            "text": "Simulate a user swipe.  # ruby\nswipe start_x: 75, start_y: 500, end_x: 75, end_y: 0, duration: 0.8  # python\ndriver.swipe(start_x=75, start_y=500, end_x=75, end_y=0, duration=800)  // java\ndriver.swipe(75, 500, 75, 0, 0.8)  // javascript\nfunction swipe(opts) {\n  var action = new wd.TouchAction(this);\n  action\n    .press({x: opts.startX, y: opts.startY})\n    .wait(opts.duration)\n    .moveTo({x: opts.endX, y: opts.endY})\n    .release();\n  return action.perform();\n}\nwd.addPromiseChainMethod('swipe', swipe);\n// ...\nreturn driver.swipe({ startX: 75, startY: 500,\n  endX: 75,  endY: 0, duration: 800 });  // php\n$this- swipe(75, 500, 75, 0, 800);  // c#\ntodo: c#", 
            "title": "Swipe"
        }, 
        {
            "location": "/writing-and-running/appium-bindings/#pinch", 
            "text": "Pinch the screen.  # ruby\npinch 75  # python\ndriver.pinch(element=el)  // java\ndriver.pinch(element);  // javascript\nfunction pinch(el) {\n  return Q.all([\n    el.getSize(),\n    el.getLocation(),\n  ]).then(function(res) {\n    var size = res[0];\n    var loc = res[1];\n    var center = {\n      x: loc.x + size.width / 2,\n      y: loc.y + size.height / 2\n    };\n    var a1 = new wd.TouchAction(this);\n    a1.press({el: el, x: center.x, y:center.y - 100}).moveTo({el: el}).release();\n    var a2 = new wd.TouchAction(this);\n    a2.press({el: el, x: center.x, y: center.y + 100}).moveTo({el: el}).release();\n    var m = new wd.MultiAction(this);\n    m.add(a1, a2);\n    return m.perform();\n  }.bind(this));\n};\nwd.addPromiseChainMethod('pinch', pinch);\nwd.addElementPromiseChainMethod('pinch', function() {\n  return this.browser.pinch(this);\n});\n// ...\nreturn driver.pinch(el);\n// ...\nreturn el.pinch();  $this- pinch($el);  // c#\ndriver.Pinch(25, 25)", 
            "title": "Pinch"
        }, 
        {
            "location": "/writing-and-running/appium-bindings/#zoom", 
            "text": "Zoom the screen.  # ruby\nzoom 200  # python\ndriver.zoom(element=el)  // java\ndriver.zoom(element);  // javascript\nfunction zoom(el) {\n  return Q.all([\n    this.getWindowSize(),\n    this.getLocation(el),\n  ]).then(function(res) {\n    var size = res[0];\n    var loc = res[1];\n    var center = {\n      x: loc.x + size.width / 2,\n      y: loc.y + size.height / 2\n    };\n    var a1 = new wd.TouchAction(this);\n    a1.press({el: el}).moveTo({el: el, x: center.x, y: center.y - 100}).release();\n    var a2 = new wd.TouchAction(this);\n    a2.press({el: el}).moveTo({el: el, x: center.x, y: center.y + 100}).release();\n    var m = new wd.MultiAction(this);\n    m.add(a1, a2);\n    return m.perform();\n  }.bind(this));\n};\nwd.addPromiseChainMethod('zoom', zoom);\nwd.addElementPromiseChainMethod('zoom', function() {\n  return this.browser.zoom(this);\n});\n// ...\nreturn driver.zoom(el);\n// ...\nreturn el.zoom();  // php\n$this- zoom($el);  // c#\ndriver.Zoom(100, 200);", 
            "title": "Zoom"
        }, 
        {
            "location": "/writing-and-running/appium-bindings/#scroll-to", 
            "text": "Scroll to an element.  # ruby\nelement = find_element :accessibility_id,  Element ID \nexecute_script  mobile: scroll , direction:  down , element: element.ref  # python\ndriver.execute_script( mobile: scroll , { direction :  down ,  element : element.id})  // java\nJavascriptExecutor js = (JavascriptExecutor) driver;\nHashMap String, String  scrollObject = new HashMap String, String ();\nscrollObject.put( direction ,  down );\nscrollObject.put( element , ((RemoteWebElement) element).getId());\njs.executeScript( mobile: scroll , scrollObject);  // javascript\nreturn driver.elementByAccessibilityId().then(function (el) {\n  driver.execute( mobile: scroll , [{direction:  down , element: el.value}]);\n});  // php\n$els = $this- elements($this- using('class name')- value('android.widget.TextView'));\n$this- scroll($els[count($els) - 1], $els[0]);  // c#\nDictionary string, string  scrollObject = new Dictionary string, string ();\nscrollObject.Add( direction ,  down );\nscrollObject.Add( element ,  element_id );\n((IJavaScriptExecutor)driver).ExecuteScript( mobile: scroll , scrollObject));", 
            "title": "Scroll To"
        }, 
        {
            "location": "/writing-and-running/appium-bindings/#pull-file", 
            "text": "Pulls a file from the device.  # ruby\npull_file 'Library/AddressBook/AddressBook.sqlitedb'  # python\ndriver.pull_file('Library/AddressBook/AddressBook.sqlitedb')  // java\ndriver.pullFile( Library/AddressBook/AddressBook.sqlitedb );  // javascript\ndriver.pullFile( Library/AddressBook/AddressBook.sqlitedb )\n  .then(function (base64File) { /*...*/ })  // php\n$this- pullFile('Library/AddressBook/AddressBook.sqlitedb');  // c#\ndriver.PullFile( Library/AddressBook/AddressBook.sqlitedb );", 
            "title": "Pull file"
        }, 
        {
            "location": "/writing-and-running/appium-bindings/#push-file", 
            "text": "Pushes a file to the device.  # ruby\ndata =  some data for the file \npath =  /data/local/tmp/file.txt \npush_file path, data  # python\ndata =  some data for the file \npath =  /data/local/tmp/file.txt \ndriver.push_file(path, data.encode('base64'))  // java\nbyte[] data = Base64.encodeBase64( some data for the file .getBytes());\nString path =  /data/local/tmp/file.txt ;\ndriver.pushFile(path, data)  // javascript\ndriver.pushFile(path, data)  // php\n$path = 'data/local/tmp/test_push_file.txt';\n$data = 'This is the contents of the file to push to the device.';\n$this- pushFile($path, base64_encode($data));  // c#\ndriver.PushFile( /data/local/tmp/file.txt ,  some data for the file );", 
            "title": "Push File"
        }, 
        {
            "location": "/writing-and-running/appium-bindings/#settings", 
            "text": "Here you will find sample code for getting/setting appium serverSetting.\nFor more information on how they work, and which settings are supported, see the settings docs .  # ruby\ncurrent_settings = get_settings\nupdate_settings someSetting: true  # python\ncurrent_settings = driver.get_settings()\ndriver.update_settings({ someSetting : true})  // java\nJsonObject settings = driver.getSettings()\n// java-client doesn't support setting arbitrary settings, just settings which are already provided by appium.\n// So for the 'ignoreUnimportantViews' setting, the following method exists:\ndriver.ignoreUnimportantViews(true);  // javascript\nvar settings = driver.settings();\nbrowser.updateSettings({'someSetting': true});  // php\n$settings = $this- getSettings();\n$this- updateSettings(array('cyberdelia' =   open ));  // c#\nDictionary String, Object settings = driver.GetSettings();\n// dotnet-driver doesn't support setting arbitrary settings, just settings which are already provided by appium.\n// So for the 'ignoreUnimportantViews' setting, the following method exists:\ndriver.IgnoreUnimportantViews(true);", 
            "title": "Settings"
        }, 
        {
            "location": "/writing-and-running/appium-bindings/#appium-desktop-apps", 
            "text": "Appium's desktop app supports OS X, Windows and Linux.   [Appium Desktop][https://www.github.com/appium/appium-desktop/releases/latest]", 
            "title": "Appium Desktop Apps"
        }, 
        {
            "location": "/writing-and-running/caps/", 
            "text": "Appium server capabilities\n\n\n\n\n\n\n\n\n\n\nCapability\n\n\nDescription\n\n\nValues\n\n\n\n\n\n\n\n\n\n\nautomationName\n\n\nWhich automation engine to use\n\n\nAppium\n (default) or \nSelendroid\n\n\n\n\n\n\nplatformName\n\n\nWhich mobile OS platform to use\n\n\niOS\n, \nAndroid\n, or \nFirefoxOS\n\n\n\n\n\n\nplatformVersion\n\n\nMobile OS version\n\n\ne.g., \n7.1\n, \n4.4\n\n\n\n\n\n\ndeviceName\n\n\nThe kind of mobile device or emulator to use\n\n\niPhone Simulator\n, \niPad Simulator\n, \niPhone Retina 4-inch\n, \nAndroid Emulator\n, \nGalaxy S4\n, etc.... On iOS, this should be one of the valid devices returned by instruments with \ninstruments -s devices\n. On Android this capability is currently ignored, though it remains required.\n\n\n\n\n\n\napp\n\n\nThe absolute local path \nor\n remote http URL to an \n.ipa\n or \n.apk\n file, or a \n.zip\n containing one of these. Appium will attempt to install this app binary on the appropriate device first. Note that this capability is not required for Android if you specify \nappPackage\n and \nappActivity\n capabilities (see below). Incompatible with \nbrowserName\n.\n\n\n/abs/path/to/my.apk\n or \nhttp://myapp.com/app.ipa\n\n\n\n\n\n\nbrowserName\n\n\nName of mobile web browser to automate. Should be an empty string if automating an app instead.\n\n\n'Safari' for iOS and 'Chrome', 'Chromium', or 'Browser' for Android\n\n\n\n\n\n\nnewCommandTimeout\n\n\nHow long (in seconds) Appium will wait for a new command from the client before assuming the client quit and ending the session\n\n\ne.g. \n60\n\n\n\n\n\n\nlanguage\n\n\n(Sim/Emu-only) Language to set for the simulator / emulator\n\n\ne.g. \nfr\n\n\n\n\n\n\nlocale\n\n\n(Sim/Emu-only) Locale to set for the simulator / emulator\n\n\ne.g. \nfr_CA\n\n\n\n\n\n\nudid\n\n\nUnique device identifier of the connected physical device\n\n\ne.g. \n1ae203187fc012g\n\n\n\n\n\n\norientation\n\n\n(Sim/Emu-only) start in a certain orientation\n\n\nLANDSCAPE\n or \nPORTRAIT\n\n\n\n\n\n\nautoWebview\n\n\nMove directly into Webview context. Default \nfalse\n\n\ntrue\n, \nfalse\n\n\n\n\n\n\nnoReset\n\n\nDon't reset app state before this session. See \nhere\n for more details\n\n\ntrue\n, \nfalse\n\n\n\n\n\n\nfullReset\n\n\nPerform a complete reset. See \nhere\n for more details\n\n\ntrue\n, \nfalse\n\n\n\n\n\n\neventTimings\n\n\nEnable or disable the reporting of the timings for various Appium-internal events (e.g., the start and end of each command, etc.). Defaults to \nfalse\n. To enable, use \ntrue\n. The timings are then reported as \nevents\n property on response to querying the current session. See the \nevent timing docs\n for the the structure of this response.\n\n\ne.g., \ntrue\n\n\n\n\n\n\nenablePerformanceLogging\n\n\n(Web and webview only) Enable Chromedriver's (on Android) or Safari's (on iOS) performance logging (default \nfalse\n)\n\n\ntrue\n, \nfalse\n\n\n\n\n\n\n\n\nAndroid Only\n\n\n\n\n\n\n\n\n\n\nCapability\n\n\nDescription\n\n\nValues\n\n\n\n\n\n\n\n\n\n\nappActivity\n\n\nActivity name for the Android activity you want to launch from your package. This often needs to be preceded by a \n.\n (e.g., \n.MainActivity\n instead of \nMainActivity\n)\n\n\nMainActivity\n, \n.Settings\n\n\n\n\n\n\nappPackage\n\n\nJava package of the Android app you want to run\n\n\ncom.example.android.myApp\n, \ncom.android.settings\n\n\n\n\n\n\nappWaitActivity\n\n\nActivity name/names, comma separated, for the Android activity you want to wait for\n\n\nSplashActivity\n, \nSplashActivity,OtherActivity\n, \n*\n, \n*.SplashActivity\n\n\n\n\n\n\nappWaitPackage\n\n\nJava package of the Android app you want to wait for\n\n\ncom.example.android.myApp\n, \ncom.android.settings\n\n\n\n\n\n\nappWaitDuration\n\n\nTimeout in milliseconds used to wait for the appWaitActivity to launch (default \n20000\n)\n\n\n30000\n\n\n\n\n\n\ndeviceReadyTimeout\n\n\nTimeout in seconds while waiting for device to become ready\n\n\n5\n\n\n\n\n\n\nandroidCoverage\n\n\nFully qualified instrumentation class. Passed to -w in adb shell am instrument -e coverage true -w\n\n\ncom.my.Pkg/com.my.Pkg.instrumentation.MyInstrumentation\n\n\n\n\n\n\nandroidDeviceReadyTimeout\n\n\nTimeout in seconds used to wait for a device to become ready after booting\n\n\ne.g., \n30\n\n\n\n\n\n\nandroidInstallTimeout\n\n\nTimeout in milliseconds used to wait for an apk to install to the device. Defaults to \n90000\n\n\ne.g., \n90000\n\n\n\n\n\n\nandroidInstallPath\n\n\nThe name of the directory on the device in which the apk will be push before install. Defaults to \n/data/local/tmp\n\n\ne.g. \n/sdcard/Downloads/\n\n\n\n\n\n\nadbPort\n\n\nPort used to connect to the ADB server (default \n5037\n)\n\n\n5037\n\n\n\n\n\n\nremoteAdbHost\n\n\nOptional remote ADB server host\n\n\ne.g.: 192.168.0.101\n\n\n\n\n\n\nandroidDeviceSocket\n\n\nDevtools socket name. Needed only when tested app is a Chromium embedding browser. The socket is open by the browser and Chromedriver connects to it as a devtools client.\n\n\ne.g., \nchrome_devtools_remote\n\n\n\n\n\n\navd\n\n\nName of avd to launch\n\n\ne.g., \napi19\n\n\n\n\n\n\navdLaunchTimeout\n\n\nHow long to wait in milliseconds for an avd to launch and connect to ADB (default \n120000\n)\n\n\n300000\n\n\n\n\n\n\navdReadyTimeout\n\n\nHow long to wait in milliseconds for an avd to finish its boot animations (default \n120000\n)\n\n\n300000\n\n\n\n\n\n\navdArgs\n\n\nAdditional emulator arguments used when launching an avd\n\n\ne.g., \n-netfast\n\n\n\n\n\n\nuseKeystore\n\n\nUse a custom keystore to sign apks, default \nfalse\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\nkeystorePath\n\n\nPath to custom keystore, default ~/.android/debug.keystore\n\n\ne.g., \n/path/to.keystore\n\n\n\n\n\n\nkeystorePassword\n\n\nPassword for custom keystore\n\n\ne.g., \nfoo\n\n\n\n\n\n\nkeyAlias\n\n\nAlias for key\n\n\ne.g., \nandroiddebugkey\n\n\n\n\n\n\nkeyPassword\n\n\nPassword for key\n\n\ne.g., \nfoo\n\n\n\n\n\n\nchromedriverExecutable\n\n\nThe absolute local path to webdriver executable (if Chromium embedder provides its own webdriver, it should be used instead of original chromedriver bundled with Appium)\n\n\n/abs/path/to/webdriver\n\n\n\n\n\n\nautoWebviewTimeout\n\n\nAmount of time to wait for Webview context to become active, in ms. Defaults to \n2000\n\n\ne.g. \n4\n\n\n\n\n\n\nintentAction\n\n\nIntent action which will be used to start activity (default \nandroid.intent.action.MAIN\n)\n\n\ne.g.\nandroid.intent.action.MAIN\n, \nandroid.intent.action.VIEW\n\n\n\n\n\n\nintentCategory\n\n\nIntent category which will be used to start activity (default \nandroid.intent.category.LAUNCHER\n)\n\n\ne.g. \nandroid.intent.category.LAUNCHER\n, \nandroid.intent.category.APP_CONTACTS\n\n\n\n\n\n\nintentFlags\n\n\nFlags that will be used to start activity (default \n0x10200000\n)\n\n\ne.g. \n0x10200000\n\n\n\n\n\n\noptionalIntentArguments\n\n\nAdditional intent arguments that will be used to start activity. See \nIntent arguments\n\n\ne.g. \n--esn \nEXTRA_KEY\n, \n--ez \nEXTRA_KEY\n \nEXTRA_BOOLEAN_VALUE\n, etc.\n\n\n\n\n\n\ndontStopAppOnReset\n\n\nDoesn't stop the process of the app under test, before starting the app using adb. If the app under test is created by another anchor app, setting this false, allows the process of the anchor app to be still alive, during the start of the test app using adb. In other words, with \ndontStopAppOnReset\n set to \ntrue\n, we will not include the \n-S\n flag in the \nadb shell am start\n call. With this capability omitted or set to \nfalse\n, we include the \n-S\n flag. Default \nfalse\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\nunicodeKeyboard\n\n\nEnable Unicode input, default \nfalse\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\nresetKeyboard\n\n\nReset keyboard to its original state, after running Unicode tests with \nunicodeKeyboard\n capability. Ignored if used alone. Default \nfalse\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\nnoSign\n\n\nSkip checking and signing of app with debug keys, will work only with UiAutomator and not with selendroid, default \nfalse\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\nignoreUnimportantViews\n\n\nCalls the \nsetCompressedLayoutHierarchy()\n uiautomator function. This capability can speed up test execution, since Accessibility commands will run faster ignoring some elements. The ignored elements will not be findable, which is why this capability has also been implemented as a toggle-able \nsetting\n as well as a capability. Defaults to \nfalse\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\ndisableAndroidWatchers\n\n\nDisables android watchers that watch for application not responding and application crash, this will reduce cpu usage on android device/emulator. This capability will work only with UiAutomator and not with selendroid, default \nfalse\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\nchromeOptions\n\n\nAllows passing chromeOptions capability for ChromeDriver. For more information see \nchromeOptions\n\n\nchromeOptions: {args: ['--disable-popup-blocking']}\n\n\n\n\n\n\nrecreateChromeDriverSessions\n\n\nKill ChromeDriver session when moving to a non-ChromeDriver webview. Defaults to \nfalse\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\nnativeWebScreenshot\n\n\nIn a web context, use native (adb) method for taking a screenshot, rather than proxying to ChromeDriver. Defaults to \nfalse\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\nandroidScreenshotPath\n\n\nThe name of the directory on the device in which the screenshot will be put. Defaults to \n/data/local/tmp\n\n\ne.g. \n/sdcard/screenshots/\n\n\n\n\n\n\nautoGrantPermissions\n\n\nHave Appium automatically determine which permissions your app requires and grant them to the app on install. Defaults to \nfalse\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\n\n\niOS Only\n\n\n\n\n\n\n\n\n\n\nCapability\n\n\nDescription\n\n\nValues\n\n\n\n\n\n\n\n\n\n\ncalendarFormat\n\n\n(Sim-only) Calendar format to set for the iOS Simulator\n\n\ne.g. \ngregorian\n\n\n\n\n\n\nbundleId\n\n\nBundle ID of the app under test. Useful for starting an app on a real device or for using other caps which require the bundle ID during test startup. To run a test on a real device using the bundle ID, you may omit the 'app' capability, but you must provide 'udid'.\n\n\ne.g. \nio.appium.TestApp\n\n\n\n\n\n\nudid\n\n\nUnique device identifier of the connected physical device\n\n\ne.g. \n1ae203187fc012g\n\n\n\n\n\n\nlaunchTimeout\n\n\nAmount of time in ms to wait for instruments before assuming it hung and failing the session\n\n\ne.g. \n20000\n\n\n\n\n\n\nlocationServicesEnabled\n\n\n(Sim-only) Force location services to be either on or off. Default is to keep current sim setting.\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\nlocationServicesAuthorized\n\n\n(Sim-only) Set location services to be authorized or not authorized for app via plist, so that location services alert doesn't pop up. Default is to keep current sim setting. Note that if you use this setting you MUST also use the \nbundleId\n capability to send in your app's bundle ID.\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\nautoAcceptAlerts\n\n\nAccept all iOS alerts automatically if they pop up. This includes privacy access permission alerts (e.g., location, contacts, photos). Default is false. Does not work on \nXCUITest\n-based tests.\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\nautoDismissAlerts\n\n\nDismiss all iOS alerts automatically if they pop up. This includes privacy access permission alerts (e.g., location, contacts, photos). Default is false. Does not work on \nXCUITest\n-based tests.\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\nnativeInstrumentsLib\n\n\nUse native intruments lib (ie disable instruments-without-delay).\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\nnativeWebTap\n\n\n(Sim-only) Enable \"real\", non-javascript-based web taps in Safari. Default: \nfalse\n. Warning: depending on viewport size/ratio this might not accurately tap an element\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\nsafariInitialUrl\n\n\n(Sim-only) (\n= 8.1) Initial safari url, default is a local welcome page\n\n\ne.g. \nhttps://www.github.com\n\n\n\n\n\n\nsafariAllowPopups\n\n\n(Sim-only) Allow javascript to open new windows in Safari. Default keeps current sim setting\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\nsafariIgnoreFraudWarning\n\n\n(Sim-only) Prevent Safari from showing a fraudulent website warning. Default keeps current sim setting.\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\nsafariOpenLinksInBackground\n\n\n(Sim-only) Whether Safari should allow links to open in new windows. Default keeps current sim setting.\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\nkeepKeyChains\n\n\n(Sim-only) Whether to keep keychains (Library/Keychains) when appium session is started/finished\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\nlocalizableStringsDir\n\n\nWhere to look for localizable strings. Default \nen.lproj\n\n\nen.lproj\n\n\n\n\n\n\nprocessArguments\n\n\nArguments to pass to the AUT using instruments\n\n\ne.g., \n-myflag\n\n\n\n\n\n\ninterKeyDelay\n\n\nThe delay, in ms, between keystrokes sent to an element when typing.\n\n\ne.g., \n100\n\n\n\n\n\n\nshowIOSLog\n\n\nWhether to show any logs captured from a device in the appium logs. Default \nfalse\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\nsendKeyStrategy\n\n\nstrategy to use to type test into a test field. Simulator default: \noneByOne\n. Real device default: \ngrouped\n\n\noneByOne\n, \ngrouped\n or \nsetValue\n\n\n\n\n\n\nscreenshotWaitTimeout\n\n\nMax timeout in sec to wait for a screenshot to be generated. default: 10\n\n\ne.g., \n5\n\n\n\n\n\n\nwaitForAppScript\n\n\nThe ios automation script used to determined if the app has been launched, by default the system wait for the page source not to be empty. The result must be a boolean\n\n\ne.g. \ntrue;\n, \ntarget.elements().length \n 0;\n, \n$.delay(5000); true;\n\n\n\n\n\n\nwebviewConnectRetries\n\n\nNumber of times to send connection message to remote debugger, to get webview. Default: \n8\n\n\ne.g., \n12\n\n\n\n\n\n\nappName\n\n\nThe display name of the application under test. Used to automate backgrounding the app in iOS 9+.\n\n\ne.g., \nUICatalog\n\n\n\n\n\n\ncustomSSLCert\n\n\n(Sim/Emu-only) Add an SSL certificate to simulator.\n\n\ne.g. \n-----BEGIN CERTIFICATE-----MIIFWjCCBEKg...\n-----END CERTIFICATE-----\n\n\n\n\n\n\nwebkitResponseTimeout\n\n\n(Real device only) Set the time, in ms, to wait for a response from WebKit in a Safari session. Defaults to \n5000\n\n\ne.g., \n10000\n\n\n\n\n\n\n\n\niOS Only, using XCUITest\n\n\n(For XCUITest-specific capabilities, please refer to the documentation on the \nXCUITest driver\n itself.)\n\n\nYou.i Engine Only\n\n\n\n\n(For You.i Engine-specific capabilities, please refer to the documentation on the \nYou.i Engine driver\n itself.)\n\n\nWinAppDriver Only\n\n\n\n\n\n\n\n\n\n\nCapability\n\n\nDescription\n\n\nValues\n\n\n\n\n\n\n\n\n\n\nplatformName\n\n\nWhich platform the test is being done on\n\n\ne.g. \nWindows\n\n\n\n\n\n\ndeviceName\n\n\nThe name of the device being tested on\n\n\ne.g. \nWindowsPC\n\n\n\n\n\n\napp\n\n\nappID of the windows app for testing or the path to the .exe file. See \nthis page\n for details on how to find the appID\n\n\ne.g. \nc24c8163-548e-4b84-a466-530178fc0580_scyf5npe3hv32!App", 
            "title": "Caps"
        }, 
        {
            "location": "/writing-and-running/caps/#appium-server-capabilities", 
            "text": "Capability  Description  Values      automationName  Which automation engine to use  Appium  (default) or  Selendroid    platformName  Which mobile OS platform to use  iOS ,  Android , or  FirefoxOS    platformVersion  Mobile OS version  e.g.,  7.1 ,  4.4    deviceName  The kind of mobile device or emulator to use  iPhone Simulator ,  iPad Simulator ,  iPhone Retina 4-inch ,  Android Emulator ,  Galaxy S4 , etc.... On iOS, this should be one of the valid devices returned by instruments with  instruments -s devices . On Android this capability is currently ignored, though it remains required.    app  The absolute local path  or  remote http URL to an  .ipa  or  .apk  file, or a  .zip  containing one of these. Appium will attempt to install this app binary on the appropriate device first. Note that this capability is not required for Android if you specify  appPackage  and  appActivity  capabilities (see below). Incompatible with  browserName .  /abs/path/to/my.apk  or  http://myapp.com/app.ipa    browserName  Name of mobile web browser to automate. Should be an empty string if automating an app instead.  'Safari' for iOS and 'Chrome', 'Chromium', or 'Browser' for Android    newCommandTimeout  How long (in seconds) Appium will wait for a new command from the client before assuming the client quit and ending the session  e.g.  60    language  (Sim/Emu-only) Language to set for the simulator / emulator  e.g.  fr    locale  (Sim/Emu-only) Locale to set for the simulator / emulator  e.g.  fr_CA    udid  Unique device identifier of the connected physical device  e.g.  1ae203187fc012g    orientation  (Sim/Emu-only) start in a certain orientation  LANDSCAPE  or  PORTRAIT    autoWebview  Move directly into Webview context. Default  false  true ,  false    noReset  Don't reset app state before this session. See  here  for more details  true ,  false    fullReset  Perform a complete reset. See  here  for more details  true ,  false    eventTimings  Enable or disable the reporting of the timings for various Appium-internal events (e.g., the start and end of each command, etc.). Defaults to  false . To enable, use  true . The timings are then reported as  events  property on response to querying the current session. See the  event timing docs  for the the structure of this response.  e.g.,  true    enablePerformanceLogging  (Web and webview only) Enable Chromedriver's (on Android) or Safari's (on iOS) performance logging (default  false )  true ,  false", 
            "title": "Appium server capabilities"
        }, 
        {
            "location": "/writing-and-running/caps/#android-only", 
            "text": "Capability  Description  Values      appActivity  Activity name for the Android activity you want to launch from your package. This often needs to be preceded by a  .  (e.g.,  .MainActivity  instead of  MainActivity )  MainActivity ,  .Settings    appPackage  Java package of the Android app you want to run  com.example.android.myApp ,  com.android.settings    appWaitActivity  Activity name/names, comma separated, for the Android activity you want to wait for  SplashActivity ,  SplashActivity,OtherActivity ,  * ,  *.SplashActivity    appWaitPackage  Java package of the Android app you want to wait for  com.example.android.myApp ,  com.android.settings    appWaitDuration  Timeout in milliseconds used to wait for the appWaitActivity to launch (default  20000 )  30000    deviceReadyTimeout  Timeout in seconds while waiting for device to become ready  5    androidCoverage  Fully qualified instrumentation class. Passed to -w in adb shell am instrument -e coverage true -w  com.my.Pkg/com.my.Pkg.instrumentation.MyInstrumentation    androidDeviceReadyTimeout  Timeout in seconds used to wait for a device to become ready after booting  e.g.,  30    androidInstallTimeout  Timeout in milliseconds used to wait for an apk to install to the device. Defaults to  90000  e.g.,  90000    androidInstallPath  The name of the directory on the device in which the apk will be push before install. Defaults to  /data/local/tmp  e.g.  /sdcard/Downloads/    adbPort  Port used to connect to the ADB server (default  5037 )  5037    remoteAdbHost  Optional remote ADB server host  e.g.: 192.168.0.101    androidDeviceSocket  Devtools socket name. Needed only when tested app is a Chromium embedding browser. The socket is open by the browser and Chromedriver connects to it as a devtools client.  e.g.,  chrome_devtools_remote    avd  Name of avd to launch  e.g.,  api19    avdLaunchTimeout  How long to wait in milliseconds for an avd to launch and connect to ADB (default  120000 )  300000    avdReadyTimeout  How long to wait in milliseconds for an avd to finish its boot animations (default  120000 )  300000    avdArgs  Additional emulator arguments used when launching an avd  e.g.,  -netfast    useKeystore  Use a custom keystore to sign apks, default  false  true  or  false    keystorePath  Path to custom keystore, default ~/.android/debug.keystore  e.g.,  /path/to.keystore    keystorePassword  Password for custom keystore  e.g.,  foo    keyAlias  Alias for key  e.g.,  androiddebugkey    keyPassword  Password for key  e.g.,  foo    chromedriverExecutable  The absolute local path to webdriver executable (if Chromium embedder provides its own webdriver, it should be used instead of original chromedriver bundled with Appium)  /abs/path/to/webdriver    autoWebviewTimeout  Amount of time to wait for Webview context to become active, in ms. Defaults to  2000  e.g.  4    intentAction  Intent action which will be used to start activity (default  android.intent.action.MAIN )  e.g. android.intent.action.MAIN ,  android.intent.action.VIEW    intentCategory  Intent category which will be used to start activity (default  android.intent.category.LAUNCHER )  e.g.  android.intent.category.LAUNCHER ,  android.intent.category.APP_CONTACTS    intentFlags  Flags that will be used to start activity (default  0x10200000 )  e.g.  0x10200000    optionalIntentArguments  Additional intent arguments that will be used to start activity. See  Intent arguments  e.g.  --esn  EXTRA_KEY ,  --ez  EXTRA_KEY   EXTRA_BOOLEAN_VALUE , etc.    dontStopAppOnReset  Doesn't stop the process of the app under test, before starting the app using adb. If the app under test is created by another anchor app, setting this false, allows the process of the anchor app to be still alive, during the start of the test app using adb. In other words, with  dontStopAppOnReset  set to  true , we will not include the  -S  flag in the  adb shell am start  call. With this capability omitted or set to  false , we include the  -S  flag. Default  false  true  or  false    unicodeKeyboard  Enable Unicode input, default  false  true  or  false    resetKeyboard  Reset keyboard to its original state, after running Unicode tests with  unicodeKeyboard  capability. Ignored if used alone. Default  false  true  or  false    noSign  Skip checking and signing of app with debug keys, will work only with UiAutomator and not with selendroid, default  false  true  or  false    ignoreUnimportantViews  Calls the  setCompressedLayoutHierarchy()  uiautomator function. This capability can speed up test execution, since Accessibility commands will run faster ignoring some elements. The ignored elements will not be findable, which is why this capability has also been implemented as a toggle-able  setting  as well as a capability. Defaults to  false  true  or  false    disableAndroidWatchers  Disables android watchers that watch for application not responding and application crash, this will reduce cpu usage on android device/emulator. This capability will work only with UiAutomator and not with selendroid, default  false  true  or  false    chromeOptions  Allows passing chromeOptions capability for ChromeDriver. For more information see  chromeOptions  chromeOptions: {args: ['--disable-popup-blocking']}    recreateChromeDriverSessions  Kill ChromeDriver session when moving to a non-ChromeDriver webview. Defaults to  false  true  or  false    nativeWebScreenshot  In a web context, use native (adb) method for taking a screenshot, rather than proxying to ChromeDriver. Defaults to  false  true  or  false    androidScreenshotPath  The name of the directory on the device in which the screenshot will be put. Defaults to  /data/local/tmp  e.g.  /sdcard/screenshots/    autoGrantPermissions  Have Appium automatically determine which permissions your app requires and grant them to the app on install. Defaults to  false  true  or  false", 
            "title": "Android Only"
        }, 
        {
            "location": "/writing-and-running/caps/#ios-only", 
            "text": "Capability  Description  Values      calendarFormat  (Sim-only) Calendar format to set for the iOS Simulator  e.g.  gregorian    bundleId  Bundle ID of the app under test. Useful for starting an app on a real device or for using other caps which require the bundle ID during test startup. To run a test on a real device using the bundle ID, you may omit the 'app' capability, but you must provide 'udid'.  e.g.  io.appium.TestApp    udid  Unique device identifier of the connected physical device  e.g.  1ae203187fc012g    launchTimeout  Amount of time in ms to wait for instruments before assuming it hung and failing the session  e.g.  20000    locationServicesEnabled  (Sim-only) Force location services to be either on or off. Default is to keep current sim setting.  true  or  false    locationServicesAuthorized  (Sim-only) Set location services to be authorized or not authorized for app via plist, so that location services alert doesn't pop up. Default is to keep current sim setting. Note that if you use this setting you MUST also use the  bundleId  capability to send in your app's bundle ID.  true  or  false    autoAcceptAlerts  Accept all iOS alerts automatically if they pop up. This includes privacy access permission alerts (e.g., location, contacts, photos). Default is false. Does not work on  XCUITest -based tests.  true  or  false    autoDismissAlerts  Dismiss all iOS alerts automatically if they pop up. This includes privacy access permission alerts (e.g., location, contacts, photos). Default is false. Does not work on  XCUITest -based tests.  true  or  false    nativeInstrumentsLib  Use native intruments lib (ie disable instruments-without-delay).  true  or  false    nativeWebTap  (Sim-only) Enable \"real\", non-javascript-based web taps in Safari. Default:  false . Warning: depending on viewport size/ratio this might not accurately tap an element  true  or  false    safariInitialUrl  (Sim-only) ( = 8.1) Initial safari url, default is a local welcome page  e.g.  https://www.github.com    safariAllowPopups  (Sim-only) Allow javascript to open new windows in Safari. Default keeps current sim setting  true  or  false    safariIgnoreFraudWarning  (Sim-only) Prevent Safari from showing a fraudulent website warning. Default keeps current sim setting.  true  or  false    safariOpenLinksInBackground  (Sim-only) Whether Safari should allow links to open in new windows. Default keeps current sim setting.  true  or  false    keepKeyChains  (Sim-only) Whether to keep keychains (Library/Keychains) when appium session is started/finished  true  or  false    localizableStringsDir  Where to look for localizable strings. Default  en.lproj  en.lproj    processArguments  Arguments to pass to the AUT using instruments  e.g.,  -myflag    interKeyDelay  The delay, in ms, between keystrokes sent to an element when typing.  e.g.,  100    showIOSLog  Whether to show any logs captured from a device in the appium logs. Default  false  true  or  false    sendKeyStrategy  strategy to use to type test into a test field. Simulator default:  oneByOne . Real device default:  grouped  oneByOne ,  grouped  or  setValue    screenshotWaitTimeout  Max timeout in sec to wait for a screenshot to be generated. default: 10  e.g.,  5    waitForAppScript  The ios automation script used to determined if the app has been launched, by default the system wait for the page source not to be empty. The result must be a boolean  e.g.  true; ,  target.elements().length   0; ,  $.delay(5000); true;    webviewConnectRetries  Number of times to send connection message to remote debugger, to get webview. Default:  8  e.g.,  12    appName  The display name of the application under test. Used to automate backgrounding the app in iOS 9+.  e.g.,  UICatalog    customSSLCert  (Sim/Emu-only) Add an SSL certificate to simulator.  e.g.  -----BEGIN CERTIFICATE-----MIIFWjCCBEKg... -----END CERTIFICATE-----    webkitResponseTimeout  (Real device only) Set the time, in ms, to wait for a response from WebKit in a Safari session. Defaults to  5000  e.g.,  10000", 
            "title": "iOS Only"
        }, 
        {
            "location": "/writing-and-running/caps/#ios-only-using-xcuitest", 
            "text": "(For XCUITest-specific capabilities, please refer to the documentation on the  XCUITest driver  itself.)", 
            "title": "iOS Only, using XCUITest"
        }, 
        {
            "location": "/writing-and-running/caps/#youi-engine-only", 
            "text": "(For You.i Engine-specific capabilities, please refer to the documentation on the  You.i Engine driver  itself.)", 
            "title": "You.i Engine Only"
        }, 
        {
            "location": "/writing-and-running/caps/#winappdriver-only", 
            "text": "Capability  Description  Values      platformName  Which platform the test is being done on  e.g.  Windows    deviceName  The name of the device being tested on  e.g.  WindowsPC    app  appID of the windows app for testing or the path to the .exe file. See  this page  for details on how to find the appID  e.g.  c24c8163-548e-4b84-a466-530178fc0580_scyf5npe3hv32!App", 
            "title": "WinAppDriver Only"
        }, 
        {
            "location": "/writing-and-running/default-capabilities-arg/", 
            "text": "The --default-capabilities flag\n\n\nAppium 1.5 does away with most CLI flags that existed previously; the remainder can be converted into JSON and made part of the \n--default-capabilities\n flag. For example:\n\n\n# raw JSON as an argument\n--default-capabilities '{\napp\n: \nmyapp.app\n, \ndeviceName\n: \niPhone Simulator\n}'\n# or the name of a JSON file\n--default-capabilities /path/to/file.json\n\n\n\n\nWindows users\n will need to escape the quotes in JSON passed on the command line: \n--default-capabilities \"{\\\"app\\\": \\\"myapp.app\\\"}\"\n\n\n\n\n\n\n\n\nFlag\n\n\nJSON key\n\n\n\n\n\n\n\n\n\n\n--keep-artifacts\n\n\nkeepArtifacts\n\n\n\n\n\n\n--platform-name\n\n\nplatformName\n\n\n\n\n\n\n--platform-version\n\n\nplatformVersion\n\n\n\n\n\n\n--automation-name\n\n\nautomationName\n\n\n\n\n\n\n--device-name\n\n\ndeviceName\n\n\n\n\n\n\n--browser-name\n\n\nbrowserName\n\n\n\n\n\n\n--app\n\n\napp\n\n\n\n\n\n\n--launch-timeout\n\n\nlaunchTimeout\n\n\n\n\n\n\n--language\n\n\nlanguage\n\n\n\n\n\n\n--locale\n\n\nlocale\n\n\n\n\n\n\n--udid\n\n\nudid\n\n\n\n\n\n\n--orientation\n\n\norientation\n\n\n\n\n\n\n--no-reset\n\n\nnoReset\n\n\n\n\n\n\n--full-reset\n\n\nfullReset\n\n\n\n\n\n\n--app-pkg\n\n\nappPackage\n\n\n\n\n\n\n--app-activity\n\n\nappActivity\n\n\n\n\n\n\n--app-wait-package\n\n\nappWaitPackage\n\n\n\n\n\n\n--app-wait-activity\n\n\nappWaitActivity\n\n\n\n\n\n\n--device-ready-timeout\n\n\ndeviceReadyTimeout\n\n\n\n\n\n\n--android-coverage\n\n\nandroidCoverage\n\n\n\n\n\n\n--avd\n\n\navd\n\n\n\n\n\n\n--avd-args\n\n\navdArgs\n\n\n\n\n\n\n--use-keystore\n\n\nuseKeystore\n\n\n\n\n\n\n--keystore-path\n\n\nkeystorePath\n\n\n\n\n\n\n--keystore-password\n\n\nkeystorePassword\n\n\n\n\n\n\n--key-alias\n\n\nkeyAlias\n\n\n\n\n\n\n--key-password\n\n\nkeyPassword\n\n\n\n\n\n\n--intent-action\n\n\nintentAction\n\n\n\n\n\n\n--intent-category\n\n\nintentCategory\n\n\n\n\n\n\n--intent-flags\n\n\nintentFlags\n\n\n\n\n\n\n--intent-args\n\n\noptionalIntentArguments\n\n\n\n\n\n\n--dont-stop-app-on-reset\n\n\ndontStopAppOnReset\n\n\n\n\n\n\n--calendar-format\n\n\ncalendarFormat\n\n\n\n\n\n\n--native-instruments-lib\n\n\nnativeInstrumentsLib\n\n\n\n\n\n\n--keep-keychains\n\n\nkeepKeyChains\n\n\n\n\n\n\n--localizable-strings-dir\n\n\nlocalizableStringsDir\n\n\n\n\n\n\n--show-ios-log\n\n\nshowIOSLog\n\n\n\n\n\n\n--reboot\n\n\nreboot", 
            "title": "Default capabilities arg"
        }, 
        {
            "location": "/writing-and-running/default-capabilities-arg/#the-default-capabilities-flag", 
            "text": "Appium 1.5 does away with most CLI flags that existed previously; the remainder can be converted into JSON and made part of the  --default-capabilities  flag. For example:  # raw JSON as an argument\n--default-capabilities '{ app :  myapp.app ,  deviceName :  iPhone Simulator }'\n# or the name of a JSON file\n--default-capabilities /path/to/file.json  Windows users  will need to escape the quotes in JSON passed on the command line:  --default-capabilities \"{\\\"app\\\": \\\"myapp.app\\\"}\"     Flag  JSON key      --keep-artifacts  keepArtifacts    --platform-name  platformName    --platform-version  platformVersion    --automation-name  automationName    --device-name  deviceName    --browser-name  browserName    --app  app    --launch-timeout  launchTimeout    --language  language    --locale  locale    --udid  udid    --orientation  orientation    --no-reset  noReset    --full-reset  fullReset    --app-pkg  appPackage    --app-activity  appActivity    --app-wait-package  appWaitPackage    --app-wait-activity  appWaitActivity    --device-ready-timeout  deviceReadyTimeout    --android-coverage  androidCoverage    --avd  avd    --avd-args  avdArgs    --use-keystore  useKeystore    --keystore-path  keystorePath    --keystore-password  keystorePassword    --key-alias  keyAlias    --key-password  keyPassword    --intent-action  intentAction    --intent-category  intentCategory    --intent-flags  intentFlags    --intent-args  optionalIntentArguments    --dont-stop-app-on-reset  dontStopAppOnReset    --calendar-format  calendarFormat    --native-instruments-lib  nativeInstrumentsLib    --keep-keychains  keepKeyChains    --localizable-strings-dir  localizableStringsDir    --show-ios-log  showIOSLog    --reboot  reboot", 
            "title": "The --default-capabilities flag"
        }, 
        {
            "location": "/writing-and-running/espresso/", 
            "text": "Espresso\n\n\nTo run the appium espresso driver, set the \nautomationName\n in desired capabilities to 'espresso'. Espresso driver is used the same way that UIAutomator is used. (Warning: Appium Espresso driver is currently in early beta and meant only for experimental usage. Its API is not yet complete or guaranteed to work. Please report bugs to the Appium team on GitHub).", 
            "title": "Espresso"
        }, 
        {
            "location": "/writing-and-running/espresso/#espresso", 
            "text": "To run the appium espresso driver, set the  automationName  in desired capabilities to 'espresso'. Espresso driver is used the same way that UIAutomator is used. (Warning: Appium Espresso driver is currently in early beta and meant only for experimental usage. Its API is not yet complete or guaranteed to work. Please report bugs to the Appium team on GitHub).", 
            "title": "Espresso"
        }, 
        {
            "location": "/writing-and-running/finding-elements/", 
            "text": "Finding and interacting with elements\n\n\nAppium supports a subset of the WebDriver locator strategies:\n\n\n\n\nfind by \"class\" (i.e., ui component type)\n\n\nfind by \"xpath\" (i.e., an abstract representation of a path to an element,\nwith certain constraints)\n\n\n\n\nAppium additionally supports some of the \nMobile JSON Wire Protocol\n locator strategies\n\n\n\n\n-ios uiautomation\n: a string corresponding to a recursive element search\nusing the \nUIAutomation library\n (iOS 9.3 and below only)\n\n\n-android uiautomator\n: a string corresponding to a recursive element\nsearch using the \nUiAutomator Api\n (Android-only)\n\n\naccessibility id\n: a string corresponding to a recursive element search\nusing the Id/Name that the native Accessibility options utilize.\n\n\n\n\nIssues\n\n\nThere's a known issue with table cell elements becoming invalidated before\nthere's time to interact with them. We're working on a fix\n\n\nUsing Appium Desktop To Locate Elements\n\n\nAppium provides you with a neat tool that allows you to find the the elements\nyou're looking for. With \nAppium Desktop\n you \ncan find any element and its locators by either clicking the element on the screenshot \nimage, or locating it in the source tree.\n\n\nOverview\n\n\nAppium Desktop has a simple layout, complete with a source tree,\na screenshot, and record and refresh buttons, and interaction tools.\n\n\n\n\nExample\n\n\nAfter launching Appium Desktop and starting a session, you can locate any element in the\nsource. In this test, I'm looking for the accessibility id of the \"Compute Sum\" button.\n\n\nTo find the accessibility id of this button, I click the \"Compute Sum\" button in the\nscreenshot. The element is then highlighted in the source tree. In the panel on the right,\nI can see the accessibility id.", 
            "title": "Finding elements"
        }, 
        {
            "location": "/writing-and-running/finding-elements/#finding-and-interacting-with-elements", 
            "text": "Appium supports a subset of the WebDriver locator strategies:   find by \"class\" (i.e., ui component type)  find by \"xpath\" (i.e., an abstract representation of a path to an element,\nwith certain constraints)   Appium additionally supports some of the  Mobile JSON Wire Protocol  locator strategies   -ios uiautomation : a string corresponding to a recursive element search\nusing the  UIAutomation library  (iOS 9.3 and below only)  -android uiautomator : a string corresponding to a recursive element\nsearch using the  UiAutomator Api  (Android-only)  accessibility id : a string corresponding to a recursive element search\nusing the Id/Name that the native Accessibility options utilize.", 
            "title": "Finding and interacting with elements"
        }, 
        {
            "location": "/writing-and-running/finding-elements/#issues", 
            "text": "There's a known issue with table cell elements becoming invalidated before\nthere's time to interact with them. We're working on a fix", 
            "title": "Issues"
        }, 
        {
            "location": "/writing-and-running/finding-elements/#using-appium-desktop-to-locate-elements", 
            "text": "Appium provides you with a neat tool that allows you to find the the elements\nyou're looking for. With  Appium Desktop  you \ncan find any element and its locators by either clicking the element on the screenshot \nimage, or locating it in the source tree.", 
            "title": "Using Appium Desktop To Locate Elements"
        }, 
        {
            "location": "/writing-and-running/finding-elements/#overview", 
            "text": "Appium Desktop has a simple layout, complete with a source tree,\na screenshot, and record and refresh buttons, and interaction tools.", 
            "title": "Overview"
        }, 
        {
            "location": "/writing-and-running/finding-elements/#example", 
            "text": "After launching Appium Desktop and starting a session, you can locate any element in the\nsource. In this test, I'm looking for the accessibility id of the \"Compute Sum\" button.  To find the accessibility id of this button, I click the \"Compute Sum\" button in the\nscreenshot. The element is then highlighted in the source tree. In the panel on the right,\nI can see the accessibility id.", 
            "title": "Example"
        }, 
        {
            "location": "/writing-and-running/ios-xctest-mobile-gestures/", 
            "text": "Automating Mobile Gestures For iOS With WebDriverAgent/XCTest Backend\n\n\nUnfortunately Apple's XCTest framework does not natively support W3C standards for\nTouchAction interface implementation. Although, it provides rich set of gestures,\ninluding these, that are unique for iOS platform. It is possible to directly invoke these\ngestures in Appium starting from version 1.6.4-beta.\n\n\nIt is important to rememeber that XCTest and WDA are being constantly changed.\nThis means all \"mobile: *\" commands can be also subject of change in Appium\nwithout any preliminary notice.\n\n\nmobile: swipe\n\n\nThis gesture performs a simple \"swipe\" gesture on the particular screen element or\non the application element, which is usually the whole screen. This method does not\naccept coordnates and siply emulates single swipe with one finger. It might be\nuseful for such cases like album pagination, switching views, etc. More advanced\ncases may require to call \"mobile: dragFromToForDuration\", where one can supply\ncoordinates and duration.\n\n\nSupported arguments\n\n\n\n\ndirection\n: Either 'up', 'down', 'left' or 'right'. The parameter is mandatory\n\n\nelement\n: The internal element identifier (as hexadecimal hash string) to swipe on.\n Application element will be used instead if this parameter is not provided\n\n\n\n\nUsage examples\n\n\n// Java\nJavascriptExecutor js = (JavascriptExecutor) driver;\nMap\nString, Object\n params = new HashMap\n();\nscrollObject.put(\ndirection\n, \ndown\n);\nscrollObject.put(\nelement\n, ((RemoteWebElement) element).getId());\njs.executeScript(\nmobile: swipe\n, params);\n\n\n\n\nmobile: scroll\n\n\nScrolls the element or the whole screen. Different scrolling strategies are supported.\nArguments define the choosen strategy: either 'name', 'direction', 'predicateString' or\n'toVisible' in that order. All strategies are exclusive and only one strategy\ncan be applied at a single moment of time. Use \"mobile: scroll\" to emulate precise\nscrolling in tables or collection views, where it is already known to which element\nthe scrolling should be performed. Although, there is one known limitation there: in case\nit is necessary to perform too many scroll gestures on parent container to reach the\nnecessary child element (tens of them) then the method call may fail.\n\n\nSupported arguments\n\n\n\n\nelement\n: The internal element identifier (as hexadecimal hash string) to scroll on.\n Application element will be used if this argument is not set\n\n\nname\n: the accessibility id of the child element, to which scrolling is performed.\n The same result can be achieved by setting \npredicateString\n argument to\n 'name == accessibilityId'. Has no effect if \nelement\n is not a container\n\n\ndirection\n: Either 'up', 'down', 'left' or 'right'. The main difference from\n \nswipe\n call with the same argument is that \nscroll\n will try to move the current viewport\n exactly to the next/previous page (the term \"page\" means the content, which fits into\n a single device screen)\n\n\npredicateString\n: the NSPredicate locator of the child element, to which\n the scrolling should be performed. Has no effect if \nelement\n is not a container\n\n\ntoVisible\n: Boolean parameter. If set to \ntrue\n then asks to scroll to\n the first visible \nelement\n in the parent container. Has no effect if \nelement\n is\n not set\n\n\n\n\nUsage examples\n\n\n# Python\ndriver.execute_script('mobile: scroll', {'direction': 'down'});\n\n\n\n\nmobile: pinch\n\n\nPerforms pinch gesture on the given element or on the application element.\n\n\nSupported arguments\n\n\n\n\nelement\n: The internal element identifier (as hexadecimal hash string) to pinch on.\n Application element will be used instead if this parameter is not provided\n\n\nscale\n: Pinch scale of type float. Use a scale between 0 and 1 to \"pinch close\" or\n zoom out and a scale greater than 1 to \"pinch open\" or zoom in. Mandatory parameter\n\n\nvelocity\n: The velocity of the pinch in scale factor per second (float value). Mandatory parameter\n\n\n\n\nUsage examples\n\n\n# Ruby\nexecute_script 'mobile: pinch', scale: 0.5, velocity: 1.1, element: element.ref\n\n\n\n\nmobile: doubleTap\n\n\nPerforms double tap gesture on the given element or on the screen.\n\n\nSupported arguments\n\n\n\n\nelement\n: The internal element identifier (as hexadecimal hash string) to double tap on\n\n\nx\n: Screen x tap coordinate of type float. Mandatory parameter only if \nelement\n is not set\n\n\ny\n: Screen y tap coordinate of type float. Mandatory parameter only if \nelement\n is not set\n\n\n\n\nUsage examples\n\n\n// javascript\ndriver.execute('mobile: doubleTap', {element: element.value.ELEMENT});\n\n\n\n\nmobile: touchAndHold\n\n\nPerforms long press gesture on the given element or on the screen.\n\n\nSupported arguments\n\n\n\n\nelement\n: The internal element identifier (as hexadecimal hash string) to long tap on\n\n\nduration\n: The float duration of press action in seconds. Mandatory patameter\n\n\nx\n: Screen x long tap coordinate of type float. Mandatory parameter only if \nelement\n is not set\n\n\ny\n: Screen y long tap coordinate of type float. Mandatory parameter only if \nelement\n is not set\n\n\n\n\nUsage examples\n\n\n// c#\nDictionary\nstring, object\n tfLongTap = new Dictionary\nstring, object\n();\ntfLongTap.Add(\nelement\n, element.Id);\ntfLongTap.Add(\nduration\n, 2.0);\n((IJavaScriptExecutor)driver).ExecuteScript(\nmobile: touchAndHold\n, tfLongTap);\n\n\n\n\nmobile: twoFingerTap\n\n\nPerforms two finger tap gesture on the given element or on the application element.\n\n\nSupported arguments\n\n\n\n\nelement\n: The internal element identifier (as hexadecimal hash string) to double tap on.\n Application element will be used instead if this\n parameter is not provided\n\n\n\n\nUsage examples\n\n\n// c#\nDictionary\nstring, object\n tfTap = new Dictionary\nstring, object\n();\ntfTap.Add(\nelement\n, element.Id);\n((IJavaScriptExecutor)driver).ExecuteScript(\nmobile: twoFingerTap\n, tfTap);\n\n\n\n\nmobile: tap\n\n\nPerforms tap gesture by coordinates on the given element or on the screen.\n\n\nSupported arguments\n\n\n\n\nelement\n: The internal element identifier (as hexadecimal hash string) to long tap on.\n \nx\n and \ny\n tap coordinates will be calulated relatively to the current element position on the\n screen if this argument is provided. Otherwise they should be calculated\n relatively to screen borders.\n\n\nx\n: x tap coordinate of type float. Mandatory parameter\n\n\ny\n: y tap coordinate of type float. Mandatory parameter\n\n\n\n\nUsage examples\n\n\n// PHP\n$params = array(array('x' =\n 100.0, 'y' =\n 50.0, 'element' =\n element.GetAttribute(\nid\n)));\n$driver-\nexecuteScript(\nmobile: tap\n, $params);\n\n\n\n\nmobile: dragFromToForDuration\n\n\nPerforms drag and drop gesture by coordinates. This can be done either on an element or\non the screen\n\n\nSupported arguments\n\n\n\n\nelement\n: The internal element identifier (as hexadecimal hash string) to perform drag on.\n All the coordinates will be calculated relatively this this element position on the screen.\n Absolute screen coordinates are expected if this argument is not set\n\n\nduration\n: Float number of seconds in range [0.5, 60]. How long the tap gesture at\n starting drag point should be before to start dragging. Mandatory parameter\n\n\nfromX\n: The x coordinate of starting drag point (type float). Mandatory parameter\n\n\nfromY\n: The y coordinate of starting drag point (type float). Mandatory parameter\n\n\ntoX\n: The x coordinate of ending drag point (type float). Mandatory parameter\n\n\ntoY\n: The y coordinate of ending drag point (type float). Mandatory parameter\n\n\n\n\nUsage examples\n\n\n// Java\nJavascriptExecutor js = (JavascriptExecutor) driver;\nMap\nString, Object\n params = new HashMap\n();\nparams.put(\nduration\n, 1.0);\nparams.put(\nfromX\n, 100);\nparams.put(\nfromY\n, 100);\nparams.put(\ntoX\n, 200);\nparams.put(\ntoY\n, 200);\nparams.put(\nelement\n, ((RemoteWebElement) element).getId());\njs.executeScript(\nmobile: dragFromToForDuration\n, params);\n\n\n\n\nmobile: selectPickerWheelValue\n\n\nPerforms selection of the next or previous picker wheel value. This might\nbe useful if these values are populated dynamically, so you don't know which\none to select or value selection does not work because of XCTest bug.\n\n\nSupported arguments\n\n\n\n\nelement\n: PickerWheel's internal element id (as hexadecimal hash string) to perform\n value selection on. The element must be of type XCUIElementTypePickerWheel. Mandatory parameter\n\n\norder\n: Either \nnext\n to select the value next to the current one\n from the target picker wheel or \nprevious\n to select the previous one. Mandatory parameter\n\n\noffset\n: The value in range [0.01, 0.5]. It defines how far from picker\n wheel's center the click should happen. The actual distance is culculated by\n multiplying this value to the actual picker wheel height. Too small offset value\n may not change the picker wheel value and too high value may cause the wheel to switch\n two or more values at once. Usually the optimal value is located in range [0.15, 0.3]. \n0.2\n by default\n\n\n\n\nUsage examples\n\n\n// Java\nJavascriptExecutor js = (JavascriptExecutor) driver;\nMap\nString, Object\n params = new HashMap\n();\nparams.put(\norder\n, \nnext\n);\nparams.put(\noffset\n, 0.15);\nparams.put(\nelement\n, ((RemoteWebElement) element).getId());\njs.executeScript(\nmobile: selectPickerWheelValue\n, params);\n\n\n\n\nmobile: alert\n\n\nPerforms operations on NSAlert instance.\n\n\nSupported arguments\n\n\n\n\naction\n: The following actions are supported: \naccept\n, \ndismiss\n and \ngetButtons\n.\n Mandatory parameter\n\n\nbuttonLabel\n: The label text of an existing alert button to click on. This is an\n optional parameter and is only valid in combination with \naccept\n and \ndismiss\n\n actions.\n\n\n\n\nUsage examples\n\n\n# Python\ndriver.execute_script('mobile: alert', {'action': 'accept', 'buttonLabel': 'My Cool Alert Button'});\n\n\n\n\nAdvanced Topics\n\n\nCheck \nWDA Element Commands API\n\nto get the information about the gestures implemented in Facebook WebDriverAgent.\nCheck Apple XCTest documentation on \nXCUIElement\n and\n\nXCUICoordinate\n methods list to get the information\nabout all gestures available there.", 
            "title": "Ios xctest mobile gestures"
        }, 
        {
            "location": "/writing-and-running/ios-xctest-mobile-gestures/#automating-mobile-gestures-for-ios-with-webdriveragentxctest-backend", 
            "text": "Unfortunately Apple's XCTest framework does not natively support W3C standards for\nTouchAction interface implementation. Although, it provides rich set of gestures,\ninluding these, that are unique for iOS platform. It is possible to directly invoke these\ngestures in Appium starting from version 1.6.4-beta.  It is important to rememeber that XCTest and WDA are being constantly changed.\nThis means all \"mobile: *\" commands can be also subject of change in Appium\nwithout any preliminary notice.", 
            "title": "Automating Mobile Gestures For iOS With WebDriverAgent/XCTest Backend"
        }, 
        {
            "location": "/writing-and-running/ios-xctest-mobile-gestures/#mobile-swipe", 
            "text": "This gesture performs a simple \"swipe\" gesture on the particular screen element or\non the application element, which is usually the whole screen. This method does not\naccept coordnates and siply emulates single swipe with one finger. It might be\nuseful for such cases like album pagination, switching views, etc. More advanced\ncases may require to call \"mobile: dragFromToForDuration\", where one can supply\ncoordinates and duration.", 
            "title": "mobile: swipe"
        }, 
        {
            "location": "/writing-and-running/ios-xctest-mobile-gestures/#supported-arguments", 
            "text": "direction : Either 'up', 'down', 'left' or 'right'. The parameter is mandatory  element : The internal element identifier (as hexadecimal hash string) to swipe on.\n Application element will be used instead if this parameter is not provided", 
            "title": "Supported arguments"
        }, 
        {
            "location": "/writing-and-running/ios-xctest-mobile-gestures/#usage-examples", 
            "text": "// Java\nJavascriptExecutor js = (JavascriptExecutor) driver;\nMap String, Object  params = new HashMap ();\nscrollObject.put( direction ,  down );\nscrollObject.put( element , ((RemoteWebElement) element).getId());\njs.executeScript( mobile: swipe , params);", 
            "title": "Usage examples"
        }, 
        {
            "location": "/writing-and-running/ios-xctest-mobile-gestures/#mobile-scroll", 
            "text": "Scrolls the element or the whole screen. Different scrolling strategies are supported.\nArguments define the choosen strategy: either 'name', 'direction', 'predicateString' or\n'toVisible' in that order. All strategies are exclusive and only one strategy\ncan be applied at a single moment of time. Use \"mobile: scroll\" to emulate precise\nscrolling in tables or collection views, where it is already known to which element\nthe scrolling should be performed. Although, there is one known limitation there: in case\nit is necessary to perform too many scroll gestures on parent container to reach the\nnecessary child element (tens of them) then the method call may fail.", 
            "title": "mobile: scroll"
        }, 
        {
            "location": "/writing-and-running/ios-xctest-mobile-gestures/#supported-arguments_1", 
            "text": "element : The internal element identifier (as hexadecimal hash string) to scroll on.\n Application element will be used if this argument is not set  name : the accessibility id of the child element, to which scrolling is performed.\n The same result can be achieved by setting  predicateString  argument to\n 'name == accessibilityId'. Has no effect if  element  is not a container  direction : Either 'up', 'down', 'left' or 'right'. The main difference from\n  swipe  call with the same argument is that  scroll  will try to move the current viewport\n exactly to the next/previous page (the term \"page\" means the content, which fits into\n a single device screen)  predicateString : the NSPredicate locator of the child element, to which\n the scrolling should be performed. Has no effect if  element  is not a container  toVisible : Boolean parameter. If set to  true  then asks to scroll to\n the first visible  element  in the parent container. Has no effect if  element  is\n not set", 
            "title": "Supported arguments"
        }, 
        {
            "location": "/writing-and-running/ios-xctest-mobile-gestures/#usage-examples_1", 
            "text": "# Python\ndriver.execute_script('mobile: scroll', {'direction': 'down'});", 
            "title": "Usage examples"
        }, 
        {
            "location": "/writing-and-running/ios-xctest-mobile-gestures/#mobile-pinch", 
            "text": "Performs pinch gesture on the given element or on the application element.", 
            "title": "mobile: pinch"
        }, 
        {
            "location": "/writing-and-running/ios-xctest-mobile-gestures/#supported-arguments_2", 
            "text": "element : The internal element identifier (as hexadecimal hash string) to pinch on.\n Application element will be used instead if this parameter is not provided  scale : Pinch scale of type float. Use a scale between 0 and 1 to \"pinch close\" or\n zoom out and a scale greater than 1 to \"pinch open\" or zoom in. Mandatory parameter  velocity : The velocity of the pinch in scale factor per second (float value). Mandatory parameter", 
            "title": "Supported arguments"
        }, 
        {
            "location": "/writing-and-running/ios-xctest-mobile-gestures/#usage-examples_2", 
            "text": "# Ruby\nexecute_script 'mobile: pinch', scale: 0.5, velocity: 1.1, element: element.ref", 
            "title": "Usage examples"
        }, 
        {
            "location": "/writing-and-running/ios-xctest-mobile-gestures/#mobile-doubletap", 
            "text": "Performs double tap gesture on the given element or on the screen.", 
            "title": "mobile: doubleTap"
        }, 
        {
            "location": "/writing-and-running/ios-xctest-mobile-gestures/#supported-arguments_3", 
            "text": "element : The internal element identifier (as hexadecimal hash string) to double tap on  x : Screen x tap coordinate of type float. Mandatory parameter only if  element  is not set  y : Screen y tap coordinate of type float. Mandatory parameter only if  element  is not set", 
            "title": "Supported arguments"
        }, 
        {
            "location": "/writing-and-running/ios-xctest-mobile-gestures/#usage-examples_3", 
            "text": "// javascript\ndriver.execute('mobile: doubleTap', {element: element.value.ELEMENT});", 
            "title": "Usage examples"
        }, 
        {
            "location": "/writing-and-running/ios-xctest-mobile-gestures/#mobile-touchandhold", 
            "text": "Performs long press gesture on the given element or on the screen.", 
            "title": "mobile: touchAndHold"
        }, 
        {
            "location": "/writing-and-running/ios-xctest-mobile-gestures/#supported-arguments_4", 
            "text": "element : The internal element identifier (as hexadecimal hash string) to long tap on  duration : The float duration of press action in seconds. Mandatory patameter  x : Screen x long tap coordinate of type float. Mandatory parameter only if  element  is not set  y : Screen y long tap coordinate of type float. Mandatory parameter only if  element  is not set", 
            "title": "Supported arguments"
        }, 
        {
            "location": "/writing-and-running/ios-xctest-mobile-gestures/#usage-examples_4", 
            "text": "// c#\nDictionary string, object  tfLongTap = new Dictionary string, object ();\ntfLongTap.Add( element , element.Id);\ntfLongTap.Add( duration , 2.0);\n((IJavaScriptExecutor)driver).ExecuteScript( mobile: touchAndHold , tfLongTap);", 
            "title": "Usage examples"
        }, 
        {
            "location": "/writing-and-running/ios-xctest-mobile-gestures/#mobile-twofingertap", 
            "text": "Performs two finger tap gesture on the given element or on the application element.", 
            "title": "mobile: twoFingerTap"
        }, 
        {
            "location": "/writing-and-running/ios-xctest-mobile-gestures/#supported-arguments_5", 
            "text": "element : The internal element identifier (as hexadecimal hash string) to double tap on.\n Application element will be used instead if this\n parameter is not provided", 
            "title": "Supported arguments"
        }, 
        {
            "location": "/writing-and-running/ios-xctest-mobile-gestures/#usage-examples_5", 
            "text": "// c#\nDictionary string, object  tfTap = new Dictionary string, object ();\ntfTap.Add( element , element.Id);\n((IJavaScriptExecutor)driver).ExecuteScript( mobile: twoFingerTap , tfTap);", 
            "title": "Usage examples"
        }, 
        {
            "location": "/writing-and-running/ios-xctest-mobile-gestures/#mobile-tap", 
            "text": "Performs tap gesture by coordinates on the given element or on the screen.", 
            "title": "mobile: tap"
        }, 
        {
            "location": "/writing-and-running/ios-xctest-mobile-gestures/#supported-arguments_6", 
            "text": "element : The internal element identifier (as hexadecimal hash string) to long tap on.\n  x  and  y  tap coordinates will be calulated relatively to the current element position on the\n screen if this argument is provided. Otherwise they should be calculated\n relatively to screen borders.  x : x tap coordinate of type float. Mandatory parameter  y : y tap coordinate of type float. Mandatory parameter", 
            "title": "Supported arguments"
        }, 
        {
            "location": "/writing-and-running/ios-xctest-mobile-gestures/#usage-examples_6", 
            "text": "// PHP\n$params = array(array('x' =  100.0, 'y' =  50.0, 'element' =  element.GetAttribute( id )));\n$driver- executeScript( mobile: tap , $params);", 
            "title": "Usage examples"
        }, 
        {
            "location": "/writing-and-running/ios-xctest-mobile-gestures/#mobile-dragfromtoforduration", 
            "text": "Performs drag and drop gesture by coordinates. This can be done either on an element or\non the screen", 
            "title": "mobile: dragFromToForDuration"
        }, 
        {
            "location": "/writing-and-running/ios-xctest-mobile-gestures/#supported-arguments_7", 
            "text": "element : The internal element identifier (as hexadecimal hash string) to perform drag on.\n All the coordinates will be calculated relatively this this element position on the screen.\n Absolute screen coordinates are expected if this argument is not set  duration : Float number of seconds in range [0.5, 60]. How long the tap gesture at\n starting drag point should be before to start dragging. Mandatory parameter  fromX : The x coordinate of starting drag point (type float). Mandatory parameter  fromY : The y coordinate of starting drag point (type float). Mandatory parameter  toX : The x coordinate of ending drag point (type float). Mandatory parameter  toY : The y coordinate of ending drag point (type float). Mandatory parameter", 
            "title": "Supported arguments"
        }, 
        {
            "location": "/writing-and-running/ios-xctest-mobile-gestures/#usage-examples_7", 
            "text": "// Java\nJavascriptExecutor js = (JavascriptExecutor) driver;\nMap String, Object  params = new HashMap ();\nparams.put( duration , 1.0);\nparams.put( fromX , 100);\nparams.put( fromY , 100);\nparams.put( toX , 200);\nparams.put( toY , 200);\nparams.put( element , ((RemoteWebElement) element).getId());\njs.executeScript( mobile: dragFromToForDuration , params);", 
            "title": "Usage examples"
        }, 
        {
            "location": "/writing-and-running/ios-xctest-mobile-gestures/#mobile-selectpickerwheelvalue", 
            "text": "Performs selection of the next or previous picker wheel value. This might\nbe useful if these values are populated dynamically, so you don't know which\none to select or value selection does not work because of XCTest bug.", 
            "title": "mobile: selectPickerWheelValue"
        }, 
        {
            "location": "/writing-and-running/ios-xctest-mobile-gestures/#supported-arguments_8", 
            "text": "element : PickerWheel's internal element id (as hexadecimal hash string) to perform\n value selection on. The element must be of type XCUIElementTypePickerWheel. Mandatory parameter  order : Either  next  to select the value next to the current one\n from the target picker wheel or  previous  to select the previous one. Mandatory parameter  offset : The value in range [0.01, 0.5]. It defines how far from picker\n wheel's center the click should happen. The actual distance is culculated by\n multiplying this value to the actual picker wheel height. Too small offset value\n may not change the picker wheel value and too high value may cause the wheel to switch\n two or more values at once. Usually the optimal value is located in range [0.15, 0.3].  0.2  by default", 
            "title": "Supported arguments"
        }, 
        {
            "location": "/writing-and-running/ios-xctest-mobile-gestures/#usage-examples_8", 
            "text": "// Java\nJavascriptExecutor js = (JavascriptExecutor) driver;\nMap String, Object  params = new HashMap ();\nparams.put( order ,  next );\nparams.put( offset , 0.15);\nparams.put( element , ((RemoteWebElement) element).getId());\njs.executeScript( mobile: selectPickerWheelValue , params);", 
            "title": "Usage examples"
        }, 
        {
            "location": "/writing-and-running/ios-xctest-mobile-gestures/#mobile-alert", 
            "text": "Performs operations on NSAlert instance.", 
            "title": "mobile: alert"
        }, 
        {
            "location": "/writing-and-running/ios-xctest-mobile-gestures/#supported-arguments_9", 
            "text": "action : The following actions are supported:  accept ,  dismiss  and  getButtons .\n Mandatory parameter  buttonLabel : The label text of an existing alert button to click on. This is an\n optional parameter and is only valid in combination with  accept  and  dismiss \n actions.", 
            "title": "Supported arguments"
        }, 
        {
            "location": "/writing-and-running/ios-xctest-mobile-gestures/#usage-examples_9", 
            "text": "# Python\ndriver.execute_script('mobile: alert', {'action': 'accept', 'buttonLabel': 'My Cool Alert Button'});", 
            "title": "Usage examples"
        }, 
        {
            "location": "/writing-and-running/ios-xctest-mobile-gestures/#advanced-topics", 
            "text": "Check  WDA Element Commands API \nto get the information about the gestures implemented in Facebook WebDriverAgent.\nCheck Apple XCTest documentation on  XCUIElement  and XCUICoordinate  methods list to get the information\nabout all gestures available there.", 
            "title": "Advanced Topics"
        }, 
        {
            "location": "/writing-and-running/ios_predicate/", 
            "text": "iOS Predicate\n\n\nNOTE\n: iOS predicates are usable in iOS 9.3 and below using the \n-ios uiautomation\n locator strategy and they are usable in iOS 10 and above using the \n-ios predicate string\n locator strategy\n\n\nIt is worth looking at \n'-ios uiautomation'\n search strategy with \nPredicates\n.\n\nUIAutomation JavaScript API\n has following methods which can are very useful.\n\n\n(UIAElement) UIAElementArray.firstWithPredicate(PredicateString predicateString)\n(UIAElementArray) UIAElementArray.withPredicate(PredicateString predicateString)\n\n\n\n\nNative JS search strategy (powered by Apple) provides much more flexibility and is like Xpath.\n\nPredicates\n can be used to restrict an elements set to select only those ones for which some condition is true.\n\n\n'-ios uiautomation' example:\n\n\n// java\nappiumDriver.findElementsByIosUIAutomation(\ncollectionViews()[0].cells().withPredicate(\\\nANY staticTexts.isVisible == TRUE\\\n)\n);\n\n\n\n\n'-ios predicate string' example:\n\n\n// java\nappiumDriver.findElementsByIosNsPredicate(\nisWDVisible == 1\n);\n\n\n\n\n-  will select only those  \nUIACollectionCell\n elements that have visible \nUIAStaticText\n child elements, and themselves are childs of 1st \nUIACollectionView\n element that should be located under the main app window.  Here \nstaticTexts()\n and \nisVisible()\n are methods available in \nUIAElementArray\n and \nUIAElement\n classes respectively. \nNote that \nUIAElementArray\n numbering begins with \n0\n unlike Xpath where indexes counting starts from \n1\n\n\nHere's a list of available Predicates (mostly taken from \nPredicates Programming Guide\n)\n\n\nBasic Comparisons\n\n\n= , ==\n- The left-hand expression is equal to the right-hand expression:\n\n\ntableViews()[1].cells().firstWithPredicate(\nlabel == 'Olivia' \n)\n\nsame in Xpath: /UIATableView[2]/UIATableCell[@label = 'Olivia'][1]\n\n\n\n\n>= , =>\n- The left-hand expression is greater than or equal to the right-hand expression.\n\n\n= , =\n\n- The left-hand expression is less than or equal to the right-hand expression.\n\n\n>\n- The left-hand expression is greater than the right-hand expression.\n\n\n\n- The left-hand expression is less than the right-hand expression.\n\n\n!= , \n>\n- The left-hand expression is not equal to the right-hand expression.\n\n\nBETWEEN\n- The left-hand expression is between, or equal to either of, the values specified in the right-hand side. The right-hand side is a two value array (an array is required to specify order) giving upper and lower bounds. For example, \n1 BETWEEN { 0 , 33 }\n, or \n$INPUT BETWEEN { $LOWER, $UPPER }\n.\nIn Objective-C, you could create a BETWEEN predicate as shown in the following example:\n\n\nNSPredicate *betweenPredicate =\n    [NSPredicate predicateWithFormat: @\nattributeName BETWEEN %@\n, @[@1, @10]];\n\n\n\n\nThis creates a predicate that matches \n( ( 1 \n= attributeValue ) \n ( attributeValue \n= 10 ) )\n\n\nBoolean Value Predicates\n\n\nTRUEPREDICATE\n- A predicate that always evaluates to \nTRUE\n .\n\n\nFALSEPREDICATE\n- A predicate that always evaluates to \nFALSE\n.\n\n\nBasic Compound Predicates\n\n\nAND , \n\n- Logical AND.\n\n\nOR , ||\n- Logical OR.\n\n\nNOT , !\n- Logical NOT.\n\n\nString Comparisons\n\n\nString comparisons are by default case and diacritic sensitive. You can modify an operator using the key characters \nc\n and \nd\n within square braces to specify case and diacritic insensitivity respectively, for example \nfirstName BEGINSWITH[cd] $FIRST_NAME\n\n\nBEGINSWITH\n- The left-hand expression begins with the right-hand expression.\n\n\nscrollViews()[3].buttons().firstWithPredicate(\nname BEGINSWITH 'results toggle' \n)\n\nsame in Xpath: /UIAScrollView[4]/UIAButton[starts-with(@name, 'results toggle')][1]\n\n\n\n\nCONTAINS\n- The left-hand expression contains the right-hand expression.\n\n\ntableViews()[1].cells().withPredicate(\nANY collectionViews[0].buttons.name CONTAINS 'opera'\n)\n\nsame in Xpath: /UIATableView[2]/UIATableCell[UIACollectionView[1]/UIAButton[contains(@name, 'opera')]]\n\n\n\n\nENDSWITH\n- The left-hand expression ends with the right-hand expression.\n\n\nLIKE\n- The left hand expression equals the right-hand expression: ? and * are allowed as wildcard characters, where ? matches 1 character and * matches 0 or more characters. In Mac OS X v10.4, wildcard characters do not match newline characters.\n\n\ntableViews()[0].cells().firstWithPredicate(\nname LIKE '*Total: $*' \n)\n\nsame in Xpath: /UIATableView[1]/UIATableCell[matches(@name, '.*Total: \\$.*')][1]\n\n\n\n\nMATCHES\n- The left hand expression equals the right hand expression using a regex -style comparison according to ICU v3 (for more details see the ICU User Guide for \nRegular Expressions\n).\n\n\ntableViews().firstWithPredicate(\nvalue MATCHES '.*of 7' \n)\n\nsame in Xpath: /UIATableView[matches(@value, '.*of 7')][1]\n\n\n\n\nAggregate Operations\n\n\nANY , SOME\n- Specifies any of the elements in the following expression. For example \nANY children.age \n 18\n .\n\n\ntableViews()[0].cells().firstWithPredicate(\nSOME staticTexts.name = 'red'\n).staticTexts().withName('red')\n\nsame in Xpath: /UIATableView[1]/UIATableCell[UIAStaticText/@name = 'red'][1]/UIAStaticText[@name = 'red']\n\n\n\n\nALL\n- Specifies all of the elements in the following expression. For example \nALL children.age \n 18\n .\n\n\nNONE\n- Specifies none of the elements in the following expression. For example, \nNONE children.age \n 18\n . This is logically equivalent to \nNOT (ANY ...)\n .\n\n\nIN\n- Equivalent to an SQL IN operation, the left-hand side must appear in the collection specified by the right-hand side. For example, \nname IN { 'Ben', 'Melissa', 'Matthew' }\n . The collection may be an array, a set, or a dictionary\u2014in the case of a dictionary, its values are used.\n\n\narray[index]\n- Specifies the element at the specified index in the array.\n\n\narray[FIRST]\n- Specifies the first element in the array.\n\n\narray[LAST]\n- Specifies the last element in the array.\n\n\narray[SIZE]\n- Specifies the size of the array\n\n\nelements()[0].tableViews()[0].cells().withPredicate(\nstaticTexts[SIZE] \n 2\n)\nsame in Xpath: /*[1]/UIATableView[1]/UIATableCell[count(UIAStaticText) \n 2]\n\n\n\n\nIdentifiers\n\n\nC style identifier\n\n- Any C style identifier that is not a reserved word.\n\n\n#symbol\n\n- Used to escape a reserved word into a user identifier.\n\n\n[\\]{octaldigit}{3}\n\n- Used to escape an octal number ( \n\\\n followed by 3 octal digits).\n\n\n[\\][xX]{hexdigit}{2}\n\n- Used to escape a hex number ( \n\\x\n or \n\\X\n followed by 2 hex digits).\n\n\n[\\][uU]{hexdigit}{4}\n\n- Used to escape a Unicode number ( \n\\u\n or \n\\U\n followed by 4 hex digits).\n\n\nLiterals\n\n\nSingle and double quotes produce the same result, but they do not terminate each other. For example, \n\"abc\"\n and \n'abc'\n are identical, whereas \n\"a'b'c\"\n is equivalent to a space-separated concatenation of \na, 'b', c\n.\n\n\nFALSE , NO\n- Logical false.\n\n\nTRUE , YES\n- Logical true.\n\n\nNULL , NIL\n- A null value.\n\n\nSELF\n- Represents the object being evaluated.\n\n\n\"text\"\n- A character string.\n\n\n'text'\n- A character string.\n\n\nComma-separated literal array\n\n- For example, \n{ 'comma', 'separated', 'literal', 'array' }\n .\n\n\nStandard integer and fixed-point notations\n\n- For example, \n1 , 27 , 2.71828 , 19.75\n .\n\n\nFloating-point notation with exponentiation\n\n- For example, \n9.2e-5\n .\n\n\n0x\n- Prefix used to denote a hexadecimal digit sequence.\n\n\n0o\n- Prefix used to denote an octal digit sequence.\n\n\n0b\n- Prefix used to denote a binary digit sequence.\n\n\nReserved Words\n\n\nThe following words are reserved:\n\n\nAND, OR, IN, NOT, ALL, ANY, SOME, NONE, LIKE, CASEINSENSITIVE, CI, MATCHES, CONTAINS, BEGINSWITH, ENDSWITH, BETWEEN, NULL, NIL, SELF, TRUE, YES, FALSE, NO, FIRST, LAST, SIZE, ANYKEY, SUBQUERY, CAST, TRUEPREDICATE, FALSEPREDICATE\n\n\nAppium predicate helpers\n\n\nAppium has \nhelpers for predicate search\n in app.js:\n\n\n\n\ngetFirstWithPredicate\n\n\ngetFirstWithPredicateWeighted\n\n\ngetAllWithPredicate\n\n\ngetNameContains\n\n\n\n\nHere's a Ruby example:\n\n\n# Ruby example\ntext = 'Various uses'\npredicate = \nname contains[c] '#{text}' || label contains[c] '#{text}' || value contains[c] '#{text}'\n\nelement = execute_script(%Q(au.mainApp().getFirstWithPredicate(\n#{predicate}\n);))\n\nputs element.name # Buttons, Various uses of UIButton", 
            "title": "Ios predicate"
        }, 
        {
            "location": "/writing-and-running/ios_predicate/#ios-predicate", 
            "text": "NOTE : iOS predicates are usable in iOS 9.3 and below using the  -ios uiautomation  locator strategy and they are usable in iOS 10 and above using the  -ios predicate string  locator strategy  It is worth looking at  '-ios uiautomation'  search strategy with  Predicates . UIAutomation JavaScript API  has following methods which can are very useful.  (UIAElement) UIAElementArray.firstWithPredicate(PredicateString predicateString)\n(UIAElementArray) UIAElementArray.withPredicate(PredicateString predicateString)  Native JS search strategy (powered by Apple) provides much more flexibility and is like Xpath. Predicates  can be used to restrict an elements set to select only those ones for which some condition is true.  '-ios uiautomation' example:  // java\nappiumDriver.findElementsByIosUIAutomation( collectionViews()[0].cells().withPredicate(\\ ANY staticTexts.isVisible == TRUE\\ ) );  '-ios predicate string' example:  // java\nappiumDriver.findElementsByIosNsPredicate( isWDVisible == 1 );  -  will select only those   UIACollectionCell  elements that have visible  UIAStaticText  child elements, and themselves are childs of 1st  UIACollectionView  element that should be located under the main app window.  Here  staticTexts()  and  isVisible()  are methods available in  UIAElementArray  and  UIAElement  classes respectively.  Note that  UIAElementArray  numbering begins with  0  unlike Xpath where indexes counting starts from  1  Here's a list of available Predicates (mostly taken from  Predicates Programming Guide )", 
            "title": "iOS Predicate"
        }, 
        {
            "location": "/writing-and-running/ios_predicate/#basic-comparisons", 
            "text": "= , ==\n- The left-hand expression is equal to the right-hand expression:  tableViews()[1].cells().firstWithPredicate( label == 'Olivia'  )\n\nsame in Xpath: /UIATableView[2]/UIATableCell[@label = 'Olivia'][1]  >= , =>\n- The left-hand expression is greater than or equal to the right-hand expression.  = , = \n- The left-hand expression is less than or equal to the right-hand expression.  >\n- The left-hand expression is greater than the right-hand expression.  \n- The left-hand expression is less than the right-hand expression.  != ,  >\n- The left-hand expression is not equal to the right-hand expression.  BETWEEN\n- The left-hand expression is between, or equal to either of, the values specified in the right-hand side. The right-hand side is a two value array (an array is required to specify order) giving upper and lower bounds. For example,  1 BETWEEN { 0 , 33 } , or  $INPUT BETWEEN { $LOWER, $UPPER } .\nIn Objective-C, you could create a BETWEEN predicate as shown in the following example:  NSPredicate *betweenPredicate =\n    [NSPredicate predicateWithFormat: @ attributeName BETWEEN %@ , @[@1, @10]];  This creates a predicate that matches  ( ( 1  = attributeValue )   ( attributeValue  = 10 ) )", 
            "title": "Basic Comparisons"
        }, 
        {
            "location": "/writing-and-running/ios_predicate/#boolean-value-predicates", 
            "text": "TRUEPREDICATE\n- A predicate that always evaluates to  TRUE  .  FALSEPREDICATE\n- A predicate that always evaluates to  FALSE .", 
            "title": "Boolean Value Predicates"
        }, 
        {
            "location": "/writing-and-running/ios_predicate/#basic-compound-predicates", 
            "text": "AND ,  \n- Logical AND.  OR , ||\n- Logical OR.  NOT , !\n- Logical NOT.", 
            "title": "Basic Compound Predicates"
        }, 
        {
            "location": "/writing-and-running/ios_predicate/#string-comparisons", 
            "text": "String comparisons are by default case and diacritic sensitive. You can modify an operator using the key characters  c  and  d  within square braces to specify case and diacritic insensitivity respectively, for example  firstName BEGINSWITH[cd] $FIRST_NAME  BEGINSWITH\n- The left-hand expression begins with the right-hand expression.  scrollViews()[3].buttons().firstWithPredicate( name BEGINSWITH 'results toggle'  )\n\nsame in Xpath: /UIAScrollView[4]/UIAButton[starts-with(@name, 'results toggle')][1]  CONTAINS\n- The left-hand expression contains the right-hand expression.  tableViews()[1].cells().withPredicate( ANY collectionViews[0].buttons.name CONTAINS 'opera' )\n\nsame in Xpath: /UIATableView[2]/UIATableCell[UIACollectionView[1]/UIAButton[contains(@name, 'opera')]]  ENDSWITH\n- The left-hand expression ends with the right-hand expression.  LIKE\n- The left hand expression equals the right-hand expression: ? and * are allowed as wildcard characters, where ? matches 1 character and * matches 0 or more characters. In Mac OS X v10.4, wildcard characters do not match newline characters.  tableViews()[0].cells().firstWithPredicate( name LIKE '*Total: $*'  )\n\nsame in Xpath: /UIATableView[1]/UIATableCell[matches(@name, '.*Total: \\$.*')][1]  MATCHES\n- The left hand expression equals the right hand expression using a regex -style comparison according to ICU v3 (for more details see the ICU User Guide for  Regular Expressions ).  tableViews().firstWithPredicate( value MATCHES '.*of 7'  )\n\nsame in Xpath: /UIATableView[matches(@value, '.*of 7')][1]", 
            "title": "String Comparisons"
        }, 
        {
            "location": "/writing-and-running/ios_predicate/#aggregate-operations", 
            "text": "ANY , SOME\n- Specifies any of the elements in the following expression. For example  ANY children.age   18  .  tableViews()[0].cells().firstWithPredicate( SOME staticTexts.name = 'red' ).staticTexts().withName('red')\n\nsame in Xpath: /UIATableView[1]/UIATableCell[UIAStaticText/@name = 'red'][1]/UIAStaticText[@name = 'red']  ALL\n- Specifies all of the elements in the following expression. For example  ALL children.age   18  .  NONE\n- Specifies none of the elements in the following expression. For example,  NONE children.age   18  . This is logically equivalent to  NOT (ANY ...)  .  IN\n- Equivalent to an SQL IN operation, the left-hand side must appear in the collection specified by the right-hand side. For example,  name IN { 'Ben', 'Melissa', 'Matthew' }  . The collection may be an array, a set, or a dictionary\u2014in the case of a dictionary, its values are used.  array[index]\n- Specifies the element at the specified index in the array.  array[FIRST]\n- Specifies the first element in the array.  array[LAST]\n- Specifies the last element in the array.  array[SIZE]\n- Specifies the size of the array  elements()[0].tableViews()[0].cells().withPredicate( staticTexts[SIZE]   2 )\nsame in Xpath: /*[1]/UIATableView[1]/UIATableCell[count(UIAStaticText)   2]", 
            "title": "Aggregate Operations"
        }, 
        {
            "location": "/writing-and-running/ios_predicate/#identifiers", 
            "text": "C style identifier \n- Any C style identifier that is not a reserved word.  #symbol \n- Used to escape a reserved word into a user identifier.  [\\]{octaldigit}{3} \n- Used to escape an octal number (  \\  followed by 3 octal digits).  [\\][xX]{hexdigit}{2} \n- Used to escape a hex number (  \\x  or  \\X  followed by 2 hex digits).  [\\][uU]{hexdigit}{4} \n- Used to escape a Unicode number (  \\u  or  \\U  followed by 4 hex digits).", 
            "title": "Identifiers"
        }, 
        {
            "location": "/writing-and-running/ios_predicate/#literals", 
            "text": "Single and double quotes produce the same result, but they do not terminate each other. For example,  \"abc\"  and  'abc'  are identical, whereas  \"a'b'c\"  is equivalent to a space-separated concatenation of  a, 'b', c .  FALSE , NO\n- Logical false.  TRUE , YES\n- Logical true.  NULL , NIL\n- A null value.  SELF\n- Represents the object being evaluated.  \"text\"\n- A character string.  'text'\n- A character string.  Comma-separated literal array \n- For example,  { 'comma', 'separated', 'literal', 'array' }  .  Standard integer and fixed-point notations \n- For example,  1 , 27 , 2.71828 , 19.75  .  Floating-point notation with exponentiation \n- For example,  9.2e-5  .  0x\n- Prefix used to denote a hexadecimal digit sequence.  0o\n- Prefix used to denote an octal digit sequence.  0b\n- Prefix used to denote a binary digit sequence.", 
            "title": "Literals"
        }, 
        {
            "location": "/writing-and-running/ios_predicate/#reserved-words", 
            "text": "The following words are reserved:  AND, OR, IN, NOT, ALL, ANY, SOME, NONE, LIKE, CASEINSENSITIVE, CI, MATCHES, CONTAINS, BEGINSWITH, ENDSWITH, BETWEEN, NULL, NIL, SELF, TRUE, YES, FALSE, NO, FIRST, LAST, SIZE, ANYKEY, SUBQUERY, CAST, TRUEPREDICATE, FALSEPREDICATE", 
            "title": "Reserved Words"
        }, 
        {
            "location": "/writing-and-running/ios_predicate/#appium-predicate-helpers", 
            "text": "Appium has  helpers for predicate search  in app.js:   getFirstWithPredicate  getFirstWithPredicateWeighted  getAllWithPredicate  getNameContains   Here's a Ruby example:  # Ruby example\ntext = 'Various uses'\npredicate =  name contains[c] '#{text}' || label contains[c] '#{text}' || value contains[c] '#{text}' \nelement = execute_script(%Q(au.mainApp().getFirstWithPredicate( #{predicate} );))\n\nputs element.name # Buttons, Various uses of UIButton", 
            "title": "Appium predicate helpers"
        }, 
        {
            "location": "/writing-and-running/mobile-web/", 
            "text": "Automating mobile web apps\n\n\nIf you're interested in automating your web app in Mobile Safari on iOS or\nChrome on Android, Appium can help you. Basically, you write a normal WebDriver\ntest, and use Appium as the Selenium server with a special set of desired\ncapabilities.\n\n\nMobile Safari on Simulator\n\n\nFirst of all, make sure developer mode is turned on in your Safari\npreferences so that the remote debugger port is open.\n\n\nIf you are using the simulator or a real device, you MUST run Safari before\nattempting to use Appium.\n\n\nThen, use desired capabilities like these to run your test in mobile Safari:\n\n\n// javascript\n{\n  platformName: 'iOS'\n  , platformVersion: '7.1'\n  , browserName: 'Safari'\n  , deviceName: 'iPhone Simulator'\n}\n\n\n\n\n# python\n{\n  'platformName': 'iOS',\n  'platformVersion': '7.1',\n  'browserName': 'Safari',\n  'deviceName': 'iPhone Simulator'\n}\n\n\n\n\n// php\npublic static $browsers = array(\n    array(\n        'desiredCapabilities' =\n array(\n            'platformName' =\n 'iOS',\n            'platformVersion' =\n '7.1',\n            'browserName' =\n 'Safari',\n            'deviceName' =\n 'iPhone Simulator'\n        )\n    )\n);\n\n\n\n\n// java\nDesiredCapabilities capabilities = new DesiredCapabilities();\ncapabilities.setCapability(MobileCapabilityType.PLATFORM_NAME, \niOS\n);\ncapabilities.setCapability(MobileCapabilityType.PLATFORM_VERSION, \n7.1\n);\ncapabilities.setCapability(MobileCapabilityType.BROWSER_NAME, \nSafari\n);\ncapabilities.setCapability(MobileCapabilityType.DEVICE_NAME, \niPhone Simulator\n);\n\n\n\n\nMobile Safari on a Real iOS Device\n\n\nFor iOS 9.3 and below (pre-XCUITest), we use the \nSafariLauncher\nApp\n app to launch Safari and\nrun tests against mobile Safari. This is because Safari is an app that is owned\nby Apple, and Instruments cannot launch it on real devices. Once Safari has\nbeen launched by SafariLauncher, the Remote Debugger automatically connects\nusing the\n\nios-webkit-debug-proxy\n.\nWhen working with \nios-webkit-debug-proxy\n, you have to trust the machine before\nyou can can run tests against your iOS device.\n\n\nFor instruction on how to install and run ios-webkit-debugger-proxy see\n\niOS WebKit debug proxy\n documentation.\n\n\nSetup\n\n\nBefore you can run your tests against Safari on a real device you will need to:\n\n\n\n\nHave the \nios-webkit-debug-proxy\n installed, running and listening on port 27753 (see the\n\nhybrid docs\n for instructions)\n\n\nTurn on \nweb inspector\n on iOS device (\nsettings \n safari \n advanced\n)\n\n\nMake sure that \nSafariLauncher\n will work (see the \nSafariLauncher docs\n for instructions)\n\n\n\n\nRunning your test\n\n\nTo configure you test to run against safari simply set the \n\"browserName\"\n to be \n\"Safari\"\n.\n\n\nJava Example\n\n\n// java\n//setup the web driver and launch the webview app.\nDesiredCapabilities desiredCapabilities = new DesiredCapabilities();\ndesiredCapabilities.setCapability(MobileCapabilityType.BROWSER_NAME, \nSafari\n);\nURL url = new URL(\nhttp://127.0.0.1:4723/wd/hub\n);\nAppiumDriver driver = new AppiumDriver(url, desiredCapabilities);\n\n// Navigate to the page and interact with the elements on the guinea-pig page using id.\ndriver.get(\nhttp://saucelabs.com/test/guinea-pig\n);\nWebElement div = driver.findElement(By.id(\ni_am_an_id\n));\nAssert.assertEquals(\nI am a div\n, div.getText()); //check the text retrieved matches expected value\ndriver.findElement(By.id(\ncomments\n)).sendKeys(\nMy comment\n); //populate the comments field by id.\n\n//close the app.\ndriver.quit();\n\n\n\n\nPython Example\n\n\n# python\n# setup the web driver and launch the webview app.\ncapabilities = { 'browserName': 'Safari' }\ndriver = webdriver.Remote('http://localhost:4723/wd/hub', capabilities)\n\n# Navigate to the page and interact with the elements on the guinea-pig page using id.\ndriver.get('http://saucelabs.com/test/guinea-pig');\ndiv = driver.find_element_by_id('i_am_an_id')\n# check the text retrieved matches expected value\nassertEqual('I am a div', div.text)\n\n# populate the comments field by id\ndriver.find_element_by_id('comments').send_keys('My comment')\n\n# close the driver\ndriver.quit()\n\n\n\n\n// php\nclass ContextTests extends PHPUnit_Extensions_AppiumTestCase\n{\n    public static $browsers = array(\n        array(\n            'desiredCapabilities' =\n array(\n                'platformName' =\n 'iOS',\n                'platformVersion' =\n '7.1',\n                'browserName' =\n 'Safari',\n                'deviceName' =\n 'iPhone Simulator'\n            )\n        )\n    );\n\n    public function testThings()\n    {\n        $this-\nget('http://saucelabs.com/test/guinea-pig');\n\n        $div = $this-\nbyId('i_am_an_id');\n        $this-\nassertEquals('I am a div', $div-\ntext());\n\n        $this-\nbyId('comments')-\nsendKeys('My comment');\n    }\n}\n\n\n\n\nMobile Chrome on Emulator or Real Device\n\n\nPre-requisites:\n\n\n\n\nMake sure Chrome (an app with the package \ncom.android.chrome\n) is installed on your device or emulator. Getting Chrome for the x86 version of the emulator is not currently possible without building Chromium, so you may want to run an ARM emulator and then copy a Chrome APK from a real device to get Chrome on an emulator.\n\n\nChromedriver needs to be installed and configured for automating the specific version of Chrome available on the device. See \nhere\n for more information and details.\n\n\n\n\nThen, use desired capabilities like these to run your test in Chrome:\n\n\n// javascript\n{\n  platformName: 'Android'\n  , platformVersion: '4.4'\n  , deviceName: 'Android Emulator'\n  , browserName: 'Chrome'\n};\n\n\n\n\n# python\n{\n  'platformName': 'Android',\n  'platformVersion': '4.4',\n  'deviceName': 'Android Emulator',\n  'browserName': 'Chrome'\n}\n\n\n\n\n// php\npublic static $browsers = array(\n    array(\n        'desiredCapabilities' =\n array(\n            'platformName' =\n 'Android',\n            'platformVersion' =\n '4.4',\n            'browserName' =\n 'Chrome',\n            'deviceName' =\n 'Android Emulator'\n        )\n    )\n);\n\n\n\n\n// java\nDesiredCapabilities capabilities = new DesiredCapabilities();\ncapabilities.setCapability(MobileCapabilityType.PLATFORM_NAME, \nAndroid\n);\ncapabilities.setCapability(MobileCapabilityType.PLATFORM_VERSION, \n4.4\n);\ncapabilities.setCapability(MobileCapabilityType.DEVICE_NAME, \nAndroid Emulator\n);\ncapabilities.setCapability(MobileCapabilityType.BROWSER_NAME, \nChrome\n);\n\n\n\n\nNote that on 4.4+ devices, you can also use the 'Browser' \nbrowserName\n cap to automate the built-in browser. On all devices you can use the 'Chromium' \nbrowserName\n cap to automate a build of Chromium.\n\n\nTroubleshooting chromedriver\n\n\nAs of Chrome version 33, a rooted device is no longer required. If running tests on older versions of Chrome, devices needed to be rooted as ChromeDriver required write access to the /data/local directory\nto set Chrome's command line arguments.\n\n\nIf testing on Chrome app prior to version 33, ensure adb shell has read/write access to /data/local directory on the device:\n\n\n$ adb shell su -c chmod 777 /data/local\n\n\n\n\nFor more chromedriver specific documentation see \nChromeDriver documentation\n.", 
            "title": "Mobile web"
        }, 
        {
            "location": "/writing-and-running/mobile-web/#automating-mobile-web-apps", 
            "text": "If you're interested in automating your web app in Mobile Safari on iOS or\nChrome on Android, Appium can help you. Basically, you write a normal WebDriver\ntest, and use Appium as the Selenium server with a special set of desired\ncapabilities.", 
            "title": "Automating mobile web apps"
        }, 
        {
            "location": "/writing-and-running/mobile-web/#mobile-safari-on-simulator", 
            "text": "First of all, make sure developer mode is turned on in your Safari\npreferences so that the remote debugger port is open.  If you are using the simulator or a real device, you MUST run Safari before\nattempting to use Appium.  Then, use desired capabilities like these to run your test in mobile Safari:  // javascript\n{\n  platformName: 'iOS'\n  , platformVersion: '7.1'\n  , browserName: 'Safari'\n  , deviceName: 'iPhone Simulator'\n}  # python\n{\n  'platformName': 'iOS',\n  'platformVersion': '7.1',\n  'browserName': 'Safari',\n  'deviceName': 'iPhone Simulator'\n}  // php\npublic static $browsers = array(\n    array(\n        'desiredCapabilities' =  array(\n            'platformName' =  'iOS',\n            'platformVersion' =  '7.1',\n            'browserName' =  'Safari',\n            'deviceName' =  'iPhone Simulator'\n        )\n    )\n);  // java\nDesiredCapabilities capabilities = new DesiredCapabilities();\ncapabilities.setCapability(MobileCapabilityType.PLATFORM_NAME,  iOS );\ncapabilities.setCapability(MobileCapabilityType.PLATFORM_VERSION,  7.1 );\ncapabilities.setCapability(MobileCapabilityType.BROWSER_NAME,  Safari );\ncapabilities.setCapability(MobileCapabilityType.DEVICE_NAME,  iPhone Simulator );", 
            "title": "Mobile Safari on Simulator"
        }, 
        {
            "location": "/writing-and-running/mobile-web/#mobile-safari-on-a-real-ios-device", 
            "text": "For iOS 9.3 and below (pre-XCUITest), we use the  SafariLauncher\nApp  app to launch Safari and\nrun tests against mobile Safari. This is because Safari is an app that is owned\nby Apple, and Instruments cannot launch it on real devices. Once Safari has\nbeen launched by SafariLauncher, the Remote Debugger automatically connects\nusing the ios-webkit-debug-proxy .\nWhen working with  ios-webkit-debug-proxy , you have to trust the machine before\nyou can can run tests against your iOS device.  For instruction on how to install and run ios-webkit-debugger-proxy see iOS WebKit debug proxy  documentation.", 
            "title": "Mobile Safari on a Real iOS Device"
        }, 
        {
            "location": "/writing-and-running/mobile-web/#setup", 
            "text": "Before you can run your tests against Safari on a real device you will need to:   Have the  ios-webkit-debug-proxy  installed, running and listening on port 27753 (see the hybrid docs  for instructions)  Turn on  web inspector  on iOS device ( settings   safari   advanced )  Make sure that  SafariLauncher  will work (see the  SafariLauncher docs  for instructions)", 
            "title": "Setup"
        }, 
        {
            "location": "/writing-and-running/mobile-web/#running-your-test", 
            "text": "To configure you test to run against safari simply set the  \"browserName\"  to be  \"Safari\" .", 
            "title": "Running your test"
        }, 
        {
            "location": "/writing-and-running/mobile-web/#java-example", 
            "text": "// java\n//setup the web driver and launch the webview app.\nDesiredCapabilities desiredCapabilities = new DesiredCapabilities();\ndesiredCapabilities.setCapability(MobileCapabilityType.BROWSER_NAME,  Safari );\nURL url = new URL( http://127.0.0.1:4723/wd/hub );\nAppiumDriver driver = new AppiumDriver(url, desiredCapabilities);\n\n// Navigate to the page and interact with the elements on the guinea-pig page using id.\ndriver.get( http://saucelabs.com/test/guinea-pig );\nWebElement div = driver.findElement(By.id( i_am_an_id ));\nAssert.assertEquals( I am a div , div.getText()); //check the text retrieved matches expected value\ndriver.findElement(By.id( comments )).sendKeys( My comment ); //populate the comments field by id.\n\n//close the app.\ndriver.quit();", 
            "title": "Java Example"
        }, 
        {
            "location": "/writing-and-running/mobile-web/#python-example", 
            "text": "# python\n# setup the web driver and launch the webview app.\ncapabilities = { 'browserName': 'Safari' }\ndriver = webdriver.Remote('http://localhost:4723/wd/hub', capabilities)\n\n# Navigate to the page and interact with the elements on the guinea-pig page using id.\ndriver.get('http://saucelabs.com/test/guinea-pig');\ndiv = driver.find_element_by_id('i_am_an_id')\n# check the text retrieved matches expected value\nassertEqual('I am a div', div.text)\n\n# populate the comments field by id\ndriver.find_element_by_id('comments').send_keys('My comment')\n\n# close the driver\ndriver.quit()  // php\nclass ContextTests extends PHPUnit_Extensions_AppiumTestCase\n{\n    public static $browsers = array(\n        array(\n            'desiredCapabilities' =  array(\n                'platformName' =  'iOS',\n                'platformVersion' =  '7.1',\n                'browserName' =  'Safari',\n                'deviceName' =  'iPhone Simulator'\n            )\n        )\n    );\n\n    public function testThings()\n    {\n        $this- get('http://saucelabs.com/test/guinea-pig');\n\n        $div = $this- byId('i_am_an_id');\n        $this- assertEquals('I am a div', $div- text());\n\n        $this- byId('comments')- sendKeys('My comment');\n    }\n}", 
            "title": "Python Example"
        }, 
        {
            "location": "/writing-and-running/mobile-web/#mobile-chrome-on-emulator-or-real-device", 
            "text": "Pre-requisites:   Make sure Chrome (an app with the package  com.android.chrome ) is installed on your device or emulator. Getting Chrome for the x86 version of the emulator is not currently possible without building Chromium, so you may want to run an ARM emulator and then copy a Chrome APK from a real device to get Chrome on an emulator.  Chromedriver needs to be installed and configured for automating the specific version of Chrome available on the device. See  here  for more information and details.   Then, use desired capabilities like these to run your test in Chrome:  // javascript\n{\n  platformName: 'Android'\n  , platformVersion: '4.4'\n  , deviceName: 'Android Emulator'\n  , browserName: 'Chrome'\n};  # python\n{\n  'platformName': 'Android',\n  'platformVersion': '4.4',\n  'deviceName': 'Android Emulator',\n  'browserName': 'Chrome'\n}  // php\npublic static $browsers = array(\n    array(\n        'desiredCapabilities' =  array(\n            'platformName' =  'Android',\n            'platformVersion' =  '4.4',\n            'browserName' =  'Chrome',\n            'deviceName' =  'Android Emulator'\n        )\n    )\n);  // java\nDesiredCapabilities capabilities = new DesiredCapabilities();\ncapabilities.setCapability(MobileCapabilityType.PLATFORM_NAME,  Android );\ncapabilities.setCapability(MobileCapabilityType.PLATFORM_VERSION,  4.4 );\ncapabilities.setCapability(MobileCapabilityType.DEVICE_NAME,  Android Emulator );\ncapabilities.setCapability(MobileCapabilityType.BROWSER_NAME,  Chrome );  Note that on 4.4+ devices, you can also use the 'Browser'  browserName  cap to automate the built-in browser. On all devices you can use the 'Chromium'  browserName  cap to automate a build of Chromium.", 
            "title": "Mobile Chrome on Emulator or Real Device"
        }, 
        {
            "location": "/writing-and-running/mobile-web/#troubleshooting-chromedriver", 
            "text": "As of Chrome version 33, a rooted device is no longer required. If running tests on older versions of Chrome, devices needed to be rooted as ChromeDriver required write access to the /data/local directory\nto set Chrome's command line arguments.  If testing on Chrome app prior to version 33, ensure adb shell has read/write access to /data/local directory on the device:  $ adb shell su -c chmod 777 /data/local  For more chromedriver specific documentation see  ChromeDriver documentation .", 
            "title": "Troubleshooting chromedriver"
        }, 
        {
            "location": "/writing-and-running/network_connection/", 
            "text": "Adjusting Network Connection\n\n\nThe Selenium \nMobile JSON Wire Protocol Specification\n supports an \nAPI\n for getting and setting the network connection for a device. The API works through a bitmask, assigning an integer to each possible state:\n\n\n\n\n\n\n\n\nValue (Alias)\n\n\nData\n\n\nWifi\n\n\nAirplane Mode\n\n\n\n\n\n\n\n\n\n\n0 (None)\n\n\n0\n\n\n0\n\n\n0\n\n\n\n\n\n\n1 (Airplane Mode)\n\n\n0\n\n\n0\n\n\n1\n\n\n\n\n\n\n2 (Wifi only)\n\n\n0\n\n\n1\n\n\n0\n\n\n\n\n\n\n4 (Data only)\n\n\n1\n\n\n0\n\n\n0\n\n\n\n\n\n\n6 (All network on)\n\n\n1\n\n\n1\n\n\n0\n\n\n\n\n\n\n\n\niOS\n\n\nUnfortunately, at the moment Appium does not support the Selenium network\nconnection API for iOS.\n\n\nAndroid\n\n\nThere are the following limitations:\n\n\nReal Devices\n\n\n\n\nChanging Airplane Mode state only works for Android 6 and older\n\n\nChaning data connection state works for Android 4.4 and older. Newer OS releases (5.0+) must be rooted in order to make the feature working (e. g. \nsu\n binary should available)\n\n\nChanging Wi-Fi connection state should work for all Android versions\n\n\n\n\nEmulators\n\n\n\n\nChanging Airplane Mode state only works for Android 6 and older\n\n\nChaning data connection state should work for all Android versions\n\n\nChanging Wi-Fi connection state should work for all Android versions\n\n\n\n\nWindows\n\n\nUnfortunately, at the moment Appium does not support the Selenium network\nconnection API for Windows.\n\n\n// javascript\n// set airplane mode\ndriver.setNetworkConnection(1)\n\n// set wifi only\ndriver.setNetworkConnection(2)\n\n// set data only\ndriver.setNetworkConnection(4)\n\n// set wifi and data\ndriver.setNetworkConnection(6)\n\n\n\n\nRetrieving the network connection settings returns the same bitmask, from which\nthe status can be decoded.\n\n\n// javascript\ndriver.getNetworkConnection().then(function (connectionType) {\n  switch (connectionType) {\n    case 0:\n      // no network connection\n      break;\n    case 1:\n      // airplane mode\n      break;\n    case 2:\n      // wifi\n      break;\n    case 4:\n      // data\n      break;\n    case 6:\n      // wifi and data\n      break;\n  }\n});", 
            "title": "Network connection"
        }, 
        {
            "location": "/writing-and-running/network_connection/#adjusting-network-connection", 
            "text": "The Selenium  Mobile JSON Wire Protocol Specification  supports an  API  for getting and setting the network connection for a device. The API works through a bitmask, assigning an integer to each possible state:     Value (Alias)  Data  Wifi  Airplane Mode      0 (None)  0  0  0    1 (Airplane Mode)  0  0  1    2 (Wifi only)  0  1  0    4 (Data only)  1  0  0    6 (All network on)  1  1  0", 
            "title": "Adjusting Network Connection"
        }, 
        {
            "location": "/writing-and-running/network_connection/#ios", 
            "text": "Unfortunately, at the moment Appium does not support the Selenium network\nconnection API for iOS.", 
            "title": "iOS"
        }, 
        {
            "location": "/writing-and-running/network_connection/#android", 
            "text": "There are the following limitations:", 
            "title": "Android"
        }, 
        {
            "location": "/writing-and-running/network_connection/#real-devices", 
            "text": "Changing Airplane Mode state only works for Android 6 and older  Chaning data connection state works for Android 4.4 and older. Newer OS releases (5.0+) must be rooted in order to make the feature working (e. g.  su  binary should available)  Changing Wi-Fi connection state should work for all Android versions", 
            "title": "Real Devices"
        }, 
        {
            "location": "/writing-and-running/network_connection/#emulators", 
            "text": "Changing Airplane Mode state only works for Android 6 and older  Chaning data connection state should work for all Android versions  Changing Wi-Fi connection state should work for all Android versions", 
            "title": "Emulators"
        }, 
        {
            "location": "/writing-and-running/network_connection/#windows", 
            "text": "Unfortunately, at the moment Appium does not support the Selenium network\nconnection API for Windows.  // javascript\n// set airplane mode\ndriver.setNetworkConnection(1)\n\n// set wifi only\ndriver.setNetworkConnection(2)\n\n// set data only\ndriver.setNetworkConnection(4)\n\n// set wifi and data\ndriver.setNetworkConnection(6)  Retrieving the network connection settings returns the same bitmask, from which\nthe status can be decoded.  // javascript\ndriver.getNetworkConnection().then(function (connectionType) {\n  switch (connectionType) {\n    case 0:\n      // no network connection\n      break;\n    case 1:\n      // airplane mode\n      break;\n    case 2:\n      // wifi\n      break;\n    case 4:\n      // data\n      break;\n    case 6:\n      // wifi and data\n      break;\n  }\n});", 
            "title": "Windows"
        }, 
        {
            "location": "/writing-and-running/reset-strategies/", 
            "text": "Reset Strategies\n\n\n\n\n\n\n\n\nAutomation Name\n\n\ndefault\n\n\nfullReset\n\n\nnoReset\n\n\n\n\n\n\n\n\n\n\niOS (including XCUITest)\n\n\nShut down sim after test. Do not destroy sim. Do not uninstall app from real device.\n\n\nUninstall app after real device test, destroy Simulator after sim test\n\n\nDo not destroy or shut down sim after test. Start tests running on whichever sim is running, or device is plugged in\n\n\n\n\n\n\nAndroid\n\n\nStop and clear app data after test. Do not uninstall apk\n\n\nStop app, clear app data and uninstall apk after test\n\n\nDo not stop app, do not clear app data, and do not uninstall apk.", 
            "title": "Reset strategies"
        }, 
        {
            "location": "/writing-and-running/reset-strategies/#reset-strategies", 
            "text": "Automation Name  default  fullReset  noReset      iOS (including XCUITest)  Shut down sim after test. Do not destroy sim. Do not uninstall app from real device.  Uninstall app after real device test, destroy Simulator after sim test  Do not destroy or shut down sim after test. Start tests running on whichever sim is running, or device is plugged in    Android  Stop and clear app data after test. Do not uninstall apk  Stop app, clear app data and uninstall apk after test  Do not stop app, do not clear app data, and do not uninstall apk.", 
            "title": "Reset Strategies"
        }, 
        {
            "location": "/writing-and-running/running-tests/", 
            "text": "Running Tests\n\n\nPreparing your app for test (iOS)\n\n\nTest apps run on the simulator have to be compiled specifically for the\nsimulator, for example by executing the following command in the Xcode project (you can use \nxcodebuild -showsdks\n to see the list of available SDKs):\n\n\n xcodebuild -sdk iphonesimulator6.0\n\n\n\nThis creates a \nbuild/Release-iphonesimulator\n directory in your Xcode project\nthat contains the \n.app\n package that you'll need to communicate with the\nAppium server.\n\n\nIf you want, you can zip up the .app directory into a .zip file! Appium will\nunpack it for you. Nice if you're not using Appium locally.\n\n\nPreparing your app for test (Android)\n\n\nNothing in particular needs to be done to run your .apk using Appium. If you\nwant to zip it up, you can.\n\n\nPreparing your app for test (Windows)\n\n\nNothing in particular needs to be done to run your test.\n\n\nRunning your test app with Appium (iOS)\n\n\nThe best way to see what to do currently is to look at the example tests:\n\n\nNode.js\n | \nPython\n | \nPHP\n | \nRuby\n | \nJava\n\n\nBasically, first make sure Appium is running:\n\n\nnode .\n\n\n\nThen script your WebDriver test, sending in the following desired capabilities:\n\n\n// javascript\n{\n    platformName: 'iOS',\n    platformVersion: '7.1',\n    deviceName: 'iPhone Simulator',\n    app: myApp\n}\n\n\n\n\n# python\n{\n    'platformName': 'iOS',\n    'platformVersion': '7.1',\n    'deviceName': 'iPhone Simulator',\n    'app': myApp\n}\n\n\n\n\n// php\npublic static $browsers = array(\n    array(\n        'desiredCapabilities' =\n array(\n            'platformName' =\n 'iOS',\n            'platformVersion' =\n '7.1',\n            'deviceName' =\n 'iPhone Simulator',\n            'app' =\n $myApp\n        )\n    )\n);\n\n\n\n\n// java\nDesiredCapabilities capabilities = new DesiredCapabilities();\ncapabilities.setCapability(MobileCapabilityType.PLATFORM_NAME, \niOS\n);\ncapabilities.setCapability(MobileCapabilityType.PLATFORM_VERSION, \n7.1\n);\ncapabilities.setCapability(MobileCapabilityType.DEVICE_NAME, \niPhone Simulator\n);\ncapabilities.setCapability(MobileCapabilityType.APP, myApp);\n\n\n\n\nIn this set of capabilities, \nmyApp\n must be either:\n\n\n\n\nA local absolute path to your simulator-compiled .app directory or .zip\n\n\nA url of a zip file containing your .app package\n\n\nA path to one of the sample app relative to the appium install root\n\n\n\n\nUsing your WebDriver library of choice, set the remote session to use these\ncapabilities and connect to the server running at port 4723 of localhost (or\nwhatever host and port you specified when you started Appium). You should be\nall set now!\n\n\nRunning your test app with Appium (Android)\n\n\nFirst, make sure you have one and only one Android emulator or device\nconnected. If you run \nadb devices\n, for example, you should see one device\nconnected. This is the device Appium will use for tests. Of course, to have\na device connected, you'll need to have made an Android AVD (see system\nsetup (\nWindows\n,\n\nMac\n,\nor \nLinux\n)\nfor more information). If the Android SDK tools are on your path, you can\nsimply run:\n\n\nemulator -avd \nMyAvdName\n\n\n\n\nAnd wait for the android emulator to finish launching. Sometimes, for various\nreasons, \nadb\n gets stuck. If it's not showing any connected devices or\notherwise failing, you can restart it by running:\n\n\nadb kill-server \n adb devices\n\n\n\nNow, make sure Appium is running:\n\n\nnode .\n\n\n\nThere are several ways to start an Appium application (it works exactly\nthe same as when the application is started via adb):\n\n\n\n\napk or zip only, the default activity will be launched ('app' capability)\n\n\napk + activity ('app' + 'appActivity' capabilities)\n\n\napk + activity + intent ('app' + 'appActivity' + 'appIntent' capabilities)\n\n\n...\n\n\n\n\nActivities may be specified in the following way:\n\n\n\n\nabsolute (e.g. appActivity: 'com.helloworld.SayHello').\n\n\nrelative to appPackage (e.g. appPackage: 'com.helloworld', appActivity='.SayHello')\n\n\n\n\nIf the 'appWaitPackage' and 'appWaitActivity' caps are specified, Appium\nautomatically spins until those activities are launched. You may specify\nmultiple wait activities for instance:\n\n\n\n\nappActivity: 'com.splash.SplashScreen'\n\n\nappPackage: 'com.splash' appActivity: '.SplashScreen'\n\n\nappPackage: 'com.splash' appActivity: '.SplashScreen,.LandingPage,com.why.GoThere'\n\n\n\n\nIf you are not sure what activity are configured in your apk, you can\nproceed in one of the following ways:\n\n\n\n\nMac/Linux: 'adb shell dumpsys window windows | grep mFocusedApp'\n\n\nIn the Ruby console: 'adb shell dumpsys window windows`.each_line.grep(/mFocusedApp/).first.strip'\n\n\nIn Windows terminal run 'adb shell dumpsys window windows' and manually look for the mFocusedApp line.\n\n\n\n\nThen script your WebDriver test, sending in the following desired capabilities:\n\n\n// javascript\n{\n    platformName: 'Android',\n    platformVersion: '4.4',\n    deviceName: 'Android Emulator',\n    app: myApp\n}\n\n\n\n\n# python\n{\n    'platformName': 'Android',\n    'platformVersion': '4.4',\n    'deviceName': 'Android Emulator',\n    'app': myApp\n}\n\n\n\n\n// php\npublic static $browsers = array(\n    array(\n        'desiredCapabilities' =\n array(\n            'platformName' =\n 'Android',\n            'platformVersion' =\n '4.4',\n            'deviceName' =\n 'Android Emulator',\n            'app' =\n $myApp\n        )\n    )\n);\n\n\n\n\n// java\nDesiredCapabilities capabilities = new DesiredCapabilities();\ncapabilities.setCapability(MobileCapabilityType.PLATFORM_NAME, \nAndroid\n);\ncapabilities.setCapability(MobileCapabilityType.PLATFORM_VERSION, \n4.4\n);\ncapabilities.setCapability(MobileCapabilityType.DEVICE_NAME, \nAndroid Emulator\n);\ncapabilities.setCapability(MobileCapabilityType.APP, myApp);\n\n\n\n\nIn this set of capabilities, \nmyApp\n must be either:\n\n\n\n\nA local absolute path to your .apk or a .zip of it\n\n\nA url of a zip file containing your .apk\n\n\nA path to one of the sample app relative to the appium install root\n\n\n\n\nUsing your WebDriver library of choice, set the remote session to use these\ncapabilities and connect to the server running at port 4723 of localhost (or\nwhatever host and port you specified when you started Appium). You should be\nall set now!\n\n\nRunning your test app with Appium (Android devices \n 4.2, and hybrid tests)\n\n\nAndroid devices before version 4.2 (API Level 17) do not have Google's\n\nUiAutomator framework\n\ninstalled. This is what Appium uses to perform the automation behaviors on\nthe device. For earlier devices or tests of hybrid (webview-based) apps,\nAppium comes bundled with another automation backend called [Selendroid]\n(http://selendroid.io/).\n\n\nTo use Selendroid, all that is required is to slightly change the set of\ndesired capabilities mentioned above, by adding the \nautomationName\n capability\nand specifying the Selendroid automation backend. It is usually the case that you\nalso need to use a \n.\n before your activity name (e.g., \n.MainActivity\n instead\nof \nMainActivity\n for your \nappActivity\n capability).\n\n\n// javascript\n{\n    automationName: 'Selendroid',\n    platformName: 'Android',\n    platformVersion: '2.3',\n    deviceName: 'Android Emulator',\n    app: myApp,\n    appPackage: 'com.mycompany.package',\n    appActivity: '.MainActivity'\n}\n\n\n\n\n# python\n{\n    'automationName': 'Selendroid',\n    'platformName': 'Android',\n    'platformVersion': '2.3',\n    'deviceName': 'Android Emulator',\n    'app': myApp,\n    'appPackage': 'com.mycompany.package',\n    'appActivity': '.MainActivity'\n}\n\n\n\n\n// php\npublic static $browsers = array(\n    array(\n        'desiredCapabilities' =\n array(\n            'automationName' =\n 'Selendroid',\n            'platformName' =\n 'Android',\n            'platformVersion' =\n '2.3',\n            'deviceName' =\n 'Android Emulator',\n            'app' =\n $myApp,\n            'appPackage' =\n 'com.mycompany.package',\n            'appActivity'=\n '.MainActivity'\n        )\n    )\n);\n\n\n\n\n// java\nDesiredCapabilities capabilities = new DesiredCapabilities();\ncapabilities.setCapability(MobileCapabilityType.AUTOMATION_NAME, \nSelendroid\n);\ncapabilities.setCapability(MobileCapabilityType.PLATFORM_NAME, \nAndroid\n);\ncapabilities.setCapability(MobileCapabilityType.PLATFORM_VERSION, \n2.3\n);\ncapabilities.setCapability(MobileCapabilityType.DEVICE_NAME, \nAndroid Emulator\n);\ncapabilities.setCapability(MobileCapabilityType.APP, myApp);\ncapabilities.setCapability(MobileCapabilityType.APP_PACKAGE: \ncom.mycompany.package\n);\ncapabilities.setCapability(MobileCapabilityType.APP_ACTIVITY: \n.MainActivity\n);\n\n\n\n\nNow Appium will start up a Selendroid test session instead of the default test\nsession. One of the downsides to using Selendroid is that its API differs\nsometimes significantly with Appium's. Therefore we recommend you thoroughly\nread \nSelendroid's documentation\n before\nwriting your scripts for older devices or hybrid apps.\n\n\nRunning your test app with Appium (Windows)\n\n\nSimply ensure that Appium is listening, and run your test with your test runner of choice.\n\n\nSee our \nsamples\n for details.", 
            "title": "Running tests"
        }, 
        {
            "location": "/writing-and-running/running-tests/#running-tests", 
            "text": "", 
            "title": "Running Tests"
        }, 
        {
            "location": "/writing-and-running/running-tests/#preparing-your-app-for-test-ios", 
            "text": "Test apps run on the simulator have to be compiled specifically for the\nsimulator, for example by executing the following command in the Xcode project (you can use  xcodebuild -showsdks  to see the list of available SDKs):   xcodebuild -sdk iphonesimulator6.0  This creates a  build/Release-iphonesimulator  directory in your Xcode project\nthat contains the  .app  package that you'll need to communicate with the\nAppium server.  If you want, you can zip up the .app directory into a .zip file! Appium will\nunpack it for you. Nice if you're not using Appium locally.", 
            "title": "Preparing your app for test (iOS)"
        }, 
        {
            "location": "/writing-and-running/running-tests/#preparing-your-app-for-test-android", 
            "text": "Nothing in particular needs to be done to run your .apk using Appium. If you\nwant to zip it up, you can.", 
            "title": "Preparing your app for test (Android)"
        }, 
        {
            "location": "/writing-and-running/running-tests/#preparing-your-app-for-test-windows", 
            "text": "Nothing in particular needs to be done to run your test.", 
            "title": "Preparing your app for test (Windows)"
        }, 
        {
            "location": "/writing-and-running/running-tests/#running-your-test-app-with-appium-ios", 
            "text": "The best way to see what to do currently is to look at the example tests:  Node.js  |  Python  |  PHP  |  Ruby  |  Java  Basically, first make sure Appium is running:  node .  Then script your WebDriver test, sending in the following desired capabilities:  // javascript\n{\n    platformName: 'iOS',\n    platformVersion: '7.1',\n    deviceName: 'iPhone Simulator',\n    app: myApp\n}  # python\n{\n    'platformName': 'iOS',\n    'platformVersion': '7.1',\n    'deviceName': 'iPhone Simulator',\n    'app': myApp\n}  // php\npublic static $browsers = array(\n    array(\n        'desiredCapabilities' =  array(\n            'platformName' =  'iOS',\n            'platformVersion' =  '7.1',\n            'deviceName' =  'iPhone Simulator',\n            'app' =  $myApp\n        )\n    )\n);  // java\nDesiredCapabilities capabilities = new DesiredCapabilities();\ncapabilities.setCapability(MobileCapabilityType.PLATFORM_NAME,  iOS );\ncapabilities.setCapability(MobileCapabilityType.PLATFORM_VERSION,  7.1 );\ncapabilities.setCapability(MobileCapabilityType.DEVICE_NAME,  iPhone Simulator );\ncapabilities.setCapability(MobileCapabilityType.APP, myApp);  In this set of capabilities,  myApp  must be either:   A local absolute path to your simulator-compiled .app directory or .zip  A url of a zip file containing your .app package  A path to one of the sample app relative to the appium install root   Using your WebDriver library of choice, set the remote session to use these\ncapabilities and connect to the server running at port 4723 of localhost (or\nwhatever host and port you specified when you started Appium). You should be\nall set now!", 
            "title": "Running your test app with Appium (iOS)"
        }, 
        {
            "location": "/writing-and-running/running-tests/#running-your-test-app-with-appium-android", 
            "text": "First, make sure you have one and only one Android emulator or device\nconnected. If you run  adb devices , for example, you should see one device\nconnected. This is the device Appium will use for tests. Of course, to have\na device connected, you'll need to have made an Android AVD (see system\nsetup ( Windows , Mac ,\nor  Linux )\nfor more information). If the Android SDK tools are on your path, you can\nsimply run:  emulator -avd  MyAvdName   And wait for the android emulator to finish launching. Sometimes, for various\nreasons,  adb  gets stuck. If it's not showing any connected devices or\notherwise failing, you can restart it by running:  adb kill-server   adb devices  Now, make sure Appium is running:  node .  There are several ways to start an Appium application (it works exactly\nthe same as when the application is started via adb):   apk or zip only, the default activity will be launched ('app' capability)  apk + activity ('app' + 'appActivity' capabilities)  apk + activity + intent ('app' + 'appActivity' + 'appIntent' capabilities)  ...   Activities may be specified in the following way:   absolute (e.g. appActivity: 'com.helloworld.SayHello').  relative to appPackage (e.g. appPackage: 'com.helloworld', appActivity='.SayHello')   If the 'appWaitPackage' and 'appWaitActivity' caps are specified, Appium\nautomatically spins until those activities are launched. You may specify\nmultiple wait activities for instance:   appActivity: 'com.splash.SplashScreen'  appPackage: 'com.splash' appActivity: '.SplashScreen'  appPackage: 'com.splash' appActivity: '.SplashScreen,.LandingPage,com.why.GoThere'   If you are not sure what activity are configured in your apk, you can\nproceed in one of the following ways:   Mac/Linux: 'adb shell dumpsys window windows | grep mFocusedApp'  In the Ruby console: 'adb shell dumpsys window windows`.each_line.grep(/mFocusedApp/).first.strip'  In Windows terminal run 'adb shell dumpsys window windows' and manually look for the mFocusedApp line.   Then script your WebDriver test, sending in the following desired capabilities:  // javascript\n{\n    platformName: 'Android',\n    platformVersion: '4.4',\n    deviceName: 'Android Emulator',\n    app: myApp\n}  # python\n{\n    'platformName': 'Android',\n    'platformVersion': '4.4',\n    'deviceName': 'Android Emulator',\n    'app': myApp\n}  // php\npublic static $browsers = array(\n    array(\n        'desiredCapabilities' =  array(\n            'platformName' =  'Android',\n            'platformVersion' =  '4.4',\n            'deviceName' =  'Android Emulator',\n            'app' =  $myApp\n        )\n    )\n);  // java\nDesiredCapabilities capabilities = new DesiredCapabilities();\ncapabilities.setCapability(MobileCapabilityType.PLATFORM_NAME,  Android );\ncapabilities.setCapability(MobileCapabilityType.PLATFORM_VERSION,  4.4 );\ncapabilities.setCapability(MobileCapabilityType.DEVICE_NAME,  Android Emulator );\ncapabilities.setCapability(MobileCapabilityType.APP, myApp);  In this set of capabilities,  myApp  must be either:   A local absolute path to your .apk or a .zip of it  A url of a zip file containing your .apk  A path to one of the sample app relative to the appium install root   Using your WebDriver library of choice, set the remote session to use these\ncapabilities and connect to the server running at port 4723 of localhost (or\nwhatever host and port you specified when you started Appium). You should be\nall set now!", 
            "title": "Running your test app with Appium (Android)"
        }, 
        {
            "location": "/writing-and-running/running-tests/#running-your-test-app-with-appium-android-devices-42-and-hybrid-tests", 
            "text": "Android devices before version 4.2 (API Level 17) do not have Google's UiAutomator framework \ninstalled. This is what Appium uses to perform the automation behaviors on\nthe device. For earlier devices or tests of hybrid (webview-based) apps,\nAppium comes bundled with another automation backend called [Selendroid]\n(http://selendroid.io/).  To use Selendroid, all that is required is to slightly change the set of\ndesired capabilities mentioned above, by adding the  automationName  capability\nand specifying the Selendroid automation backend. It is usually the case that you\nalso need to use a  .  before your activity name (e.g.,  .MainActivity  instead\nof  MainActivity  for your  appActivity  capability).  // javascript\n{\n    automationName: 'Selendroid',\n    platformName: 'Android',\n    platformVersion: '2.3',\n    deviceName: 'Android Emulator',\n    app: myApp,\n    appPackage: 'com.mycompany.package',\n    appActivity: '.MainActivity'\n}  # python\n{\n    'automationName': 'Selendroid',\n    'platformName': 'Android',\n    'platformVersion': '2.3',\n    'deviceName': 'Android Emulator',\n    'app': myApp,\n    'appPackage': 'com.mycompany.package',\n    'appActivity': '.MainActivity'\n}  // php\npublic static $browsers = array(\n    array(\n        'desiredCapabilities' =  array(\n            'automationName' =  'Selendroid',\n            'platformName' =  'Android',\n            'platformVersion' =  '2.3',\n            'deviceName' =  'Android Emulator',\n            'app' =  $myApp,\n            'appPackage' =  'com.mycompany.package',\n            'appActivity'=  '.MainActivity'\n        )\n    )\n);  // java\nDesiredCapabilities capabilities = new DesiredCapabilities();\ncapabilities.setCapability(MobileCapabilityType.AUTOMATION_NAME,  Selendroid );\ncapabilities.setCapability(MobileCapabilityType.PLATFORM_NAME,  Android );\ncapabilities.setCapability(MobileCapabilityType.PLATFORM_VERSION,  2.3 );\ncapabilities.setCapability(MobileCapabilityType.DEVICE_NAME,  Android Emulator );\ncapabilities.setCapability(MobileCapabilityType.APP, myApp);\ncapabilities.setCapability(MobileCapabilityType.APP_PACKAGE:  com.mycompany.package );\ncapabilities.setCapability(MobileCapabilityType.APP_ACTIVITY:  .MainActivity );  Now Appium will start up a Selendroid test session instead of the default test\nsession. One of the downsides to using Selendroid is that its API differs\nsometimes significantly with Appium's. Therefore we recommend you thoroughly\nread  Selendroid's documentation  before\nwriting your scripts for older devices or hybrid apps.", 
            "title": "Running your test app with Appium (Android devices &lt; 4.2, and hybrid tests)"
        }, 
        {
            "location": "/writing-and-running/running-tests/#running-your-test-app-with-appium-windows", 
            "text": "Simply ensure that Appium is listening, and run your test with your test runner of choice.  See our  samples  for details.", 
            "title": "Running your test app with Appium (Windows)"
        }, 
        {
            "location": "/writing-and-running/safari-launcher/", 
            "text": "Mobile Web on iOS 9.3 and below Real Devices: SafariLauncher\n\n\nRunning mobile web tests on iOS real devices with iOS 9.3 or below, using Instruments,\nrequires the introduction of a third-party app, \nSafariLauncher\n.\nThis is necessary because with Instruments there is no way to start the Safari\napp on the device. The \nSafariLauncher\n app just launches, and then launches\nSafari. Simple!\n\n\nIn some configurations, Appium is able to automatically build, sign, and install\n\nSafariLauncher\n as it needs, and there is nothing else necessary to be done. If,\nhowever, this is not the case, as is more often so with later versions of\n\nXcode\n, the following configuration needs to\nbe done before Safari tests on real devices can be successfully run.\n\n\nAutomatic SafariLauncher configuration\n\n\nThe only thing needed for automatic \nSafariLauncher\n configuration is to create\na \nprovisioning profile\n that can be used to deploy the \nSafariLauncher\n App.\nThis requires, in particular, a wildcard certificate, which is not possible if\nyour Apple developer account is a free one. If that is the case, skip to the\nmanual configuration below.\n\n\nTo create a profile for the launcher go into the \nApple Developers Member Center\n and:\n\n\n\n\nStep 1:\n Create a \nnew App Id\n and select the WildCard App ID option and set it to \"*\"\n\n\nStep 2:\n Create a \nnew Development Profile\n and for App Id select the one created in step 1.\n\n\nStep 3:\n Select your \ncertificate(s) and device(s)\n and click next.\n\n\nStep 4:\n Set the profile name and \ngenerate the profile\n.\n\n\nStep 5:\n Download the profile and open it with a text editor.\n\n\nStep 6:\n Search for the \nUUID\n and the string for it is your \nidentity code\n.\n\n\n\n\nNow simply include your UDID and device name in your desired capabilities:\n\n\n{\n  udid: '...',\n  deviceName: '...',\n  platformName: 'iOS',\n  platformVersion: '9.3',\n  browserName: 'Safari'\n}\n\n\n\n\nManual SafariLauncher configuration\n\n\nNote:\n This procedure assumes you have \nXcode\n 7.3 or 7.3.1.\n\n\nIt is possible to use the version of \nSafariLauncher\n\nthat comes with the \nappium-ios-driver\n,\nbut if you do, each time you update Appium the procedure will have to be done again.\n\n\nTo get a local copy of \nSafariLauncher\n, first clone it from \nGitHub\n:\n\n\ngit clone https://github.com/snevesbarros/SafariLauncher.git\n\n\n\n\nOnce you have a local copy of the source code for the \nSafariLauncher\n app, open\n\nXcode\n and then open the \nSafariLauncher\n project\n\n\n\n\nIn the \nSafariLauncher\n target pane you will see an error, saying that there needs\nto be a provisioning profile for this app\n\n\n\n\nIn order to fix this, you first need to enter a \"Bundle Identifier\" for the app. The default\nexpected by Appium is \ncom.bytearc.SafariLauncher\n, but this might not be available\nfor you to build. In that case, choose something else, and make note of it. Then\nchoose a \"Team\", and allow the provisioning profile to be created\n\n\n\n\nFinally, make sure your device is connected to the computer, and choose it as the\ntarget\n\n\n\n\nAnd run the build and install actions to compile the app and push it onto your\ndevice\n\n\n\n\nNow you have a working \nSafariLauncher\n on your device. The app itself is a plain\nscreen that will launch \nSafari\n at the click of a button\n\n\n\n\nThe last step is only necessary if you chose a bundle identifier for the app that\nis different from the default (\ncom.bytearc.SafariLauncher\n). If you did, it is\nnecessary to send that to Appium when creating a session, using the \nbundleId\n\ndesired capability:\n\n\n{\n  udid: '...',\n  deviceName: '...',\n  platformName: 'iOS',\n  platformVersion: '9.3',\n  browserName: 'Safari',\n  bundleId: 'com.imurchie.SafariLauncher'\n}", 
            "title": "Safari launcher"
        }, 
        {
            "location": "/writing-and-running/safari-launcher/#mobile-web-on-ios-93-and-below-real-devices-safarilauncher", 
            "text": "Running mobile web tests on iOS real devices with iOS 9.3 or below, using Instruments,\nrequires the introduction of a third-party app,  SafariLauncher .\nThis is necessary because with Instruments there is no way to start the Safari\napp on the device. The  SafariLauncher  app just launches, and then launches\nSafari. Simple!  In some configurations, Appium is able to automatically build, sign, and install SafariLauncher  as it needs, and there is nothing else necessary to be done. If,\nhowever, this is not the case, as is more often so with later versions of Xcode , the following configuration needs to\nbe done before Safari tests on real devices can be successfully run.", 
            "title": "Mobile Web on iOS 9.3 and below Real Devices: SafariLauncher"
        }, 
        {
            "location": "/writing-and-running/safari-launcher/#automatic-safarilauncher-configuration", 
            "text": "The only thing needed for automatic  SafariLauncher  configuration is to create\na  provisioning profile  that can be used to deploy the  SafariLauncher  App.\nThis requires, in particular, a wildcard certificate, which is not possible if\nyour Apple developer account is a free one. If that is the case, skip to the\nmanual configuration below.  To create a profile for the launcher go into the  Apple Developers Member Center  and:   Step 1:  Create a  new App Id  and select the WildCard App ID option and set it to \"*\"  Step 2:  Create a  new Development Profile  and for App Id select the one created in step 1.  Step 3:  Select your  certificate(s) and device(s)  and click next.  Step 4:  Set the profile name and  generate the profile .  Step 5:  Download the profile and open it with a text editor.  Step 6:  Search for the  UUID  and the string for it is your  identity code .   Now simply include your UDID and device name in your desired capabilities:  {\n  udid: '...',\n  deviceName: '...',\n  platformName: 'iOS',\n  platformVersion: '9.3',\n  browserName: 'Safari'\n}", 
            "title": "Automatic SafariLauncher configuration"
        }, 
        {
            "location": "/writing-and-running/safari-launcher/#manual-safarilauncher-configuration", 
            "text": "Note:  This procedure assumes you have  Xcode  7.3 or 7.3.1.  It is possible to use the version of  SafariLauncher \nthat comes with the  appium-ios-driver ,\nbut if you do, each time you update Appium the procedure will have to be done again.  To get a local copy of  SafariLauncher , first clone it from  GitHub :  git clone https://github.com/snevesbarros/SafariLauncher.git  Once you have a local copy of the source code for the  SafariLauncher  app, open Xcode  and then open the  SafariLauncher  project   In the  SafariLauncher  target pane you will see an error, saying that there needs\nto be a provisioning profile for this app   In order to fix this, you first need to enter a \"Bundle Identifier\" for the app. The default\nexpected by Appium is  com.bytearc.SafariLauncher , but this might not be available\nfor you to build. In that case, choose something else, and make note of it. Then\nchoose a \"Team\", and allow the provisioning profile to be created   Finally, make sure your device is connected to the computer, and choose it as the\ntarget   And run the build and install actions to compile the app and push it onto your\ndevice   Now you have a working  SafariLauncher  on your device. The app itself is a plain\nscreen that will launch  Safari  at the click of a button   The last step is only necessary if you chose a bundle identifier for the app that\nis different from the default ( com.bytearc.SafariLauncher ). If you did, it is\nnecessary to send that to Appium when creating a session, using the  bundleId \ndesired capability:  {\n  udid: '...',\n  deviceName: '...',\n  platformName: 'iOS',\n  platformVersion: '9.3',\n  browserName: 'Safari',\n  bundleId: 'com.imurchie.SafariLauncher'\n}", 
            "title": "Manual SafariLauncher configuration"
        }, 
        {
            "location": "/writing-and-running/server-args/", 
            "text": "Appium server arguments\n\n\nMany Appium 1.5 server arguments have been deprecated in favor of the \n--default-capabilities flag\n.\n\n\nUsage: \nnode . [flags]\n\n\nServer flags\n\n\nAll flags are optional, but some are required in conjunction with certain others.\n\n\n\n\n\n\n\n\n\n\nFlag\n\n\nDefault\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\n--shell\n\n\nnull\n\n\nEnter REPL mode\n\n\n\n\n\n\n\n\n--ipa\n\n\nnull\n\n\n(IOS-only) abs path to compiled .ipa file\n\n\n--ipa /abs/path/to/my.ipa\n\n\n\n\n\n\n-a\n, \n--address\n\n\n0.0.0.0\n\n\nIP Address to listen on\n\n\n--address 0.0.0.0\n\n\n\n\n\n\n-p\n, \n--port\n\n\n4723\n\n\nport to listen on\n\n\n--port 4723\n\n\n\n\n\n\n-ca\n, \n--callback-address\n\n\nnull\n\n\ncallback IP Address (default: same as --address)\n\n\n--callback-address 127.0.0.1\n\n\n\n\n\n\n-cp\n, \n--callback-port\n\n\nnull\n\n\ncallback port (default: same as port)\n\n\n--callback-port 4723\n\n\n\n\n\n\n-bp\n, \n--bootstrap-port\n\n\n4724\n\n\n(Android-only) port to use on device to talk to Appium\n\n\n--bootstrap-port 4724\n\n\n\n\n\n\n-r\n, \n--backend-retries\n\n\n3\n\n\n(iOS-only) How many times to retry launching Instruments before saying it crashed or timed out\n\n\n--backend-retries 3\n\n\n\n\n\n\n--session-override\n\n\nfalse\n\n\nEnables session override (clobbering)\n\n\n\n\n\n\n\n\n-l\n, \n--pre-launch\n\n\nfalse\n\n\nPre-launch the application before allowing the first session (Requires --app and, for Android, --app-pkg and --app-activity)\n\n\n\n\n\n\n\n\n-g\n, \n--log\n\n\nnull\n\n\nAlso send log output to this file\n\n\n--log /path/to/appium.log\n\n\n\n\n\n\n--log-level\n\n\ndebug\n\n\nlog level; default (console[:file]): debug[:debug]\n\n\n--log-level debug\n\n\n\n\n\n\n--log-timestamp\n\n\nfalse\n\n\nShow timestamps in console output\n\n\n\n\n\n\n\n\n--local-timezone\n\n\nfalse\n\n\nUse local timezone for timestamps\n\n\n\n\n\n\n\n\n--log-no-colors\n\n\nfalse\n\n\nDo not use colors in console output\n\n\n\n\n\n\n\n\n-G\n, \n--webhook\n\n\nnull\n\n\nAlso send log output to this HTTP listener\n\n\n--webhook localhost:9876\n\n\n\n\n\n\n--safari\n\n\nfalse\n\n\n(IOS-Only) Use the safari app\n\n\n\n\n\n\n\n\n--default-device\n, \n-dd\n\n\nfalse\n\n\n(IOS-Simulator-only) use the default simulator that instruments launches on its own\n\n\n\n\n\n\n\n\n--force-iphone\n\n\nfalse\n\n\n(IOS-only) Use the iPhone Simulator no matter what the app wants\n\n\n\n\n\n\n\n\n--force-ipad\n\n\nfalse\n\n\n(IOS-only) Use the iPad Simulator no matter what the app wants\n\n\n\n\n\n\n\n\n--tracetemplate\n\n\nnull\n\n\n(IOS-only) .tracetemplate file to use with Instruments\n\n\n--tracetemplate /Users/me/Automation.tracetemplate\n\n\n\n\n\n\n--instruments\n\n\nnull\n\n\n(IOS-only) path to instruments binary\n\n\n--instruments /path/to/instruments\n\n\n\n\n\n\n--nodeconfig\n\n\nnull\n\n\nConfiguration JSON file to register appium with selenium grid\n\n\n--nodeconfig /abs/path/to/nodeconfig.json\n\n\n\n\n\n\n-ra\n, \n--robot-address\n\n\n0.0.0.0\n\n\nIP Address of robot\n\n\n--robot-address 0.0.0.0\n\n\n\n\n\n\n-rp\n, \n--robot-port\n\n\n-1\n\n\nport for robot\n\n\n--robot-port 4242\n\n\n\n\n\n\n--selendroid-port\n\n\n8080\n\n\nLocal port used for communication with Selendroid\n\n\n--selendroid-port 8080\n\n\n\n\n\n\n--chromedriver-port\n\n\n9515\n\n\nPort upon which ChromeDriver will run\n\n\n--chromedriver-port 9515\n\n\n\n\n\n\n--chromedriver-executable\n\n\nnull\n\n\nChromeDriver executable full path\n\n\n\n\n\n\n\n\n--show-config\n\n\nfalse\n\n\nShow info about the appium server configuration and exit\n\n\n\n\n\n\n\n\n--no-perms-check\n\n\nfalse\n\n\nBypass Appium's checks to ensure we can read/write necessary files\n\n\n\n\n\n\n\n\n--strict-caps\n\n\nfalse\n\n\nCause sessions to fail if desired caps are sent in that Appium does not recognize as valid for the selected device\n\n\n\n\n\n\n\n\n--isolate-sim-device\n\n\nfalse\n\n\nXcode 6 has a bug on some platforms where a certain simulator can only be launched without error if all other simulator devices are first deleted. This option causes Appium to delete all devices other than the one being used by Appium. Note that this is a permanent deletion, and you are responsible for using simctl or xcode to manage the categories of devices used with Appium.\n\n\n\n\n\n\n\n\n--tmp\n\n\nnull\n\n\nAbsolute path to directory Appium can use to manage temporary files, like built-in iOS apps it needs to move around. On *nix/Mac defaults to /tmp, on Windows defaults to C:\\Windows\\Temp\n\n\n\n\n\n\n\n\n--trace-dir\n\n\nnull\n\n\nAbsolute path to directory Appium use to save ios instruments traces, defaults to \n/appium-instruments\n\n\n\n\n\n\n\n\n--debug-log-spacing\n\n\nfalse\n\n\nAdd exaggerated spacing in logs to help with visual inspection\n\n\n\n\n\n\n\n\n--suppress-adb-kill-server\n\n\nfalse\n\n\n(Android-only) If set, prevents Appium from killing the adb server instance\n\n\n\n\n\n\n\n\n--async-trace\n\n\nfalse\n\n\nAdd long stack traces to log entries. Recommended for debugging only.\n\n\n\n\n\n\n\n\n--webkit-debug-proxy-port\n\n\n27753\n\n\n(IOS-only) Local port used for communication with ios-webkit-debug-proxy\n\n\n--webkit-debug-proxy-port 27753\n\n\n\n\n\n\n-dc\n, \n--default-capabilities\n\n\n{}\n\n\nSet the default desired capabilities, which will be set on each session unless overridden by received capabilities.\n\n\n--default-capabilities [ '{\"app\": \"myapp.app\", \"deviceName\": \"iPhone Simulator\"}' | /path/to/caps.json ]\n\n\n\n\n\n\n--reboot\n\n\nfalse\n\n\n- (Android-only) reboot emulator after each session and kill it at the end\n\n\n\n\n\n\n\n\n--command-timeout\n\n\n60\n\n\n[DEPRECATED] No effect. This used to be the default command timeout for the server to use for all sessions (in seconds and should be less than 2147483). Use newCommandTimeout cap instead\n\n\n\n\n\n\n\n\n-k\n, \n--keep-artifacts\n\n\nfalse\n\n\n[DEPRECATED] - no effect, trace is now in tmp dir by default and is cleared before each run. Please also refer to the --trace-dir flag.\n\n\n\n\n\n\n\n\n--platform-name\n\n\nnull\n\n\n[DEPRECATED] - Name of the mobile platform: iOS, Android, or FirefoxOS\n\n\n--platform-name iOS\n\n\n\n\n\n\n--platform-version\n\n\nnull\n\n\n[DEPRECATED] - Version of the mobile platform\n\n\n--platform-version 7.1\n\n\n\n\n\n\n--automation-name\n\n\nnull\n\n\n[DEPRECATED] - Name of the automation tool: Appium or Selendroid\n\n\n--automation-name Appium\n\n\n\n\n\n\n--device-name\n\n\nnull\n\n\n[DEPRECATED] - Name of the mobile device to use\n\n\n--device-name iPhone Retina (4-inch), Android Emulator\n\n\n\n\n\n\n--browser-name\n\n\nnull\n\n\n[DEPRECATED] - Name of the mobile browser: Safari or Chrome\n\n\n--browser-name Safari\n\n\n\n\n\n\n--app\n\n\nnull\n\n\n[DEPRECATED] - IOS: abs path to simulator-compiled .app file or the bundle_id of the desired target on device; Android: abs path to .apk file\n\n\n--app /abs/path/to/my.app\n\n\n\n\n\n\n-lt\n, \n--launch-timeout\n\n\n90000\n\n\n[DEPRECATED] - (iOS-only) how long in ms to wait for Instruments to launch\n\n\n\n\n\n\n\n\n--language\n\n\nnull\n\n\n[DEPRECATED] - Language for the iOS simulator / Android Emulator\n\n\n--language en\n\n\n\n\n\n\n--locale\n\n\nnull\n\n\n[DEPRECATED] - Locale for the iOS simulator / Android Emulator\n\n\n--locale en_US\n\n\n\n\n\n\n-U\n, \n--udid\n\n\nnull\n\n\n[DEPRECATED] - Unique device identifier of the connected physical device\n\n\n--udid 1adsf-sdfas-asdf-123sdf\n\n\n\n\n\n\n--orientation\n\n\nnull\n\n\n[DEPRECATED] - (IOS-only) use LANDSCAPE or PORTRAIT to initialize all requests to this orientation\n\n\n--orientation LANDSCAPE\n\n\n\n\n\n\n--no-reset\n\n\nfalse\n\n\n[DEPRECATED] - Do not reset app state between sessions (IOS: do not delete app plist files; Android: do not uninstall app before new session)\n\n\n\n\n\n\n\n\n--full-reset\n\n\nfalse\n\n\n[DEPRECATED] - (iOS) Delete the entire simulator folder. (Android) Reset app state by uninstalling app instead of clearing app data. On Android, this will also remove the app after the session is complete.\n\n\n\n\n\n\n\n\n--app-pkg\n\n\nnull\n\n\n[DEPRECATED] - (Android-only) Java package of the Android app you want to run (e.g., com.example.android.myApp)\n\n\n--app-pkg com.example.android.myApp\n\n\n\n\n\n\n--app-activity\n\n\nnull\n\n\n[DEPRECATED] - (Android-only) Activity name for the Android activity you want to launch from your package (e.g., MainActivity)\n\n\n--app-activity MainActivity\n\n\n\n\n\n\n--app-wait-package\n\n\nfalse\n\n\n[DEPRECATED] - (Android-only) Package name for the Android activity you want to wait for (e.g., com.example.android.myApp)\n\n\n--app-wait-package com.example.android.myApp\n\n\n\n\n\n\n--app-wait-activity\n\n\nfalse\n\n\n[DEPRECATED] - (Android-only) Activity name for the Android activity you want to wait for (e.g., SplashActivity)\n\n\n--app-wait-activity SplashActivity\n\n\n\n\n\n\n--device-ready-timeout\n\n\n5\n\n\n[DEPRECATED] - (Android-only) Timeout in seconds while waiting for device to become ready\n\n\n--device-ready-timeout 5\n\n\n\n\n\n\n--android-coverage\n\n\nfalse\n\n\n[DEPRECATED] - (Android-only) Fully qualified instrumentation class. Passed to -w in adb shell am instrument -e coverage true -w\n\n\n--android-coverage com.my.Pkg/com.my.Pkg.instrumentation.MyInstrumentation\n\n\n\n\n\n\n--avd\n\n\nnull\n\n\n[DEPRECATED] - (Android-only) Name of the avd to launch\n\n\n--avd @default\n\n\n\n\n\n\n--avd-args\n\n\nnull\n\n\n[DEPRECATED] - (Android-only) Additional emulator arguments to launch the avd\n\n\n--avd-args -no-snapshot-load\n\n\n\n\n\n\n--use-keystore\n\n\nfalse\n\n\n[DEPRECATED] - (Android-only) When set the keystore will be used to sign apks.\n\n\n\n\n\n\n\n\n--keystore-path\n\n\nuser\n/.android/debug.keystore\n\n\n[DEPRECATED] - (Android-only) Path to keystore\n\n\n\n\n\n\n\n\n--keystore-password\n\n\nandroid\n\n\n[DEPRECATED] - (Android-only) Password to keystore\n\n\n\n\n\n\n\n\n--key-alias\n\n\nandroiddebugkey\n\n\n[DEPRECATED] - (Android-only) Key alias\n\n\n\n\n\n\n\n\n--key-password\n\n\nandroid\n\n\n[DEPRECATED] - (Android-only) Key password\n\n\n\n\n\n\n\n\n--intent-action\n\n\nandroid.intent.action.MAIN\n\n\n[DEPRECATED] - (Android-only) Intent action which will be used to start activity\n\n\n--intent-action android.intent.action.MAIN\n\n\n\n\n\n\n--intent-category\n\n\nandroid.intent.category.LAUNCHER\n\n\n[DEPRECATED] - (Android-only) Intent category which will be used to start activity\n\n\n--intent-category android.intent.category.APP_CONTACTS\n\n\n\n\n\n\n--intent-flags\n\n\n0x10200000\n\n\n[DEPRECATED] - (Android-only) Flags that will be used to start activity\n\n\n--intent-flags 0x10200000\n\n\n\n\n\n\n--intent-args\n\n\nnull\n\n\n[DEPRECATED] - (Android-only) Additional intent arguments that will be used to start activity\n\n\n--intent-args 0x10200000\n\n\n\n\n\n\n--dont-stop-app-on-reset\n\n\nfalse\n\n\n[DEPRECATED] - (Android-only) When included, refrains from stopping the app before restart\n\n\n\n\n\n\n\n\n--calendar-format\n\n\nnull\n\n\n[DEPRECATED] - (IOS-only) calendar format for the iOS simulator\n\n\n--calendar-format gregorian\n\n\n\n\n\n\n--native-instruments-lib\n\n\nfalse\n\n\n[DEPRECATED] - (IOS-only) IOS has a weird built-in unavoidable delay. We patch this in appium. If you do not want it patched, pass in this flag.\n\n\n\n\n\n\n\n\n--keep-keychains\n\n\nfalse\n\n\n[DEPRECATED] - (iOS-only) Whether to keep keychains (Library/Keychains) when reset app between sessions\n\n\n\n\n\n\n\n\n--localizable-strings-dir\n\n\nen.lproj\n\n\n[DEPRECATED] - (IOS-only) the relative path of the dir where Localizable.strings file resides\n\n\n--localizable-strings-dir en.lproj\n\n\n\n\n\n\n--show-ios-log\n\n\nfalse\n\n\n[DEPRECATED] - (IOS-only) if set, the iOS system log will be written to the console\n\n\n\n\n\n\n\n\n--enable-heapdump\n\n\nfalse\n\n\nEnables NodeJS memory dumps collection feature. This feature is extremely useful for finding memory leaks. Use the 'kill -SIGUSR2 \nPID\n' command to create a dump of memory heap for \nnode\n process with the particular PID (this works for \nnix systems only). The dump file will be created in the same folder, where main Appium script was executed and will have \n.heapsnapshot extension. These snapshot can be then loaded to Chrome Inspector for further investigation. Read the \nRising Stack article\n for more details.", 
            "title": "Server args"
        }, 
        {
            "location": "/writing-and-running/server-args/#appium-server-arguments", 
            "text": "Many Appium 1.5 server arguments have been deprecated in favor of the  --default-capabilities flag .  Usage:  node . [flags]", 
            "title": "Appium server arguments"
        }, 
        {
            "location": "/writing-and-running/server-args/#server-flags", 
            "text": "All flags are optional, but some are required in conjunction with certain others.      Flag  Default  Description  Example      --shell  null  Enter REPL mode     --ipa  null  (IOS-only) abs path to compiled .ipa file  --ipa /abs/path/to/my.ipa    -a ,  --address  0.0.0.0  IP Address to listen on  --address 0.0.0.0    -p ,  --port  4723  port to listen on  --port 4723    -ca ,  --callback-address  null  callback IP Address (default: same as --address)  --callback-address 127.0.0.1    -cp ,  --callback-port  null  callback port (default: same as port)  --callback-port 4723    -bp ,  --bootstrap-port  4724  (Android-only) port to use on device to talk to Appium  --bootstrap-port 4724    -r ,  --backend-retries  3  (iOS-only) How many times to retry launching Instruments before saying it crashed or timed out  --backend-retries 3    --session-override  false  Enables session override (clobbering)     -l ,  --pre-launch  false  Pre-launch the application before allowing the first session (Requires --app and, for Android, --app-pkg and --app-activity)     -g ,  --log  null  Also send log output to this file  --log /path/to/appium.log    --log-level  debug  log level; default (console[:file]): debug[:debug]  --log-level debug    --log-timestamp  false  Show timestamps in console output     --local-timezone  false  Use local timezone for timestamps     --log-no-colors  false  Do not use colors in console output     -G ,  --webhook  null  Also send log output to this HTTP listener  --webhook localhost:9876    --safari  false  (IOS-Only) Use the safari app     --default-device ,  -dd  false  (IOS-Simulator-only) use the default simulator that instruments launches on its own     --force-iphone  false  (IOS-only) Use the iPhone Simulator no matter what the app wants     --force-ipad  false  (IOS-only) Use the iPad Simulator no matter what the app wants     --tracetemplate  null  (IOS-only) .tracetemplate file to use with Instruments  --tracetemplate /Users/me/Automation.tracetemplate    --instruments  null  (IOS-only) path to instruments binary  --instruments /path/to/instruments    --nodeconfig  null  Configuration JSON file to register appium with selenium grid  --nodeconfig /abs/path/to/nodeconfig.json    -ra ,  --robot-address  0.0.0.0  IP Address of robot  --robot-address 0.0.0.0    -rp ,  --robot-port  -1  port for robot  --robot-port 4242    --selendroid-port  8080  Local port used for communication with Selendroid  --selendroid-port 8080    --chromedriver-port  9515  Port upon which ChromeDriver will run  --chromedriver-port 9515    --chromedriver-executable  null  ChromeDriver executable full path     --show-config  false  Show info about the appium server configuration and exit     --no-perms-check  false  Bypass Appium's checks to ensure we can read/write necessary files     --strict-caps  false  Cause sessions to fail if desired caps are sent in that Appium does not recognize as valid for the selected device     --isolate-sim-device  false  Xcode 6 has a bug on some platforms where a certain simulator can only be launched without error if all other simulator devices are first deleted. This option causes Appium to delete all devices other than the one being used by Appium. Note that this is a permanent deletion, and you are responsible for using simctl or xcode to manage the categories of devices used with Appium.     --tmp  null  Absolute path to directory Appium can use to manage temporary files, like built-in iOS apps it needs to move around. On *nix/Mac defaults to /tmp, on Windows defaults to C:\\Windows\\Temp     --trace-dir  null  Absolute path to directory Appium use to save ios instruments traces, defaults to  /appium-instruments     --debug-log-spacing  false  Add exaggerated spacing in logs to help with visual inspection     --suppress-adb-kill-server  false  (Android-only) If set, prevents Appium from killing the adb server instance     --async-trace  false  Add long stack traces to log entries. Recommended for debugging only.     --webkit-debug-proxy-port  27753  (IOS-only) Local port used for communication with ios-webkit-debug-proxy  --webkit-debug-proxy-port 27753    -dc ,  --default-capabilities  {}  Set the default desired capabilities, which will be set on each session unless overridden by received capabilities.  --default-capabilities [ '{\"app\": \"myapp.app\", \"deviceName\": \"iPhone Simulator\"}' | /path/to/caps.json ]    --reboot  false  - (Android-only) reboot emulator after each session and kill it at the end     --command-timeout  60  [DEPRECATED] No effect. This used to be the default command timeout for the server to use for all sessions (in seconds and should be less than 2147483). Use newCommandTimeout cap instead     -k ,  --keep-artifacts  false  [DEPRECATED] - no effect, trace is now in tmp dir by default and is cleared before each run. Please also refer to the --trace-dir flag.     --platform-name  null  [DEPRECATED] - Name of the mobile platform: iOS, Android, or FirefoxOS  --platform-name iOS    --platform-version  null  [DEPRECATED] - Version of the mobile platform  --platform-version 7.1    --automation-name  null  [DEPRECATED] - Name of the automation tool: Appium or Selendroid  --automation-name Appium    --device-name  null  [DEPRECATED] - Name of the mobile device to use  --device-name iPhone Retina (4-inch), Android Emulator    --browser-name  null  [DEPRECATED] - Name of the mobile browser: Safari or Chrome  --browser-name Safari    --app  null  [DEPRECATED] - IOS: abs path to simulator-compiled .app file or the bundle_id of the desired target on device; Android: abs path to .apk file  --app /abs/path/to/my.app    -lt ,  --launch-timeout  90000  [DEPRECATED] - (iOS-only) how long in ms to wait for Instruments to launch     --language  null  [DEPRECATED] - Language for the iOS simulator / Android Emulator  --language en    --locale  null  [DEPRECATED] - Locale for the iOS simulator / Android Emulator  --locale en_US    -U ,  --udid  null  [DEPRECATED] - Unique device identifier of the connected physical device  --udid 1adsf-sdfas-asdf-123sdf    --orientation  null  [DEPRECATED] - (IOS-only) use LANDSCAPE or PORTRAIT to initialize all requests to this orientation  --orientation LANDSCAPE    --no-reset  false  [DEPRECATED] - Do not reset app state between sessions (IOS: do not delete app plist files; Android: do not uninstall app before new session)     --full-reset  false  [DEPRECATED] - (iOS) Delete the entire simulator folder. (Android) Reset app state by uninstalling app instead of clearing app data. On Android, this will also remove the app after the session is complete.     --app-pkg  null  [DEPRECATED] - (Android-only) Java package of the Android app you want to run (e.g., com.example.android.myApp)  --app-pkg com.example.android.myApp    --app-activity  null  [DEPRECATED] - (Android-only) Activity name for the Android activity you want to launch from your package (e.g., MainActivity)  --app-activity MainActivity    --app-wait-package  false  [DEPRECATED] - (Android-only) Package name for the Android activity you want to wait for (e.g., com.example.android.myApp)  --app-wait-package com.example.android.myApp    --app-wait-activity  false  [DEPRECATED] - (Android-only) Activity name for the Android activity you want to wait for (e.g., SplashActivity)  --app-wait-activity SplashActivity    --device-ready-timeout  5  [DEPRECATED] - (Android-only) Timeout in seconds while waiting for device to become ready  --device-ready-timeout 5    --android-coverage  false  [DEPRECATED] - (Android-only) Fully qualified instrumentation class. Passed to -w in adb shell am instrument -e coverage true -w  --android-coverage com.my.Pkg/com.my.Pkg.instrumentation.MyInstrumentation    --avd  null  [DEPRECATED] - (Android-only) Name of the avd to launch  --avd @default    --avd-args  null  [DEPRECATED] - (Android-only) Additional emulator arguments to launch the avd  --avd-args -no-snapshot-load    --use-keystore  false  [DEPRECATED] - (Android-only) When set the keystore will be used to sign apks.     --keystore-path  user /.android/debug.keystore  [DEPRECATED] - (Android-only) Path to keystore     --keystore-password  android  [DEPRECATED] - (Android-only) Password to keystore     --key-alias  androiddebugkey  [DEPRECATED] - (Android-only) Key alias     --key-password  android  [DEPRECATED] - (Android-only) Key password     --intent-action  android.intent.action.MAIN  [DEPRECATED] - (Android-only) Intent action which will be used to start activity  --intent-action android.intent.action.MAIN    --intent-category  android.intent.category.LAUNCHER  [DEPRECATED] - (Android-only) Intent category which will be used to start activity  --intent-category android.intent.category.APP_CONTACTS    --intent-flags  0x10200000  [DEPRECATED] - (Android-only) Flags that will be used to start activity  --intent-flags 0x10200000    --intent-args  null  [DEPRECATED] - (Android-only) Additional intent arguments that will be used to start activity  --intent-args 0x10200000    --dont-stop-app-on-reset  false  [DEPRECATED] - (Android-only) When included, refrains from stopping the app before restart     --calendar-format  null  [DEPRECATED] - (IOS-only) calendar format for the iOS simulator  --calendar-format gregorian    --native-instruments-lib  false  [DEPRECATED] - (IOS-only) IOS has a weird built-in unavoidable delay. We patch this in appium. If you do not want it patched, pass in this flag.     --keep-keychains  false  [DEPRECATED] - (iOS-only) Whether to keep keychains (Library/Keychains) when reset app between sessions     --localizable-strings-dir  en.lproj  [DEPRECATED] - (IOS-only) the relative path of the dir where Localizable.strings file resides  --localizable-strings-dir en.lproj    --show-ios-log  false  [DEPRECATED] - (IOS-only) if set, the iOS system log will be written to the console     --enable-heapdump  false  Enables NodeJS memory dumps collection feature. This feature is extremely useful for finding memory leaks. Use the 'kill -SIGUSR2  PID ' command to create a dump of memory heap for  node  process with the particular PID (this works for  nix systems only). The dump file will be created in the same folder, where main Appium script was executed and will have  .heapsnapshot extension. These snapshot can be then loaded to Chrome Inspector for further investigation. Read the  Rising Stack article  for more details.", 
            "title": "Server flags"
        }, 
        {
            "location": "/writing-and-running/touch-actions/", 
            "text": "Automating mobile gestures\n\n\nWhile the Selenium WebDriver spec has support for certain kinds of mobile\ninteraction, its parameters are not always easily mappable to the functionality\nthat the underlying device automation (like UIAutomation in the case of iOS)\nprovides. To that end, Appium implements the new TouchAction / MultiAction API\ndefined in the newest version of the spec\n(\nhttps://dvcs.w3.org/hg/webdriver/raw-file/tip/webdriver-spec.html#multiactions-1\n).\nNote that this is different from the earlier version of the TouchAction API in\nthe original JSON Wire Protocol.\n\n\nThese APIs allow you to build up arbitrary gestures with multiple actuators.\nPlease see the Appium client docs for your language in order to find examples\nof using this API.\n\n\nAn Overview of the TouchAction / MultiAction API\n\n\nTouchAction\n\n\nTouchAction\n objects contain a chain of events.\n\n\nIn all the appium client libraries, touch objects are created and are given a\nchain of events.\n\n\nThe available events from the spec are:\n * press\n * release\n * moveTo\n * tap\n * wait\n * longPress\n * cancel\n * perform\n\n\nHere's an example of creating an action in pseudocode:\n\n\nTouchAction().press(el0).moveTo(el1).release()\n\n\n\n\nThe above simulates a user pressing down on an element, sliding their finger\nto another position, and removing their finger from the screen.\n\n\nAppium performs the events in sequence. You can add a \nwait\n event to control\nthe timing of the gesture.\n\n\nmoveTo\n coordinates are \nrelative\n to the current position. For example, dragging from\n100,100 to 200,200 can be achieved by:\n\n\n.press(100,100) // Start at 100,100\n.moveTo(100,100) // Increase X \n Y by 100 each, ending up at 200,200\n\n\n\n\n\nThe appium client libraries have different ways of implementing this, for example:\nyou can pass in coordinates or an element to a \nmoveTo\n event. Passing both\ncoordinates \nand\n an element will treat the coordinates as relative to the\nelement's position, rather than relative to the current position.\n\n\nCalling the \nperform\n event sends the entire sequence of events to appium,\nand the touch gesture is run on your device.\n\n\nAppium clients also allow one to directly execute a TouchAction through the\ndriver object, rather than calling the \nperform\n event on the TouchAction\nobject.\n\n\nIn pseudocode, both of the following are equivalent:\n\n\nTouchAction().tap(el).perform()\n\ndriver.perform(TouchAction().tap(el))\n\n\n\n\nMultiTouch\n\n\nMultiTouch\n objects are collections of TouchActions.\n\n\nMultiTouch gestures only have two methods, \nadd\n, and \nperform\n.\n\n\nadd\n is used to add another TouchAction to this MultiTouch.\n\n\nWhen \nperform\n is called, all the TouchActions which were added to the\nMultiTouch are sent to appium and performed as if they happened at the\nsame time. Appium first performs the first event of all TouchActions together,\nthen the second, etc.\n\n\nPseudocode example of tapping with two fingers:\n\n\naction0 = TouchAction().tap(el)\naction1 = TouchAction().tap(el)\nMultiAction().add(action0).add(action1).perform()\n\n\n\n\nBugs and Workarounds\n\n\nAn unfortunate bug exists in the iOS 7.0 - 8.x Simulators where ScrollViews,\nCollectionViews, and TableViews don't recognize gestures initiated by\nUIAutomation (which Appium uses under the hood for iOS). To work around this,\nwe have provided access to a different function, \nscroll\n, which in many cases\nallows you to do what you wanted to do with one of these views, namely, scroll\nit!\n\n\nScrolling\n\n\nTo allow access to this special feature, we override the \nexecute\n or\n\nexecuteScript\n methods in the driver, and prefix the command with \nmobile:\n.\nSee examples below:\n\n\nTo scroll, pass direction in which you intend to scroll as parameter.\n\n\n// javascript\ndriver.execute('mobile: scroll', {direction: 'down'})\n\n\n\n\n// java\nJavascriptExecutor js = (JavascriptExecutor) driver;\nHashMap\nString, String\n scrollObject = new HashMap\nString, String\n();\nscrollObject.put(\ndirection\n, \ndown\n);\njs.executeScript(\nmobile: scroll\n, scrollObject);\n\n\n\n\n# ruby\nexecute_script 'mobile: scroll', direction: 'down'\n\n\n\n\n# python\ndriver.execute_script(\nmobile: scroll\n, {\ndirection\n: \ndown\n})\n\n\n\n\n// c#\nDictionary\nstring, string\n scrollObject = new Dictionary\nstring, string\n();\nscrollObject.Add(\ndirection\n, \ndown\n);\n((IJavaScriptExecutor)driver).ExecuteScript(\nmobile: scroll\n, scrollObject));\n\n\n\n\n$params = array(array('direction' =\n 'down'));\n$driver-\nexecuteScript(\nmobile: scroll\n, $params);\n\n\n\n\nSample to scroll using direction and element.\n\n\n// javascript\ndriver.execute('mobile: scroll', {direction: 'down', element: element.value.ELEMENT});\n\n\n\n\n// java\nJavascriptExecutor js = (JavascriptExecutor) driver;\nHashMap\nString, String\n scrollObject = new HashMap\nString, String\n();\nscrollObject.put(\ndirection\n, \ndown\n);\nscrollObject.put(\nelement\n, ((RemoteWebElement) element).getId());\njs.executeScript(\nmobile: scroll\n, scrollObject);\n\n\n\n\n# ruby\nexecute_script 'mobile: scroll', direction: 'down', element: element.ref\n\n\n\n\n# python\ndriver.execute_script(\nmobile: scroll\n, {\ndirection\n: \ndown\n, element: element.getAttribute(\nid\n)})\n\n\n\n\n// c#\nDictionary\nstring, string\n scrollObject = new Dictionary\nstring, string\n();\nscrollObject.Add(\ndirection\n, \ndown\n);\nscrollObject.Add(\nelement\n, \nelement_id\n);\n((IJavaScriptExecutor)driver).ExecuteScript(\nmobile: scroll\n, scrollObject));\n\n\n\n\n$params = array(array('direction' =\n 'down', 'element' =\n element.GetAttribute(\nid\n)));\n$driver-\nexecuteScript(\nmobile: scroll\n, $params);\n\n\n\n\nSwiping\n\n\nThis is an XCUITest driver specific method that is similar to scrolling (for reference, see \nhttps://developer.apple.com/reference/xctest/xcuielement). \n\n\nThis method has the same API as \nScrolling\n, just replace \"mobile: scroll\"\nwith \"mobile: swipe\"\n\n\nAutomating Sliders\n\n\niOS\n\n\n\n\nJava\n\n\n\n\n// java\n// slider values can be string representations of numbers between 0 and 1\n// e.g., \n0.1\n is 10%, \n1.0\n is 100%\nWebElement slider =  driver.findElement(By.xpath(\n//window[1]/slider[1]\n));\nslider.sendKeys(\n0.1\n);\n\n\n\n\nAndroid\n\n\nThe best way to interact with the slider on Android is with TouchActions.", 
            "title": "Touch actions"
        }, 
        {
            "location": "/writing-and-running/touch-actions/#automating-mobile-gestures", 
            "text": "While the Selenium WebDriver spec has support for certain kinds of mobile\ninteraction, its parameters are not always easily mappable to the functionality\nthat the underlying device automation (like UIAutomation in the case of iOS)\nprovides. To that end, Appium implements the new TouchAction / MultiAction API\ndefined in the newest version of the spec\n( https://dvcs.w3.org/hg/webdriver/raw-file/tip/webdriver-spec.html#multiactions-1 ).\nNote that this is different from the earlier version of the TouchAction API in\nthe original JSON Wire Protocol.  These APIs allow you to build up arbitrary gestures with multiple actuators.\nPlease see the Appium client docs for your language in order to find examples\nof using this API.", 
            "title": "Automating mobile gestures"
        }, 
        {
            "location": "/writing-and-running/touch-actions/#an-overview-of-the-touchaction-multiaction-api", 
            "text": "", 
            "title": "An Overview of the TouchAction / MultiAction API"
        }, 
        {
            "location": "/writing-and-running/touch-actions/#touchaction", 
            "text": "TouchAction  objects contain a chain of events.  In all the appium client libraries, touch objects are created and are given a\nchain of events.  The available events from the spec are:\n * press\n * release\n * moveTo\n * tap\n * wait\n * longPress\n * cancel\n * perform  Here's an example of creating an action in pseudocode:  TouchAction().press(el0).moveTo(el1).release()  The above simulates a user pressing down on an element, sliding their finger\nto another position, and removing their finger from the screen.  Appium performs the events in sequence. You can add a  wait  event to control\nthe timing of the gesture.  moveTo  coordinates are  relative  to the current position. For example, dragging from\n100,100 to 200,200 can be achieved by:  .press(100,100) // Start at 100,100\n.moveTo(100,100) // Increase X   Y by 100 each, ending up at 200,200  The appium client libraries have different ways of implementing this, for example:\nyou can pass in coordinates or an element to a  moveTo  event. Passing both\ncoordinates  and  an element will treat the coordinates as relative to the\nelement's position, rather than relative to the current position.  Calling the  perform  event sends the entire sequence of events to appium,\nand the touch gesture is run on your device.  Appium clients also allow one to directly execute a TouchAction through the\ndriver object, rather than calling the  perform  event on the TouchAction\nobject.  In pseudocode, both of the following are equivalent:  TouchAction().tap(el).perform()\n\ndriver.perform(TouchAction().tap(el))", 
            "title": "TouchAction"
        }, 
        {
            "location": "/writing-and-running/touch-actions/#multitouch", 
            "text": "MultiTouch  objects are collections of TouchActions.  MultiTouch gestures only have two methods,  add , and  perform .  add  is used to add another TouchAction to this MultiTouch.  When  perform  is called, all the TouchActions which were added to the\nMultiTouch are sent to appium and performed as if they happened at the\nsame time. Appium first performs the first event of all TouchActions together,\nthen the second, etc.  Pseudocode example of tapping with two fingers:  action0 = TouchAction().tap(el)\naction1 = TouchAction().tap(el)\nMultiAction().add(action0).add(action1).perform()", 
            "title": "MultiTouch"
        }, 
        {
            "location": "/writing-and-running/touch-actions/#bugs-and-workarounds", 
            "text": "An unfortunate bug exists in the iOS 7.0 - 8.x Simulators where ScrollViews,\nCollectionViews, and TableViews don't recognize gestures initiated by\nUIAutomation (which Appium uses under the hood for iOS). To work around this,\nwe have provided access to a different function,  scroll , which in many cases\nallows you to do what you wanted to do with one of these views, namely, scroll\nit!  Scrolling  To allow access to this special feature, we override the  execute  or executeScript  methods in the driver, and prefix the command with  mobile: .\nSee examples below:  To scroll, pass direction in which you intend to scroll as parameter.  // javascript\ndriver.execute('mobile: scroll', {direction: 'down'})  // java\nJavascriptExecutor js = (JavascriptExecutor) driver;\nHashMap String, String  scrollObject = new HashMap String, String ();\nscrollObject.put( direction ,  down );\njs.executeScript( mobile: scroll , scrollObject);  # ruby\nexecute_script 'mobile: scroll', direction: 'down'  # python\ndriver.execute_script( mobile: scroll , { direction :  down })  // c#\nDictionary string, string  scrollObject = new Dictionary string, string ();\nscrollObject.Add( direction ,  down );\n((IJavaScriptExecutor)driver).ExecuteScript( mobile: scroll , scrollObject));  $params = array(array('direction' =  'down'));\n$driver- executeScript( mobile: scroll , $params);  Sample to scroll using direction and element.  // javascript\ndriver.execute('mobile: scroll', {direction: 'down', element: element.value.ELEMENT});  // java\nJavascriptExecutor js = (JavascriptExecutor) driver;\nHashMap String, String  scrollObject = new HashMap String, String ();\nscrollObject.put( direction ,  down );\nscrollObject.put( element , ((RemoteWebElement) element).getId());\njs.executeScript( mobile: scroll , scrollObject);  # ruby\nexecute_script 'mobile: scroll', direction: 'down', element: element.ref  # python\ndriver.execute_script( mobile: scroll , { direction :  down , element: element.getAttribute( id )})  // c#\nDictionary string, string  scrollObject = new Dictionary string, string ();\nscrollObject.Add( direction ,  down );\nscrollObject.Add( element ,  element_id );\n((IJavaScriptExecutor)driver).ExecuteScript( mobile: scroll , scrollObject));  $params = array(array('direction' =  'down', 'element' =  element.GetAttribute( id )));\n$driver- executeScript( mobile: scroll , $params);  Swiping  This is an XCUITest driver specific method that is similar to scrolling (for reference, see \nhttps://developer.apple.com/reference/xctest/xcuielement).   This method has the same API as  Scrolling , just replace \"mobile: scroll\"\nwith \"mobile: swipe\"  Automating Sliders  iOS   Java   // java\n// slider values can be string representations of numbers between 0 and 1\n// e.g.,  0.1  is 10%,  1.0  is 100%\nWebElement slider =  driver.findElement(By.xpath( //window[1]/slider[1] ));\nslider.sendKeys( 0.1 );  Android  The best way to interact with the slider on Android is with TouchActions.", 
            "title": "Bugs and Workarounds"
        }, 
        {
            "location": "/writing-and-running/uiautomator2/", 
            "text": "UIAutomator 2\n\n\nWhile the API remains almost the same, the internal implementation has changed and we see the introduction of UIObject2\n\n\nUIObject2\n\n\nUnlike UiObject, the UIElement is bound to a particular view instance and can become stale if the underlying view object is destroyed. As a result, it may be necessary to call findObject(BySelector) to obtain a new UiObject2 instance if the UI changes significantly.\n\n\nThe Build System\n\n\nUIAutomator 2 utilizes capabilities of Gradle as a build system. Previous, UIAutomator used Maven/Ant. \n\n\nTest Assets\n\n\nTest packages produced are now APKs. Previously, UIAutomator produced .jar or .zip files. This makes UIAutomator 2 completely Android instrumentation capable.\n\n\nADB\n\n\nADB deals with UIAutomator 2 slightly differently.\n\n\nThe original version of UiAutomator ran as a shell program:\n\n\nadb shell uiautomator runtest ...\n\n\nUiAutomator 2 is based on Android Instrumentation. Tests are compiled to APKs, and run in an application process:\n\n\nadb shell am instrument ...", 
            "title": "Uiautomator2"
        }, 
        {
            "location": "/writing-and-running/uiautomator2/#uiautomator-2", 
            "text": "While the API remains almost the same, the internal implementation has changed and we see the introduction of UIObject2", 
            "title": "UIAutomator 2"
        }, 
        {
            "location": "/writing-and-running/uiautomator2/#uiobject2", 
            "text": "Unlike UiObject, the UIElement is bound to a particular view instance and can become stale if the underlying view object is destroyed. As a result, it may be necessary to call findObject(BySelector) to obtain a new UiObject2 instance if the UI changes significantly.", 
            "title": "UIObject2"
        }, 
        {
            "location": "/writing-and-running/uiautomator2/#the-build-system", 
            "text": "UIAutomator 2 utilizes capabilities of Gradle as a build system. Previous, UIAutomator used Maven/Ant.", 
            "title": "The Build System"
        }, 
        {
            "location": "/writing-and-running/uiautomator2/#test-assets", 
            "text": "Test packages produced are now APKs. Previously, UIAutomator produced .jar or .zip files. This makes UIAutomator 2 completely Android instrumentation capable.", 
            "title": "Test Assets"
        }, 
        {
            "location": "/writing-and-running/uiautomator2/#adb", 
            "text": "ADB deals with UIAutomator 2 slightly differently.  The original version of UiAutomator ran as a shell program:  adb shell uiautomator runtest ...  UiAutomator 2 is based on Android Instrumentation. Tests are compiled to APKs, and run in an application process:  adb shell am instrument ...", 
            "title": "ADB"
        }, 
        {
            "location": "/writing-and-running/uiautomator_uiselector/", 
            "text": "uiautomator UiSelector\n\n\nAppium enables searching using \nUiSelectors\n.\n\nUiScrollable\n\nis also supported.\n\n\nNote that the index selector is unreliable so prefer instance instead. The\nfollowing examples are written against the api demos apk using Ruby.\n\n\nFind the first textview.\n\n\n# ruby\nfirst_textview = find_element(:uiautomator, 'new UiSelector().className(\nandroid.widget.TextView\n).instance(0)');\n\n\n\n\nFind the first element by text.\n\n\n# ruby\nfirst_text = find_element(:uiautomator, 'new UiSelector().text(\nAnimation\n)')\nfirst_text.text # \nAnimation\n\n\n\n\n\nFind the first scrollable element, then find a TextView with the text \"Tabs\".\nThe \"Tabs\" element will be scrolled into view.\n\n\n# ruby\nelement = find_element(:uiautomator, 'new UiScrollable(new UiSelector().scrollable(true).instance(0)).getChildByText(new UiSelector().className(\nandroid.widget.TextView\n), \nTabs\n)')\n\n\n\n\nAs a special case, scrollIntoView returns the element that is scrolled into view.\nscrollIntoView allows scrolling to any UiSelector.\n\n\n# ruby\nelement = find_element(:uiautomator, 'new UiScrollable(new UiSelector().scrollable(true).instance(0)).scrollIntoView(new UiSelector().text(\nWebView\n).instance(0));')\nelement.text # \nWebView", 
            "title": "Uiautomator uiselector"
        }, 
        {
            "location": "/writing-and-running/uiautomator_uiselector/#uiautomator-uiselector", 
            "text": "Appium enables searching using  UiSelectors . UiScrollable \nis also supported.  Note that the index selector is unreliable so prefer instance instead. The\nfollowing examples are written against the api demos apk using Ruby.  Find the first textview.  # ruby\nfirst_textview = find_element(:uiautomator, 'new UiSelector().className( android.widget.TextView ).instance(0)');  Find the first element by text.  # ruby\nfirst_text = find_element(:uiautomator, 'new UiSelector().text( Animation )')\nfirst_text.text #  Animation   Find the first scrollable element, then find a TextView with the text \"Tabs\".\nThe \"Tabs\" element will be scrolled into view.  # ruby\nelement = find_element(:uiautomator, 'new UiScrollable(new UiSelector().scrollable(true).instance(0)).getChildByText(new UiSelector().className( android.widget.TextView ),  Tabs )')  As a special case, scrollIntoView returns the element that is scrolled into view.\nscrollIntoView allows scrolling to any UiSelector.  # ruby\nelement = find_element(:uiautomator, 'new UiScrollable(new UiSelector().scrollable(true).instance(0)).scrollIntoView(new UiSelector().text( WebView ).instance(0));')\nelement.text #  WebView", 
            "title": "uiautomator UiSelector"
        }, 
        {
            "location": "/writing-and-running/unicode/", 
            "text": "Multi-lingual Support\n\n\nOne problem with dealing with non-Latin characters programmatically is that, for characters\nwith accents, there can be multiple ways of encoding the form. So, for the letter\n\n\u00e9\n, there are two encodings: a single combining character \n\u00e9\n (Unicode's\n\nLATIN SMALL LETTER E WITH ACUTE\n), and the combination of the letter \ne\n followed\nby the accent, \n\u0301\n (\nCOMBINING ACUTE ACCENT\n). In order to deal with this, there\nis \nnormalization\n, an operation that makes \n\"equivalent strings have a unique\nbinary representation\"\n.\n\n\nLuckily, normalizing ASCII text (i.e., text that doesn't need to be normalized)\ndoes not cause any changes, and performing\nthe operation multiple times does not have an effect. Thus a normalization\nfunction can be called on text without risking adverse effects.\n\n\n// javascript\nvar unorm = require('unorm');\n\n'some ASCII text' === unorm.nfd('some ASCII text');\nunorm.nfd('Ad\u00e9la\u00efde Herv\u00e9') === unorm.nfd(unorm.nfd('Ad\u00e9la\u00efde Herv\u00e9'));\n\n\n\n\nSo, when dealing with unicode text within a test, you need to normalize, preferably\non both the text expected and that received from Appium. There are a number of\nways to do the normalization, so be sure to perform the same operation on both\nstrings!\n\n\n// javascript\nvar unorm = require('unorm');\ndriver\n  .elementByAccessibilityId('find')\n    .text()\n    .then(function (txt) {\n      unorm.nfd(txt).should.be(unorm.nfd(\n\u00e9 \u0152 \u00f9 \u1e0d\n));\n    });\n\n\n\n\nOne tell-tale sign that the problem is with the encoding of the unicode text is\nan assertion that fails but reports what look to be the same string:\n\n\nAssertionError: expected 'Fran\u00e7ois G\u00e9rard' to deeply equal 'Fran\u00e7ois G\u00e9rard'\n      + expected - actual\n\n      +\nFran\u00e7ois G\u00e9rard\n\n      -\nFran\u00e7ois G\u00e9rard\n\n\n\n\n\nSince the error is just encoding, the output \nlooks\n the same. Normalized, these\nshould equal programmatically as well as visually.\n\n\nFinders\n\n\nFinding by text can also require normalization. For instance, if you have a button\nin an iOS app with the name \n\u041d\u0430\u0439\u0442\u0438\n you may need to normalize the text within the\nfind command.\n\n\n// javascript\nvar unorm = require('unorm');\ndriver\n  .findElementByXPath(unorm.nfd(\n//UIAButton[@name='\u041d\u0430\u0439\u0442\u0438']\n))\n    .should.eventually.exist;\n\n\n\n\nOtherwise the elements may not be found.\n\n\nText Fields\n\n\nBy default the automation tools for both iOS and Android do not support non-ASCII\ncharacters sent to editable fields through the keyboard.\n\n\niOS\n\n\nAppium sends non-ASCII characters to iOS editable fields directly, bypassing the\nkeyboard altogether. While this allows the text to be inputted in tests, it should\nbe kept in mind that any business logic triggered by keyboard input will therefore\nnot be tested.\n\n\nAs above, the text received may need to be normalized before asserting on it.\n\n\n// javascript\nvar unorm = require('unorm');\nvar testText = unorm.nfd(\n\u00e9 \u0152 \u00f9 \u1e0d\n);\ndriver\n  .elementsByClassName('UIATextField').at(1)\n    .sendKeys(testText)\n    .text()\n    .should.become(testText)\n  .nodeify(done);\n\n\n\n\nAndroid\n\n\nAndroid tests allow for Unicode input by installing and using a \nspecialized\nkeyboard\n that allows the text\nto be passed as ASCII text between Appium and the application being tested.\n\n\nIn order to utilize this functionality, set the \nunicodeKeyboard\n desired capability\nis set to \ntrue\n. If the keyboard should be returned to its original state, the\n\nresetKeyboard\n desired capability should also be set to \ntrue\n. Otherwise Appium's\nUnicode keyboard will remain enabled on the device after the tests are completed.\n\n\nThen tests can pass Unicode text to editable fields using \nsend_keys\n.\n\n\n// javascript\nvar desired = {\n  app: '/path/to/app',\n  deviceName: 'Android Emulator',\n  deviceVersion: '4.4',\n  platformName: 'Android',\n  unicodeKeyboard: true,\n  resetKeyboard: true\n};\nvar testText = '\u00e9 \u0152 \u00f9 \u1e0d';\ndriver\n  .elementByClassName('android.widget.EditText')\n  .sendKeys(testText)\n  .text()\n  .should.eventually.become(testText)\n  .nodeify(done);", 
            "title": "Unicode"
        }, 
        {
            "location": "/writing-and-running/unicode/#multi-lingual-support", 
            "text": "One problem with dealing with non-Latin characters programmatically is that, for characters\nwith accents, there can be multiple ways of encoding the form. So, for the letter \u00e9 , there are two encodings: a single combining character  \u00e9  (Unicode's LATIN SMALL LETTER E WITH ACUTE ), and the combination of the letter  e  followed\nby the accent,  \u0301  ( COMBINING ACUTE ACCENT ). In order to deal with this, there\nis  normalization , an operation that makes  \"equivalent strings have a unique\nbinary representation\" .  Luckily, normalizing ASCII text (i.e., text that doesn't need to be normalized)\ndoes not cause any changes, and performing\nthe operation multiple times does not have an effect. Thus a normalization\nfunction can be called on text without risking adverse effects.  // javascript\nvar unorm = require('unorm');\n\n'some ASCII text' === unorm.nfd('some ASCII text');\nunorm.nfd('Ad\u00e9la\u00efde Herv\u00e9') === unorm.nfd(unorm.nfd('Ad\u00e9la\u00efde Herv\u00e9'));  So, when dealing with unicode text within a test, you need to normalize, preferably\non both the text expected and that received from Appium. There are a number of\nways to do the normalization, so be sure to perform the same operation on both\nstrings!  // javascript\nvar unorm = require('unorm');\ndriver\n  .elementByAccessibilityId('find')\n    .text()\n    .then(function (txt) {\n      unorm.nfd(txt).should.be(unorm.nfd( \u00e9 \u0152 \u00f9 \u1e0d ));\n    });  One tell-tale sign that the problem is with the encoding of the unicode text is\nan assertion that fails but reports what look to be the same string:  AssertionError: expected 'Fran\u00e7ois G\u00e9rard' to deeply equal 'Fran\u00e7ois G\u00e9rard'\n      + expected - actual\n\n      + Fran\u00e7ois G\u00e9rard \n      - Fran\u00e7ois G\u00e9rard   Since the error is just encoding, the output  looks  the same. Normalized, these\nshould equal programmatically as well as visually.", 
            "title": "Multi-lingual Support"
        }, 
        {
            "location": "/writing-and-running/unicode/#finders", 
            "text": "Finding by text can also require normalization. For instance, if you have a button\nin an iOS app with the name  \u041d\u0430\u0439\u0442\u0438  you may need to normalize the text within the\nfind command.  // javascript\nvar unorm = require('unorm');\ndriver\n  .findElementByXPath(unorm.nfd( //UIAButton[@name='\u041d\u0430\u0439\u0442\u0438'] ))\n    .should.eventually.exist;  Otherwise the elements may not be found.", 
            "title": "Finders"
        }, 
        {
            "location": "/writing-and-running/unicode/#text-fields", 
            "text": "By default the automation tools for both iOS and Android do not support non-ASCII\ncharacters sent to editable fields through the keyboard.", 
            "title": "Text Fields"
        }, 
        {
            "location": "/writing-and-running/unicode/#ios", 
            "text": "Appium sends non-ASCII characters to iOS editable fields directly, bypassing the\nkeyboard altogether. While this allows the text to be inputted in tests, it should\nbe kept in mind that any business logic triggered by keyboard input will therefore\nnot be tested.  As above, the text received may need to be normalized before asserting on it.  // javascript\nvar unorm = require('unorm');\nvar testText = unorm.nfd( \u00e9 \u0152 \u00f9 \u1e0d );\ndriver\n  .elementsByClassName('UIATextField').at(1)\n    .sendKeys(testText)\n    .text()\n    .should.become(testText)\n  .nodeify(done);", 
            "title": "iOS"
        }, 
        {
            "location": "/writing-and-running/unicode/#android", 
            "text": "Android tests allow for Unicode input by installing and using a  specialized\nkeyboard  that allows the text\nto be passed as ASCII text between Appium and the application being tested.  In order to utilize this functionality, set the  unicodeKeyboard  desired capability\nis set to  true . If the keyboard should be returned to its original state, the resetKeyboard  desired capability should also be set to  true . Otherwise Appium's\nUnicode keyboard will remain enabled on the device after the tests are completed.  Then tests can pass Unicode text to editable fields using  send_keys .  // javascript\nvar desired = {\n  app: '/path/to/app',\n  deviceName: 'Android Emulator',\n  deviceVersion: '4.4',\n  platformName: 'Android',\n  unicodeKeyboard: true,\n  resetKeyboard: true\n};\nvar testText = '\u00e9 \u0152 \u00f9 \u1e0d';\ndriver\n  .elementByClassName('android.widget.EditText')\n  .sendKeys(testText)\n  .text()\n  .should.eventually.become(testText)\n  .nodeify(done);", 
            "title": "Android"
        }, 
        {
            "location": "/writing-and-running/windows-app-testing/", 
            "text": "Windows Application UI Testing\n\n\nWindows specific UI testing on Appium is powered by [WinAppDriver] (https://github.com/Microsoft/WinAppDriver), which is downloaded as part of the Appium install.\n\n\nJava Samples\n\n\n\n\nOpen the sample folder as an existing project in a Java IDE such as IntelliJ. For example: \nCalculatorTest\n\n\nIn the Java IDE build and run the test\n\n\n\n\nC# Samples\n\n\n\n\nPull and open \nCalculatorTest.sln\n under \nCalculatorTest\n\n\nIn Visual Studio 2015 with the test solution open build the test and select \nTest \n Run \n All Tests\n\n\n\n\nFeatures\n\n\nWindows Application Driver supports testing \nUniversal Windows Platform (UWP)\n and \nClassic Windows (Win32)\n apps on \nWindows 10 PC\n\n\nCreating Your Own Test Script\n\n\nYou can choose any programming language or tools supported by Appium/Selenium to write your test scripts. In the example below, we will author the test script in C# using Microsoft Visual Studio 2015.\n\n\nCreate Test Project\n\n\n\n\nOpen \nMicrosoft Visual Studio 2015\n\n\nCreate the test project and solution. I.e. select \nNew Project \n Templates \n Visual C# \n Test \n Unit Test Project\n\n\nOnce created, select \nProject \n Manage NuGet Packages... \n Browse\n and search for \nAppium.WebDriver\n\n\nInstall the \nAppium.WebDriver\n NuGet packages for the test project\n\n\nStart writing your test (see sample code under [samples])\n\n\n\n\nUniversal Windows Platform App Testing\n\n\nTo test a UWP app, you can use any Selenium supported language and simply specify the \nApplication Id\n for the app under test in the \napp\n capabilities entry. Below is an example of creating a test session for Windows \nAlarms \n Clock\n app written in C#:\n\n\n// Launch the AlarmClock app\nDesiredCapabilities appCapabilities = new DesiredCapabilities();\nappCapabilities.SetCapability(\napp\n, \nMicrosoft.WindowsAlarms_8wekyb3d8bbwe!App\n);\nAlarmClockSession = new WindowsDriver\nWindowsElement\n(new Uri(\nhttp://127.0.0.1:4723\n), appCapabilities);\n// Control the AlarmClock app\nAlarmClockSession.FindElementByAccessibilityId(\nAddAlarmButton\n).Click();\nAlarmClockSession.FindElementByAccessibilityId(\nAlarmNameTextBox\n).Clear();\n\n\n\n\nWhen testing the application you authored yourself, you can find the \nApplication Id\n in the generetated \nAppX\\vs.appxrecipe\n file under \nRegisteredUserNmodeAppID\n node. E.g. \nc24c8163-548e-4b84-a466-530178fc0580_scyf5npe3hv32!App\n\n\nClassic Windows App Testing\n\n\nTo test a classic Windows app, you can also use any Selenium supported language and specify the \nfull executable path\n for the app under test in the \napp\n capabilities entry. Below is an example of creating a test session for Windows \nNotepad\n app:\n\n\n// Launch Notepad\nDesiredCapabilities appCapabilities = new DesiredCapabilities();\nappCapabilities.SetCapability(\napp\n, @\nC:\\Windows\\System32\\notepad.exe\n);\nNotepadSession = new WindowsDriver\nWindowsElement\n(new Uri(\nhttp://127.0.0.1:4723\n), appCapabilities);\n// Control the AlarmClock app\nNotepadSession.FindElementByClassName(\nEdit\n).SendKeys(\nThis is some text\n);\n\n\n\n\nStarting a Session\n\n\nNote that you should additionally use these capabilities to ensure you are getting a Windows App automation session:\n\n\nplatformName\n: \nWindows\n\n\ndeviceName\n: \nWindowsPC\n\n\nInspecting UI Elements\n\n\nMicrosoft Visual Studio 2015 by default includes Windows SDK that provides great tool to inspect the application you are testing. This tool allows you to see every UI element/node that you can query using Windows Application Driver. This \ninspect.exe\n tool can be found under the Windows SDK folder such as \nC:\\Program Files (x86)\\Windows Kits\\10\\bin\\x86\n\n\n\n\n\n\n\n\nLocator Strategy\n\n\nMatched Attribute\n\n\n\n\n\n\n\n\n\n\naccessibility id\n\n\nAutomationId\n\n\n\n\n\n\nclass name\n\n\nClassName\n\n\n\n\n\n\nname\n\n\nName", 
            "title": "Windows app testing"
        }, 
        {
            "location": "/writing-and-running/windows-app-testing/#windows-application-ui-testing", 
            "text": "Windows specific UI testing on Appium is powered by [WinAppDriver] (https://github.com/Microsoft/WinAppDriver), which is downloaded as part of the Appium install.", 
            "title": "Windows Application UI Testing"
        }, 
        {
            "location": "/writing-and-running/windows-app-testing/#java-samples", 
            "text": "Open the sample folder as an existing project in a Java IDE such as IntelliJ. For example:  CalculatorTest  In the Java IDE build and run the test", 
            "title": "Java Samples"
        }, 
        {
            "location": "/writing-and-running/windows-app-testing/#c-samples", 
            "text": "Pull and open  CalculatorTest.sln  under  CalculatorTest  In Visual Studio 2015 with the test solution open build the test and select  Test   Run   All Tests", 
            "title": "C# Samples"
        }, 
        {
            "location": "/writing-and-running/windows-app-testing/#features", 
            "text": "Windows Application Driver supports testing  Universal Windows Platform (UWP)  and  Classic Windows (Win32)  apps on  Windows 10 PC", 
            "title": "Features"
        }, 
        {
            "location": "/writing-and-running/windows-app-testing/#creating-your-own-test-script", 
            "text": "You can choose any programming language or tools supported by Appium/Selenium to write your test scripts. In the example below, we will author the test script in C# using Microsoft Visual Studio 2015.", 
            "title": "Creating Your Own Test Script"
        }, 
        {
            "location": "/writing-and-running/windows-app-testing/#create-test-project", 
            "text": "Open  Microsoft Visual Studio 2015  Create the test project and solution. I.e. select  New Project   Templates   Visual C#   Test   Unit Test Project  Once created, select  Project   Manage NuGet Packages...   Browse  and search for  Appium.WebDriver  Install the  Appium.WebDriver  NuGet packages for the test project  Start writing your test (see sample code under [samples])", 
            "title": "Create Test Project"
        }, 
        {
            "location": "/writing-and-running/windows-app-testing/#universal-windows-platform-app-testing", 
            "text": "To test a UWP app, you can use any Selenium supported language and simply specify the  Application Id  for the app under test in the  app  capabilities entry. Below is an example of creating a test session for Windows  Alarms   Clock  app written in C#:  // Launch the AlarmClock app\nDesiredCapabilities appCapabilities = new DesiredCapabilities();\nappCapabilities.SetCapability( app ,  Microsoft.WindowsAlarms_8wekyb3d8bbwe!App );\nAlarmClockSession = new WindowsDriver WindowsElement (new Uri( http://127.0.0.1:4723 ), appCapabilities);\n// Control the AlarmClock app\nAlarmClockSession.FindElementByAccessibilityId( AddAlarmButton ).Click();\nAlarmClockSession.FindElementByAccessibilityId( AlarmNameTextBox ).Clear();  When testing the application you authored yourself, you can find the  Application Id  in the generetated  AppX\\vs.appxrecipe  file under  RegisteredUserNmodeAppID  node. E.g.  c24c8163-548e-4b84-a466-530178fc0580_scyf5npe3hv32!App", 
            "title": "Universal Windows Platform App Testing"
        }, 
        {
            "location": "/writing-and-running/windows-app-testing/#classic-windows-app-testing", 
            "text": "To test a classic Windows app, you can also use any Selenium supported language and specify the  full executable path  for the app under test in the  app  capabilities entry. Below is an example of creating a test session for Windows  Notepad  app:  // Launch Notepad\nDesiredCapabilities appCapabilities = new DesiredCapabilities();\nappCapabilities.SetCapability( app , @ C:\\Windows\\System32\\notepad.exe );\nNotepadSession = new WindowsDriver WindowsElement (new Uri( http://127.0.0.1:4723 ), appCapabilities);\n// Control the AlarmClock app\nNotepadSession.FindElementByClassName( Edit ).SendKeys( This is some text );", 
            "title": "Classic Windows App Testing"
        }, 
        {
            "location": "/writing-and-running/windows-app-testing/#starting-a-session", 
            "text": "Note that you should additionally use these capabilities to ensure you are getting a Windows App automation session:  platformName :  Windows  deviceName :  WindowsPC", 
            "title": "Starting a Session"
        }, 
        {
            "location": "/writing-and-running/windows-app-testing/#inspecting-ui-elements", 
            "text": "Microsoft Visual Studio 2015 by default includes Windows SDK that provides great tool to inspect the application you are testing. This tool allows you to see every UI element/node that you can query using Windows Application Driver. This  inspect.exe  tool can be found under the Windows SDK folder such as  C:\\Program Files (x86)\\Windows Kits\\10\\bin\\x86     Locator Strategy  Matched Attribute      accessibility id  AutomationId    class name  ClassName    name  Name", 
            "title": "Inspecting UI Elements"
        }
    ]
}